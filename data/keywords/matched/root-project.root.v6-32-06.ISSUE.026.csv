id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/6368:1206,deployability,version,version,1206,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:1206,integrability,version,version,1206,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:1206,modifiability,version,version,1206,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:14,performance,failur,failure,14,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:116,performance,error,error,116,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:811,performance,error,error,811,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:874,performance,Error,Error,874,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:931,performance,Error,Error,931,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:14,reliability,fail,failure,14,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:116,safety,error,error,116,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:811,safety,error,error,811,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:874,safety,Error,Error,874,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:931,safety,Error,Error,931,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:116,usability,error,error,116,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:811,usability,error,error,811,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:837,usability,statu,status,837,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:874,usability,Error,Error,874,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:931,usability,Error,Error,931,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/issues/6368:1002,usability,behavi,behavior,1002,"6.22.02 build failure with -Dx11=OFF; ## Describe the bug. When building 6.22.02 with x11 disabled, there's a build error:. ```. CMakeFiles/RGL.dir/src/TGLFormat.cxx.o: In function `TGLFormat::InitAvailableSamples()':. TGLFormat.cxx:(.text+0x35c): undefined reference to `XGetVisualInfo'. TGLFormat.cxx:(.text+0x476): undefined reference to `XFree'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::CreateWindow(TGWindow const*, TGLFormat const&, unsigned int, unsigned int, std::pair<void*, void*>&)':. TGLWidget.cxx:(.text+0xcd5): undefined reference to `XCreateColormap'. TGLWidget.cxx:(.text+0xd28): undefined reference to `XCreateWindow'. CMakeFiles/RGL.dir/src/TGLWidget.cxx.o: In function `TGLWidget::~TGLWidget()':. TGLWidget.cxx:(.text+0x1765): undefined reference to `XFree'. collect2: error: ld returned 1 exit status. make[2]: *** [lib/libRGL.so] Error 1. make[1]: *** [graf3d/gl/CMakeFiles/RGL.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... ```. ## Expected behavior. a clean build. ## To Reproduce. ```. setup gcc 9.2.0. > export CXX=g++. > export CC=gcc. > cmake -Dx11=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off ../src. > make -j30. ```. ## Setup. version: v6.22.02. OS: RHEL7. root built from git source (tag v6-22-02). gcc: 9.2.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6368
https://github.com/root-project/root/pull/6369:11,deployability,build,building,11,v622 allow building Clad with Clang compiler; This fixes ROOT-10886 for v6.22,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6369
https://github.com/root-project/root/issues/6370:1390,availability,error,error,1390,"nality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3576,availability,state,state,3576,"86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3741,availability,state,state,3741,". File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/di",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6765,availability,Operat,Operating,6765,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6840,availability,down,download,6840,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:456,deployability,modul,module,456,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:819,deployability,fail,fails,819,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1079,deployability,build,build,1079,"!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1272,deployability,releas,releases,1272,"erialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1343,deployability,fail,fails,1343," calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1474,deployability,modul,module,1474,"d due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1900,deployability,releas,releases,1900,"ur code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2050,deployability,releas,releases,2050,"o run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2216,deployability,releas,releases,2216,"5be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2369,deployability,releas,releases,2369,"on3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in sa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2713,deployability,modul,module,2713,"o). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2775,deployability,releas,releases,2775,"tos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2928,deployability,releas,releases,2928,"7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3117,deployability,releas,releases,3117,".7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3272,deployability,releas,releases,3272,"lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3624,deployability,releas,releases,3624,"s/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3778,deployability,releas,releases,3778,"s/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:4153,deployability,releas,releases,4153,"64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). Fi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:4327,deployability,releas,releases,4327,"/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:4481,deployability,releas,releases,4481,"64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:4856,deployability,releas,releases,4856,"y"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:5030,deployability,releas,releases,5030,"ages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97pytho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:5184,deployability,releas,releases,5184,"/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:5373,deployability,releas,releases,5373,"-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:5538,deployability,releas,releases,5538,"ib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:5696,deployability,releas,releases,5696,"tos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:5862,deployability,releas,releases,5862,"CG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6014,deployability,releas,releases,6014,"cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6385,deployability,releas,releases,6385,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6753,deployability,version,version,6753,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6822,deployability,instal,install,6822,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6887,deployability,version,versions,6887,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6957,deployability,releas,releases,6957,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1493,energy efficiency,load,loads,1493,"s of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call un",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1674,integrability,protocol,protocol,1674,"description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_metho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3576,integrability,state,state,3576,"86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3741,integrability,state,state,3741,". File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/di",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6753,integrability,version,version,6753,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6887,integrability,version,versions,6887,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:327,interoperability,distribut,distributive,327,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1674,interoperability,protocol,protocol,1674,"description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_metho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:456,modifiability,modul,module,456,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:599,modifiability,exten,extending,599,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1474,modifiability,modul,module,1474,"d due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1613,modifiability,pac,packages,1613,"tionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1812,modifiability,pac,packages,1812,"nd fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2621,modifiability,pac,packages,2621,"l/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2713,modifiability,modul,module,2713,"o). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:3524,modifiability,pac,packages,3524," File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-cent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:4030,modifiability,pac,packages,4030,"(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 662, in save_reduce. save(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/rele",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:4733,modifiability,pac,packages,4733,"ave(state). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 885, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 902, in save_module_dict. StockPickler.save_dict(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 859, in save_dict. self._batch_setitems(obj.items()). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 890, in _batch_setitems. save(v). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6266,modifiability,pac,packages,6266,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6753,modifiability,version,version,6753,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6887,modifiability,version,versions,6887,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1390,performance,error,error,1390,"nality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1493,performance,load,loads,1493,"s of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call un",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:819,reliability,fail,fails,819,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1343,reliability,fail,fails,1343," calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:456,safety,modul,module,456,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1033,safety,input,input,1033," in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1246,safety,test,tested,1246,"for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1390,safety,error,error,1390,"nality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1474,safety,modul,module,1474,"d due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:2713,safety,modul,module,2713,"o). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method. pickler.save_reduce(_get_attr, (module, obj.__name__), obj=obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 638, in save_reduce. save(args). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 774, in save_tuple. save(element). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1269, in save_module. state=_main_dict). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:585,security,sign,significantly,585,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1148,testability,simpl,simple,1148,"->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in sa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1246,testability,test,tested,1246,"for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1402,testability,Trace,Traceback,1402,"gular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:6994,testability,context,context,6994,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:7023,testability,context,context,7023,"File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 819, in save_list. self._batch_appends(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 846, in _batch_appends. save(tmp[0]). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 633, in save_reduce. save(cls). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save. f(self, obj) # Call unbound method with explicit self. File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1330, in save_type. StockPickler.save_global(pickler, obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 960, in save_global. (obj, module_name, name)) from None. _pickle.PicklingError: Can't pickle <class '_pythonization.compose_method.<locals>.composition_pythonizor'>: it's not found as _pythonization.compose_method.<locals>.composition_pythonizor. ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. ROOT versions from LCG_94 to LCG_97a. 2. centos7, lxplus7.cern.ch . 3. LCG-releases via cvmfs . . ## Additional context. <!--. Add any other context about the problem here. -->. I've opened the issue also for `dill` project: https://github.com/uqfoundation/dill/issues/356.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:89,usability,clear,clear,89,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:137,usability,behavi,behavior,137,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:642,usability,behavi,behavior,642,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:660,usability,clear,clear,660,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:735,usability,behavi,behaviour,735,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:888,usability,behavi,behavior,888,"Broken serialization of ROOT objects in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1033,usability,input,input,1033," in python3 with dill ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1148,usability,simpl,simple,1148,"->. Serialization of ROOT objects in python using `dill` is broken for `python3`, but it works ok for `python2`. . ( `dill` serialization is vital for the proper paralllel and distributive python calculations using `pathos` suite. The functionality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in sa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6370:1390,usability,error,error,1390,"nality of . regular paralell python `pp` and `multiprocessing` module is very limited due to limitations of `pickle`` serialization, . and it is a moment when `dill`/`pathos` enters the game, significantly extending the functionality. . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Similar behaviour for `python2` and `python3` is expected . b ut it works for `python2` and fails for `python3`. . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. to reproduce see this very simple gist . https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a. and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error. ```. Traceback (most recent call last):. File ""./test_dill.py"", line 13, in <module>. hh = dill.loads ( dill.dumps ( h ) ). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps. dump(obj, file, protocol, byref, fmode, recurse)#, strictio). File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump. pik.dump(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump. self.save(obj). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save. self.save_reduce(obj=obj, *rv). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce. save(func). File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6370
https://github.com/root-project/root/issues/6371:13,reliability,doe,doesn,13,"[DF] Display doesn't work with non-top-level TTree branches; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. RDF::Display does not search non-top-level TTree branches for regex matches, so `Display(""a.b"")` throw a ""column not found"" exception. The problem is at https://github.com/root-project/root/blob/8c8cefe83a147bf8a88b694426840175615d5065/tree/dataframe/src/RDFInterfaceUtils.cxx#L383",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6371
https://github.com/root-project/root/issues/6371:169,reliability,doe,does,169,"[DF] Display doesn't work with non-top-level TTree branches; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. RDF::Display does not search non-top-level TTree branches for regex matches, so `Display(""a.b"")` throw a ""column not found"" exception. The problem is at https://github.com/root-project/root/blob/8c8cefe83a147bf8a88b694426840175615d5065/tree/dataframe/src/RDFInterfaceUtils.cxx#L383",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6371
https://github.com/root-project/root/issues/6371:280,safety,except,exception,280,"[DF] Display doesn't work with non-top-level TTree branches; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. RDF::Display does not search non-top-level TTree branches for regex matches, so `Display(""a.b"")` throw a ""column not found"" exception. The problem is at https://github.com/root-project/root/blob/8c8cefe83a147bf8a88b694426840175615d5065/tree/dataframe/src/RDFInterfaceUtils.cxx#L383",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6371
https://github.com/root-project/root/issues/6371:90,usability,clear,clear,90,"[DF] Display doesn't work with non-top-level TTree branches; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. RDF::Display does not search non-top-level TTree branches for regex matches, so `Display(""a.b"")` throw a ""column not found"" exception. The problem is at https://github.com/root-project/root/blob/8c8cefe83a147bf8a88b694426840175615d5065/tree/dataframe/src/RDFInterfaceUtils.cxx#L383",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6371
https://github.com/root-project/root/issues/6371:138,usability,behavi,behavior,138,"[DF] Display doesn't work with non-top-level TTree branches; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. RDF::Display does not search non-top-level TTree branches for regex matches, so `Display(""a.b"")` throw a ""column not found"" exception. The problem is at https://github.com/root-project/root/blob/8c8cefe83a147bf8a88b694426840175615d5065/tree/dataframe/src/RDFInterfaceUtils.cxx#L383",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6371
https://github.com/root-project/root/pull/6372:13,availability,consist,consistency,13,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:146,deployability,Build,BuildEventVector,146,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:289,integrability,messag,message,289,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:345,integrability,messag,message,345,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:289,interoperability,messag,message,289,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:345,interoperability,messag,message,345,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:77,modifiability,Variab,Variable,77,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:330,performance,time,time,330,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/pull/6372:13,usability,consist,consistency,13,[TMVA] Check consistency of arrays when reading the data; When using in TMVA Variable Array (via DataLoader::AddVariableArray) in DataSetFactory::BuildEventVector . add a check that the data collection (in the TTree) have a size at least large as requested. If size is smaller add a Fatal message. If size is larger add the first time a warning message,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6372
https://github.com/root-project/root/issues/6373:1132,availability,mask,masks,1132,"317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1528,availability,mask,masks,1528,"ib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVAL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1651,availability,mask,mask,1651," ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1885,energy efficiency,current,current,1885,"bleexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2217,energy efficiency,current,current,2217,"pts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only on Mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:857,integrability,Pub,Public,857,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1831,reliability,pra,pragma,1831," defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2163,reliability,pra,pragma,2163,"pts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only on Mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:15,safety,except,exceptions,15,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:80,safety,except,exception,80,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:228,safety,except,exception,228,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1033,safety,except,excepts,1033,"lass.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fese",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1094,safety,except,excepts,1094,"0.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new fl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1421,safety,except,excepts,1421," float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1486,safety,except,excepts,1486,"olor.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1817,safety,except,excepts,1817,"__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1893,safety,except,exception,1893," on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. retur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2001,safety,except,exception,2001,"eenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2057,safety,except,excepts,2057,"env;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the offi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2149,safety,except,excepts,2149,"ld_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2225,safety,except,exception,2225,"pts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only on Mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2333,safety,except,exception,2333,"pts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only on Mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2390,safety,except,excepts,2390,"pts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only on Mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:3105,testability,context,context,3105,"pts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only on Mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:347,usability,User,Users,347,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:353,usability,user,user,353,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:452,usability,User,Users,452,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:458,usability,user,user,458,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:478,usability,User,Users,478,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:484,usability,user,user,484,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:611,usability,behavi,behavior,611,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:922,usability,person,personal,922,"Floating point exceptions in TColor class.; ## Describe the bug. Floating point exception on OSX 10.15 with XCode11 (and others). ```. 317.486847 427.758362 53.922855. 212.467392 0.529984 94.476196. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/xxx/root/lib/libCore.6.22.so] TColor::SetRGB(float, float, float) (no debug info). [/Users/user/./color] main /Users/user/color.cxx:89. [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). ```. ## Expected behavior. No FPEs. ## To Reproduce. Code:. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:1988,usability,clear,clear,1988,"c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6373:2320,usability,clear,clear,2320,"pts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {<!--. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TColor* c= new TColor();. TRandom* r= new TRandom();. float rgb[3];. //c->SetRGB(212.467392, 0.529984, 94.476196);. for (size_t i=0; i<1000000;i++). {. rgb[0]=512*(1.0-r->Rndm());. rgb[1]=512*(1.0-r->Rndm());. rgb[2]=512*(1.0-r->Rndm());. printf(""%f %f %f\n"",rgb[0],rgb[1],rgb[2]);. c->SetRGB(rgb[0],rgb[1],rgb[2]);. }. delete c;. delete r;. return 0;. }. ```. Compile. ```. clang++ color.cxx $(root-config --glibs --cflags --libs) -o color. ```. Run. ```. ./color. ```. ## Setup. 1. ROOT 6.22.02 from the official site that matches XCode. ## Additional context. This is similar to #6344 but seen only on Mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6373
https://github.com/root-project/root/issues/6374:413,deployability,stack,stack,413,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:783,deployability,Stack,StackTrace,783,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:1615,deployability,stack,stack,1615,"le(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad.cxx $(root-config --glibs --cflags --libs) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:2690,deployability,instal,installed,2690,"33f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. ```. run. ```. ./pad. ```. ## Setup. ROOT 6.22.02 and gcc as installed on lxplus machines. ## Additional context. A piece of #6344.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:1547,integrability,sub,submit,1547,"t_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:15,safety,except,exception,15,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:303,safety,except,exception,303,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:946,security,sign,signal,946,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:419,testability,trace,trace,419,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:1621,testability,trace,trace,1621," #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:2734,testability,context,context,2734,"33f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. ```. run. ```. ./pad. ```. ## Setup. ROOT 6.22.02 and gcc as installed on lxplus machines. ## Additional context. A piece of #6344.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:67,usability,user,user,67,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:149,usability,user,user,149,"Floating point exception in TPad; ## Describe the bug. Crash. ```. user@lxplus733 ~]$ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. [user@lxplus733 ~]$ ./pad . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to pcatlas18.mppmu.mpg.de:0.0. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:1378,usability,hint,hint,1378," was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:1422,usability,help,help,1422," of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f73109b046c in waitpid () from /lib64/libc.so.6. #1 0x00007f731092df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:1697,usability,help,help,1697,"92df62 in do_system () from /lib64/libc.so.6. #2 0x00007f731533f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. ```. run. ```. ./pad. ```. ## Setup. ROOT 6.22.02 and gcc as installed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:2172,usability,user,user,2172,"33f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. ```. run. ```. ./pad. ```. ## Setup. ROOT 6.22.02 and gcc as installed on lxplus machines. ## Additional context. A piece of #6344.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6374:2210,usability,behavi,behavior,2210,"33f5dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f731534206a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f7313841eee in TPad::ResizePad(char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f731384743a in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /usr/lib64/root/libGpad.so.6.22. #7 0x0000000000400c6d in main (argc=1, argv=0x7ffd71ee3b98) at pad.cxx:9. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad(""my"",""my"",0,1,0,1);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g. ```. run. ```. ./pad. ```. ## Setup. ROOT 6.22.02 and gcc as installed on lxplus machines. ## Additional context. A piece of #6344.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6374
https://github.com/root-project/root/issues/6375:426,deployability,stack,stack,426,"Segmentation violation in TPaveLabel class; ## Describe the bug. Crash. ```. [user@lxplus733 ~]$ g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. [user@lxplus733 ~]$ ./pavelabel . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to hostname:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f4b1f57246c in waitpid () from /lib64/libc.so.6. #1 0x00007f4b1f4eff62 in do_system () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that migh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:796,deployability,Stack,StackTrace,796,"Segmentation violation in TPaveLabel class; ## Describe the bug. Crash. ```. [user@lxplus733 ~]$ g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. [user@lxplus733 ~]$ ./pavelabel . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to hostname:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f4b1f57246c in waitpid () from /lib64/libc.so.6. #1 0x00007f4b1f4eff62 in do_system () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that migh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:1920,deployability,stack,stack,1920,"usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPaveLabel.h>. #in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:3398,deployability,instal,installed,3398,"ib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPaveLabel.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",2000,10);. C->cd();. TPad* p= new TPad();. p->cd();. TPaveLabel* l= new TPaveLabel(0,1,0,1,""I hope not crash"");. l->Paint();//Crash here. return 0;. }. ```. Compile. ```. g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. ```. Run . ```. ./pavelabel. ```. ## Setup. ROOT 6.22.02 as installed on lxplus. ## Additional context. This is a piece of #6344 (hopefully the last one).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:1852,integrability,sub,submit,1852,"00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Repro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:959,security,sign,signal,959,"Segmentation violation in TPaveLabel class; ## Describe the bug. Crash. ```. [user@lxplus733 ~]$ g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. [user@lxplus733 ~]$ ./pavelabel . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to hostname:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f4b1f57246c in waitpid () from /lib64/libc.so.6. #1 0x00007f4b1f4eff62 in do_system () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that migh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:432,testability,trace,trace,432,"Segmentation violation in TPaveLabel class; ## Describe the bug. Crash. ```. [user@lxplus733 ~]$ g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. [user@lxplus733 ~]$ ./pavelabel . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to hostname:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f4b1f57246c in waitpid () from /lib64/libc.so.6. #1 0x00007f4b1f4eff62 in do_system () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that migh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:1926,testability,trace,trace,1926,"b64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPaveLabel.h>. #include ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:3433,testability,context,context,3433,"ib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPaveLabel.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",2000,10);. C->cd();. TPad* p= new TPad();. p->cd();. TPaveLabel* l= new TPaveLabel(0,1,0,1,""I hope not crash"");. l->Paint();//Crash here. return 0;. }. ```. Compile. ```. g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. ```. Run . ```. ./pavelabel. ```. ## Setup. ROOT 6.22.02 as installed on lxplus. ## Additional context. This is a piece of #6344 (hopefully the last one).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:78,usability,user,user,78,"Segmentation violation in TPaveLabel class; ## Describe the bug. Crash. ```. [user@lxplus733 ~]$ g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. [user@lxplus733 ~]$ ./pavelabel . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to hostname:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f4b1f57246c in waitpid () from /lib64/libc.so.6. #1 0x00007f4b1f4eff62 in do_system () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that migh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:172,usability,user,user,172,"Segmentation violation in TPaveLabel class; ## Describe the bug. Crash. ```. [user@lxplus733 ~]$ g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. [user@lxplus733 ~]$ ./pavelabel . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to hostname:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f4b1f57246c in waitpid () from /lib64/libc.so.6. #1 0x00007f4b1f4eff62 in do_system () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that migh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:1683,usability,hint,hint,1683,"/libc.so.6. #1 0x00007f4b1f4eff62 in do_system () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:1727,usability,help,help,1727,"em () from /lib64/libc.so.6. #2 0x00007f4b23f015dc in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.22. #3 0x00007f4b23f0406a in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.22. #4 <signal handler called>. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ======================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:2002,usability,help,help,2002," in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPaveLabel.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:2769,usability,user,user,2769,"ib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPaveLabel.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",2000,10);. C->cd();. TPad* p= new TPad();. p->cd();. TPaveLabel* l= new TPaveLabel(0,1,0,1,""I hope not crash"");. l->Paint();//Crash here. return 0;. }. ```. Compile. ```. g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. ```. Run . ```. ./pavelabel. ```. ## Setup. ROOT 6.22.02 as installed on lxplus. ## Additional context. This is a piece of #6344 (hopefully the last one).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6375:2807,usability,behavi,behavior,2807,"ib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f4b22407674 in TPad::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGpad.so.6.22. #6 0x00007f4b229661a3 in TBox::PaintBox(double, double, double, double, char const*) () from /usr/lib64/root/libGraf.so.6.22. #7 0x00007f4b229a7570 in TPave::PaintPave(double, double, double, double, int, char const*) () from /usr/lib64/root/libGraf.so.6.22. #8 0x00007f4b229aa009 in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /usr/lib64/root/libGraf.so.6.22. #9 0x0000000000400d05 in main (argc=1, argv=0x7fff9bced0c8) at pavelabel.cxx:13. ===========================================================. [user@lxplus733 ~]$ . ```. ## Expected behavior. No segmentation violation. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPaveLabel.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",2000,10);. C->cd();. TPad* p= new TPad();. p->cd();. TPaveLabel* l= new TPaveLabel(0,1,0,1,""I hope not crash"");. l->Paint();//Crash here. return 0;. }. ```. Compile. ```. g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g. ```. Run . ```. ./pavelabel. ```. ## Setup. ROOT 6.22.02 as installed on lxplus. ## Additional context. This is a piece of #6344 (hopefully the last one).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6375
https://github.com/root-project/root/issues/6376:404,availability,fault,fault,404,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:621,deployability,contain,containing,621,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:1572,deployability,version,version,1572,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:1689,deployability,build,builds,1689,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:404,energy efficiency,fault,fault,404,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:181,integrability,abstract,abstract,181,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:942,integrability,pub,public,942,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:969,integrability,pub,public,969,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:1191,integrability,pub,public,1191,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:1572,integrability,version,version,1572,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:145,modifiability,inherit,inherits,145,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:181,modifiability,abstract,abstract,181,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:1572,modifiability,version,version,1572,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:404,performance,fault,fault,404,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:404,reliability,fault,fault,404,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:404,safety,fault,fault,404,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:1658,testability,context,context,1658,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6376:514,usability,behavi,behavior,514,"vtable corruption in Python specialization of C++ classes; ## Describe the bug. Using cppyy in ROOT master (51eb56e), I have a Python class that inherits from a C++ class (with two abstract classes) and I need to pass an instance of the Python class to a C++ function that accepts a pointer to one of the base classes. When the C++ function tries to call a method from the instance, I get a segmentation fault (actually I enter in an infinite segfault loop, where ROOT segfault handler segfaults too). ## Expected behavior. Just that called the C++ function can use the passed instance. ## To Reproduce. From a directory containing the file:. ```reproducer.py. import cppyy. cppyy.gbl.gInterpreter.Declare("""""". #include <array>. #include <iostream>. struct Interface1 {. virtual void do_1() = 0;. virtual ~Interface1() = default;. };. struct Interface2 {. virtual void do_2() = 0;. virtual ~Interface2() = default;. };. struct Base : virtual public Interface1, virtual public Interface2 {. Base() {. std::cout << std::hex << ""Base* "" << this << ""\nInt1* "" << static_cast<Interface1*>( this ) << ""\nInt2* "". << static_cast<Interface2*>( this ) << '\n';. }. };. struct Derived : Base, virtual public Interface2 {. void do_1() override { std::cout << std::hex << this << ""->do_1\n""; }. void do_2() override { std::cout << std::hex << this << ""->do_2\n""; }. };. void my_func( Interface2* i ) { i->do_2(); }. """"""). class PyDerived(cppyy.gbl.Derived):. pass. i = PyDerived(). i.do_1(). i.do_2(). cppyy.gbl.my_func(i). ```. call. ```. python reproducer.py. ```. ## Setup. - ROOT version: 51eb56e. - OS: CentOS7. - arch: x86_64. - compiler: gcc 9.2.0. ## Additional context. I'm using the nightly builds by CERN SFT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6376
https://github.com/root-project/root/issues/6378:99,integrability,Event,Event,99,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:123,integrability,Event,Event,123,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:169,reliability,fMea,fMeasures,169,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:225,reliability,fMea,fMea,225,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:390,reliability,fMea,fMeasures,390,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:875,reliability,fMea,fMeasures,875,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:889,reliability,fMea,fMeasures,889,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:975,reliability,fMea,fMea,975,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:982,reliability,fMea,fMeasures,982,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:1158,reliability,fMea,fMeasures,1158,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:1256,reliability,fMea,fMea,1256,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:118,safety,test,test,118,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:118,testability,test,test,118,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6378:309,usability,behavi,behavior,309,"TTreeFormula `Alt$` gives (silently) wrong result when used by itself.; ## Describe the bug. With `Event.root` (from `test\Event`) we get:. ```. root [12] T->Scan(""Alt$(fMeasures,-1)""). ************************. * Row * Alt$(fMea *. ************************. * 0 * 1 *. * 1 * 0 *. * 2 * 2 *. ```. ## Expected behavior. ```. ****************************************. * Row * Instance * Alt$(fMeasures) *. ****************************************. * 0 * 0 * 1 *. * 0 * 1 * 0 *. * 0 * 2 * 1 *. * 0 * 3 * 1 *. * 0 * 4 * 3 *. * 0 * 5 * 16 *. * 0 * 6 * 4 *. * 0 * 7 * 22 *. * 0 * 8 * 8 *. * 0 * 9 * 4 *. * 1 * 0 * 0 *. * 1 * 1 * 1 *. * 1 * 2 * 5 *. * 1 * 3 * -1 *. * 1 * 4 * 5 *. * 1 * 5 * 9 *. * 1 * 6 * 6 *. * 1 * 7 * 6 *. * 1 * 8 * 3 *. * 1 * 9 * 20 *. ```. Note that when used as intended (i.e. with another array, even itself, it works properly:. ```. root [13] T->Scan(""Alt$(fMeasures,-1):fMeasures""). ***********************************************. * Row * Instance * Alt$(fMea * fMeasures *. ***********************************************. * 0 * 0 * 1 * 1 *. * 0 * 1 * 0 * 0 *. * 0 * 2 * 1 * 1 *. * 0 * 3 * 1 * 1 *. ```. or. ```. root [11] T->Scan(""Alt$(fMeasures,-1):fMatrix""). ***********************************************. * Row * Instance * Alt$(fMea * fMatrix *. ***********************************************. * 0 * 0 * 1 * 1.5405316 *. * 0 * 1 * 0 * 0.0947428 *. * 0 * 2 * 1 * 1.5246920 *. * 0 * 3 * 1 * 0 *. * 0 * 4 * 3 * -0.136309 *. * 0 * 5 * 16 * 0.8007842 *. * 0 * 6 * 4 * 1.7062356 *. * 0 * 7 * 22 * 0 *. * 0 * 8 * 8 * -1.160293 *. * 0 * 9 * 4 * 2.012362 *. * 0 * 10 * -1 * 4.0220642 *. * 0 * 11 * -1 * 0 *. * 0 * 12 * -1 * 0 *. * 0 * 13 * -1 * 0 *. * 0 * 14 * -1 * 0 *. * 0 * 15 * -1 * 0 *. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6378
https://github.com/root-project/root/issues/6379:333,deployability,stack,stack,333,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:779,deployability,Stack,StackTrace,779,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:1225,deployability,Build,Build,1225,"tion. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:2147,deployability,stack,stack,2147,"t-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. ```. ## Expe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:2475,deployability,Build,Build,2475,"4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",-4,-28);. return 0;. }. ```. Compile. ```. g++ canvas.cxx $(root-config --glibs --cflags --libs) -o c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:3626,deployability,continu,continuation,3626,"tle=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",-4,-28);. return 0;. }. ```. Compile. ```. g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. ```. run. ```. ./canvas. ```. ## Setup. CentOS7 x86_64 with root-6.22.02 from EPEL. (Same as on lxplus). ## Additional context. This is a continuation of #6344.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:691,energy efficiency,optim,optimized,691,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:838,energy efficiency,core,core,838,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:1003,energy efficiency,core,core,1003,"ing point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:2079,integrability,sub,submit,2079,"Pad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. =====",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:691,performance,optimiz,optimized,691,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:15,safety,except,exception,15,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:223,safety,except,exception,223,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:1043,security,sign,signal,1043,"be the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:339,testability,trace,trace,339,"Floating point exception in TCanvas; ## Describe the bug. Crash. ```. [host@hermes Desktop]$ g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. [host@hermes Desktop]$ ./canvas. *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f481d5d946c in __libc_waitpid (pid=1478152, stat_loc=stat_loc. entry=0x7ffe12925160, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f481d556f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f4821f685dc in TUnixSystem::StackTrace (this=0x244d980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f4821f6b06a in TUnixSystem::DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:2153,testability,trace,trace,2153,".02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. ```. ## Expected b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:3607,testability,context,context,3607,"tle=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",-4,-28);. return 0;. }. ```. Compile. ```. g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. ```. run. ```. ./canvas. ```. ## Setup. CentOS7 x86_64 with root-6.22.02 from EPEL. (Same as on lxplus). ## Additional context. This is a continuation of #6344.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:1910,usability,hint,hint,1910,"DispatchSignals (this=0x244d980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:1954,usability,help,help,1954,"atingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:2229,usability,help,help,2229,"(this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/issues/6379:3155,usability,behavi,behavior,3155,"tle=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 TPad::ResizePad (this=0x2503ca0, option=0x7f4820490bae """") at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:5490. #6 0x00007f4820448f84 in TCanvas::Build (this=0x2503ca0) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:637. #7 0x00007f482044969e in TCanvas::Constructor (this=this. entry=0x2503ca0, name=name. entry=0x400cc3 ""canvas"", title=title. entry=0x400cc3 ""canvas"", ww=4, ww. entry=-4, wh=wh. entry=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:425. #8 0x00007f482044c88c in TCanvas::TCanvas (this=0x2503ca0, name=0x400cc3 ""canvas"", title=0x400cc3 ""canvas"", ww=-4, wh=-28) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TCanvas.cxx:366. #9 0x0000000000400ba3 in main (argc=1, argv=0x7ffe12927dc8) at canvas.cxx:5. ===========================================================. ```. ## Expected behavior. No FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <fenv.h>. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",-4,-28);. return 0;. }. ```. Compile. ```. g++ canvas.cxx $(root-config --glibs --cflags --libs) -o canvas -g. ```. run. ```. ./canvas. ```. ## Setup. CentOS7 x86_64 with root-6.22.02 from EPEL. (Same as on lxplus). ## Additional context. This is a continuation of #6344.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6379
https://github.com/root-project/root/pull/6380:168,deployability,contain,containers,168,[DF] Introduce ROOT::RDF::RunGraphs; * The ROOT::RDF::RResultHandle is a type erased handle for a RResultPtr. The object can be used to store results of RDF actions in containers such as a std::vector<RResultHandle>. * Added the ROOT::RDF::RunGraphs method,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6380
https://github.com/root-project/root/issues/6381:405,deployability,log,log,405,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:471,deployability,log,log,471,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:488,deployability,log,log,488,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:121,energy efficiency,optim,optimise,121,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:279,energy efficiency,Draw,Draw,279,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:405,safety,log,log,405,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:471,safety,log,log,471,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:488,safety,log,log,488,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:405,security,log,log,405,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:471,security,log,log,471,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:488,security,log,log,488,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:405,testability,log,log,405,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:471,testability,log,log,471,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:488,testability,log,log,488,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/issues/6381:162,usability,behavi,behavior,162,"TH3 missing labels; ## Describe the bug. the attached TH3 has two missing labels. Note that changing the diction to ""not optimise"" makes them appear. ## Expected behavior. The two missing labels should be displayed. ## To Reproduce. ```. {. f = new TFile(""th3_label.root”);. h3->Draw();. cout << h3->GetXaxis()->GetNbins() << endl;. h3->GetXaxis()->GetLabels()->ls();. }. ```. The root file is [th3_label.log](https://github.com/root-project/root/files/5244737/th3_label.log) (renamed `. log` to be able to attach it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6381
https://github.com/root-project/root/pull/6382:1,energy efficiency,Core,Core,1,[Core][TReentrantRWLock] Add missing variable definition; I really wonder why this is only picked up by windows? Edit: It's the macro :grimacing:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6382
https://github.com/root-project/root/pull/6382:37,modifiability,variab,variable,37,[Core][TReentrantRWLock] Add missing variable definition; I really wonder why this is only picked up by windows? Edit: It's the macro :grimacing:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6382
https://github.com/root-project/root/pull/6383:13,availability,recov,recovery,13,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:145,availability,error,errors,145,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:995,availability,recov,recover,995,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1019,availability,state,state,1019,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1611,availability,recov,recover,1611,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:13,deployability,recov,recovery,13,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:204,deployability,integr,integrals,204,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:995,deployability,recov,recover,995,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1611,deployability,recov,recover,1611,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:204,integrability,integr,integrals,204,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1019,integrability,state,state,1019,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1587,integrability,sub,subtracted,1587,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:204,interoperability,integr,integrals,204,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:69,modifiability,paramet,parameters,69,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:204,modifiability,integr,integrals,204,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:475,modifiability,paramet,parameter,475,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:552,modifiability,pac,pack,552,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:595,modifiability,paramet,parameter,595,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:763,modifiability,pac,packed,763,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:145,performance,error,errors,145,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:13,reliability,recov,recovery,13,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:204,reliability,integr,integrals,204,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:995,reliability,recov,recover,995,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1611,reliability,recov,recover,1611,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:13,safety,recov,recovery,13,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:145,safety,error,errors,145,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:995,safety,recov,recover,995,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1401,safety,valid,valid,1401,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1611,safety,recov,recover,1611,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:13,security,recov,recovery,13,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:204,security,integr,integrals,204,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:995,security,recov,recover,995,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1611,security,recov,recover,1611,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:204,testability,integr,integrals,204,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:145,usability,error,errors,145,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:914,usability,minim,minimiser,914,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/pull/6383:1230,usability,minim,minimisation,1230,"[RF] Improve recovery from invalid function values in RooFit; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. If the minimisation starts out in an undefined region, and the maximum. function value is unknown, 0. + badness * strength is passed on. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. This way, Minuit is. encouraged to step into the well-defined regions. When fit results are. saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6383
https://github.com/root-project/root/issues/6384:4,interoperability,standard,standard,4,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:134,interoperability,specif,specification,134,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:155,interoperability,standard,standard,155,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:181,interoperability,specif,specified,181,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:286,interoperability,specif,specified,286,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:300,interoperability,standard,standard,300,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:222,modifiability,variab,variable,222,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:345,modifiability,maintain,maintainer,345,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:345,safety,maintain,maintainer,345,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/issues/6384:478,usability,behavi,behavior,478,"cxx-standard should not be in CMAKE_CXX_FLAGS; ## Describe the bug. `CMAKE_CXX_FLAGS`, set by hand in `ROOTUseFile.cmake`, includes a specification on cxx standard, which should be specified rather by `CMAKE_CXX_STANDARD` variable. In a projects using ROOT, the inclusion causes doubly-specified cxx-standard in their compile procedure, and the maintainer transferred me here; see the thread here:. https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Expected behavior. `--std=` options should be set in `CMAKE_CXX_STANDARD`, rather than `CMAKE_CXX_FLAGS`. ## To Reproduce. see https://github.com/iLCSoft/LCIO/issues/109#issuecomment-694867125. ## Setup. ROOT Docker images: docker pull rootproject/root:6.22.02-ubuntu20.04, ran on docker on WSL2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6384
https://github.com/root-project/root/pull/6385:0,deployability,Upgrad,Upgrade,0,Upgrade llvm90;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385
https://github.com/root-project/root/pull/6385:0,modifiability,Upgrad,Upgrade,0,Upgrade llvm90;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6385
https://github.com/root-project/root/pull/6386:98,reliability,doe,doesn,98,"[DF] In Display, match regex against all branches, not just top level; This fixes #6371, ""Display doesn't work with non-top-level TTree branches"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6386
https://github.com/root-project/root/pull/6387:19,deployability,updat,updates,19,[RF] Documentation updates.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6387
https://github.com/root-project/root/pull/6387:19,safety,updat,updates,19,[RF] Documentation updates.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6387
https://github.com/root-project/root/pull/6387:19,security,updat,updates,19,[RF] Documentation updates.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6387
https://github.com/root-project/root/pull/6387:5,usability,Document,Documentation,5,[RF] Documentation updates.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6387
https://github.com/root-project/root/pull/6388:221,deployability,releas,release,221,"[cmake] CMAKE_CXX_STANDARD: default to compiler default, not C++11; If the compiler default is lower than C++11, stick with C++11. This should fix ROOT-10692. Note that this PR changes the C++ standard we compile certain release binaries with, e.g. Ubuntu 20.04 will (or at least, should) switch from C++11 to C++14 as a consequence of these changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6388
https://github.com/root-project/root/pull/6388:193,interoperability,standard,standard,193,"[cmake] CMAKE_CXX_STANDARD: default to compiler default, not C++11; If the compiler default is lower than C++11, stick with C++11. This should fix ROOT-10692. Note that this PR changes the C++ standard we compile certain release binaries with, e.g. Ubuntu 20.04 will (or at least, should) switch from C++11 to C++14 as a consequence of these changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6388
https://github.com/root-project/root/pull/6391:109,energy efficiency,optim,optimized,109,TH3 alphanumeric labels fix; When alpha numeric labels are present the number of avis division should not be optimized. This fixes this issue: https://github.com/root-project/root/issues/6381,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6391
https://github.com/root-project/root/pull/6391:109,performance,optimiz,optimized,109,TH3 alphanumeric labels fix; When alpha numeric labels are present the number of avis division should not be optimized. This fixes this issue: https://github.com/root-project/root/issues/6381,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6391
https://github.com/root-project/root/issues/6393:165,deployability,fail,fails,165,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:569,integrability,interfac,interface,569,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:209,interoperability,standard,standard,209,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:289,interoperability,bind,bindings,289,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:569,interoperability,interfac,interface,569,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:289,modifiability,bind,bindings,289,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:569,modifiability,interfac,interface,569,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:165,reliability,fail,fails,165,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:499,testability,context,context,499,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/issues/6393:378,usability,behavi,behavior,378,"PyROOT cannot call templated ctors on Windows; ## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6393
https://github.com/root-project/root/pull/6395:43,security,triag,triaging,43,"[GH] Add action to register new issues for triaging; [skip-ci]. When new issues are created, this action adds them to the the board. https://github.com/root-project/root/projects/2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6395
https://github.com/root-project/root/pull/6396:0,safety,Avoid,Avoid,0,Avoid pad creation with W<=0 or H<=0; Fix https://github.com/root-project/root/issues/6374,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6396
https://github.com/root-project/root/issues/6397:521,availability,Operat,Operating,521,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:596,availability,down,download,596,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:443,deployability,build,build,443,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:509,deployability,version,version,509,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:578,deployability,instal,install,578,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:509,integrability,version,version,509,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:509,modifiability,version,version,509,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:1,safety,Test,Test,1,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:397,safety,input,input,397,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:1,testability,Test,Test,1,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:649,testability,context,context,649,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:678,testability,context,context,678,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:43,usability,clear,clear,43,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:91,usability,behavi,behavior,91,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:121,usability,behavi,behavior,121,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:139,usability,clear,clear,139,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:252,usability,behavi,behavior,252,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/issues/6397:397,usability,input,input,397,"[Test Issue]; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6397
https://github.com/root-project/root/pull/6400:21,deployability,build,build,21,Double-check that we build PRs without NDEBUG defined;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6400
https://github.com/root-project/root/pull/6401:13,availability,recov,recovery,13,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:135,availability,error,errors,135,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:985,availability,recov,recover,985,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1009,availability,state,state,1009," recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1830,availability,recov,recover,1830,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:13,deployability,recov,recovery,13,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:194,deployability,integr,integrals,194,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:985,deployability,recov,recover,985,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1830,deployability,recov,recover,1830,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:194,integrability,integr,integrals,194,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1009,integrability,state,state,1009," recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1807,integrability,sub,subtracted,1807,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:194,interoperability,integr,integrals,194,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:59,modifiability,paramet,parameters,59,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:194,modifiability,integr,integrals,194,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:465,modifiability,paramet,parameter,465,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:542,modifiability,pac,pack,542,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:585,modifiability,paramet,parameter,585,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:753,modifiability,pac,packed,753,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1316,modifiability,pac,packed,1316,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:135,performance,error,errors,135,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:13,reliability,recov,recovery,13,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:194,reliability,integr,integrals,194,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:985,reliability,recov,recover,985,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1830,reliability,recov,recover,1830,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:13,safety,recov,recovery,13,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:135,safety,error,errors,135,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:985,safety,recov,recover,985,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1555,safety,valid,valid,1555,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1830,safety,recov,recover,1830,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:13,security,recov,recovery,13,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:194,security,integr,integrals,194,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:985,security,recov,recover,985,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1830,security,recov,recover,1830,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:194,testability,integr,integrals,194,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:135,usability,error,errors,135,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:904,usability,minim,minimiser,904,"[RF] Improve recovery from invalid function values; If the parameters of a function are outside of the definition range,. all kinds of errors might occur. PDFs might be negative, have negative. integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1261,usability,minim,minimisation,1261,"reviously, RooFit was just returning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1381,usability,minim,minimisation,1381,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:1981,usability,minim,minimiser,1981,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6401:2105,usability,help,helps,2105,"urning a high function value to Minuit. This value was always the same, though. Like this, Minuit cannot compute a gradient to get out of this region,. because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a. parameter point into the mantissa of a NaN, e.g. how much negative the. values of a PDF came out or how far the sum of PDF coefficients is from. 1. This information is packed into NaN using ""RooNaNPacker"", and passed. through the computation graph. It is finally unpacked in RooMinimizerFcn. before being handed to the minimiser. This allows for the calculation of. gradients, enabling the fitter to recover from an invalid state more. easily. When NaNs are being unpacked, they are presented to Minuit as maximum. function value + badness * penaltyStrength, so a gradient can be. computed that points away from the bad region. The maximum function. value comes from previous minimisation steps, the badness is the payload. of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum. function value is not (yet) known, 0. + badness * strength is used. Once a well-defined region is found, the valid function values are. offset such that they are all lower than 0. In this way, Minuit is. encouraged to step into the well-defined regions, and sees a rapidly. rising function when stepping out. When fit results are saved, though,. this offset is subtracted in order to recover ""correct"" NLL values. Concretely:. - Add RooNaNPacker. - Add a function to set the magnitude of the penalty term that's. supposed to drive the minimiser away from undefined regions. - Add a function to RooMinimizerFcn that returns a possible artificial. offset. This helps to hide any offsetting from the outside world. - When saving a fit result, remove any offset, and copy the number of. invalid function values into the fit result (was broken previously).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6401
https://github.com/root-project/root/pull/6402:18,testability,assert,assert,18,[skip-ci] Correct assert condition (missing negation).; This fixes commit 9f8ec249ea,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6402
https://github.com/root-project/root/issues/6403:138,deployability,contain,containing,138,"[Hist] Bugs in Tprofile,TProfile2D::LabelsOption; Ordering of labels in TProfile is not correct when: . - Profile have weights. The array containing the weight square, `fBinSumw2` is not updated in TProfileHelper::LabelsOption. - Labels have different order than bin numbers. This was same bug present in `TH1::LabelsOption` and fixed by #6217.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6403
https://github.com/root-project/root/issues/6403:187,deployability,updat,updated,187,"[Hist] Bugs in Tprofile,TProfile2D::LabelsOption; Ordering of labels in TProfile is not correct when: . - Profile have weights. The array containing the weight square, `fBinSumw2` is not updated in TProfileHelper::LabelsOption. - Labels have different order than bin numbers. This was same bug present in `TH1::LabelsOption` and fixed by #6217.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6403
https://github.com/root-project/root/issues/6403:106,energy efficiency,Profil,Profile,106,"[Hist] Bugs in Tprofile,TProfile2D::LabelsOption; Ordering of labels in TProfile is not correct when: . - Profile have weights. The array containing the weight square, `fBinSumw2` is not updated in TProfileHelper::LabelsOption. - Labels have different order than bin numbers. This was same bug present in `TH1::LabelsOption` and fixed by #6217.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6403
https://github.com/root-project/root/issues/6403:106,performance,Profil,Profile,106,"[Hist] Bugs in Tprofile,TProfile2D::LabelsOption; Ordering of labels in TProfile is not correct when: . - Profile have weights. The array containing the weight square, `fBinSumw2` is not updated in TProfileHelper::LabelsOption. - Labels have different order than bin numbers. This was same bug present in `TH1::LabelsOption` and fixed by #6217.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6403
https://github.com/root-project/root/issues/6403:187,safety,updat,updated,187,"[Hist] Bugs in Tprofile,TProfile2D::LabelsOption; Ordering of labels in TProfile is not correct when: . - Profile have weights. The array containing the weight square, `fBinSumw2` is not updated in TProfileHelper::LabelsOption. - Labels have different order than bin numbers. This was same bug present in `TH1::LabelsOption` and fixed by #6217.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6403
https://github.com/root-project/root/issues/6403:187,security,updat,updated,187,"[Hist] Bugs in Tprofile,TProfile2D::LabelsOption; Ordering of labels in TProfile is not correct when: . - Profile have weights. The array containing the weight square, `fBinSumw2` is not updated in TProfileHelper::LabelsOption. - Labels have different order than bin numbers. This was same bug present in `TH1::LabelsOption` and fixed by #6217.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6403
https://github.com/root-project/root/pull/6404:0,deployability,Build,Build,0,"Build system updates; This is an old branch with changes I though had been merged before, but weren't.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6404
https://github.com/root-project/root/pull/6404:13,deployability,updat,updates,13,"Build system updates; This is an old branch with changes I though had been merged before, but weren't.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6404
https://github.com/root-project/root/pull/6404:13,safety,updat,updates,13,"Build system updates; This is an old branch with changes I though had been merged before, but weren't.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6404
https://github.com/root-project/root/pull/6404:13,security,updat,updates,13,"Build system updates; This is an old branch with changes I though had been merged before, but weren't.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6404
https://github.com/root-project/root/pull/6405:0,deployability,Updat,Update,0,Update build system threads related variables; Another old branch I had from a while ago.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6405
https://github.com/root-project/root/pull/6405:7,deployability,build,build,7,Update build system threads related variables; Another old branch I had from a while ago.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6405
https://github.com/root-project/root/pull/6405:36,modifiability,variab,variables,36,Update build system threads related variables; Another old branch I had from a while ago.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6405
https://github.com/root-project/root/pull/6405:0,safety,Updat,Update,0,Update build system threads related variables; Another old branch I had from a while ago.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6405
https://github.com/root-project/root/pull/6405:0,security,Updat,Update,0,Update build system threads related variables; Another old branch I had from a while ago.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6405
https://github.com/root-project/root/issues/6406:397,deployability,log,logic,397,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:55,interoperability,standard,standard,55,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:310,interoperability,standard,standard,310,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:480,interoperability,standard,standard,480,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:1042,interoperability,standard,standard,1042,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:1391,modifiability,variab,variable,1391,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:1009,reliability,doe,doesn,1009,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:397,safety,log,logic,397,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:514,safety,detect,detected,514,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:1017,safety,detect,detect,1017,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:397,security,log,logic,397,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:514,security,detect,detected,514,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:1017,security,detect,detect,1017,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:397,testability,log,logic,397,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:773,testability,context,context,773,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:802,testability,context,context,802,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:128,usability,clear,clear,128,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:176,usability,behavi,behavior,176,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:558,usability,behavi,behavior,558,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6406:576,usability,clear,clear,576,"root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context. <!--. Add any other context about the problem here. -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6406
https://github.com/root-project/root/issues/6408:1519,availability,Operat,Operating,1519,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1594,availability,down,download,1594,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1284,deployability,build,build,1284,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1372,deployability,Build,Build,1372,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1507,deployability,version,version,1507,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1576,deployability,instal,install,1576,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1659,deployability,instal,installs,1659,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1507,integrability,version,version,1507,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1507,modifiability,version,version,1507,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1689,reliability,Doe,Doesn,1689,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:545,safety,test,test,545,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1238,safety,input,input,1238,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:545,testability,test,test,545,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:71,usability,clear,clear,71,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:119,usability,behavi,behavior,119,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:916,usability,behavi,behavior,916,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:934,usability,clear,clear,934,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1093,usability,behavi,behavior,1093,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6408:1238,usability,input,input,1238,"[RF] Creating RooDataSet causes SegFault; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The following code works fine with 6.20.04, but segfaults with 6.22.02. ```cpp. #include ""RooDataSet.h"". #include ""RooRealVar.h"". #include ""TFile.h"". #include ""TTree.h"". int main(int argc, char* argv[]) {. TTree* tree = new TTree(""tree"", ""tree"");. double var = 1;. tree->Branch(""var"", &var, ""var/D"");. tree->Fill();. RooRealVar* roovar = new RooRealVar(""var"", ""var"", 0, 10);. TFile* output_file = new TFile(""test.root"", ""RECREATE"", ""output_file"");. output_file->Print();. RooDataSet* data_set = new RooDataSet(""data_set"", ""data_set"", tree, RooArgSet(*roovar));. output_file->Print();. return 0;. }. ```. The segfault happens on the last `output_file->Print();` line - it seems the creation of the `RooDataSet` somehow destroys the object pointed to by `output_file`. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I expect the code to run without segfaulting. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. 1. Save the quoted code to `mwe_tfile.cc`. 2. Build with `g++ mwe_tfile.cc -o mwe_tfile $(root-config --cflags --glibs) -lRooFitCore`. 3. Run `./mwe_tfile`. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Ubuntu 18.04. Binary ROOT installs. Works with 6.20.04. Doesn't work with 6.22.02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6408
https://github.com/root-project/root/issues/6410:55,availability,avail,available,55,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:271,availability,failur,failures,271,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:310,availability,error,error,310,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:515,availability,error,error,515,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:271,deployability,fail,failures,271,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:438,deployability,build,build,438,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:521,integrability,messag,message,521,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:521,interoperability,messag,message,521,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:271,performance,failur,failures,271,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:310,performance,error,error,310,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:515,performance,error,error,515,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:55,reliability,availab,available,55,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:162,reliability,doe,doesnt-work,162,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:271,reliability,fail,failures,271,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:55,safety,avail,available,55,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:310,safety,error,error,310,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:515,safety,error,error,515,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:55,security,availab,available,55,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:16,usability,support,support,16,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:310,usability,error,error,310,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:398,usability,behavi,behavior,398,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:507,usability,clear,clearer,507,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:515,usability,error,error,515,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6410:570,usability,behavi,behavior,570,"Without memstat support, `root -memstat` should not be available; ## Describe the bug. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):. WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like. ```. input_line_11:2:6: error: unknown type name 'TMemStat'. new TMemStat("""",100000,5000000);. ```. ## Expected behavior. If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce. Steps to reproduce the behavior:. 1. Compile with `cmake -Dmemstat=off`. 2. Run `root -l`. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6410
https://github.com/root-project/root/issues/6411:330,deployability,contain,contains,330,"Code generated by TFile::MakeProject should not rely on std namespace import; ## Explain what you would like to see improved. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/tfile-makeproject-problem-with-stl-objects-due-to-removal-of-using-namespace-std/41501): the code generated by `TFile::MakeProject` currently contains the following lines at the beginning. ```. namespace std {} using namespace std;. ```. which is necessary because the header files to not qualify `std` names (e.g., `vector` instead of `std::vector`). @Wile.E.Coyote provided the following comment in the forum:. > Actually, it seems to me that the origin of the problem is that the “std::” was removed at the TTree creation time (i.e. if you try “tree->Print();”, you will see that it is not there). It seems to me that this is a long-standing problem which should be fixed (i.e. “std::” should be preserved). ## Optional: share how it could be improved. It would be nicer if header files did qualify names from the `std` namespace so that they can be easier included in other projects. ## To Reproduce. Use `TFile::MakeProject` on a ROOT file with a non-trivial tree. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6411
https://github.com/root-project/root/issues/6411:320,energy efficiency,current,currently,320,"Code generated by TFile::MakeProject should not rely on std namespace import; ## Explain what you would like to see improved. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/tfile-makeproject-problem-with-stl-objects-due-to-removal-of-using-namespace-std/41501): the code generated by `TFile::MakeProject` currently contains the following lines at the beginning. ```. namespace std {} using namespace std;. ```. which is necessary because the header files to not qualify `std` names (e.g., `vector` instead of `std::vector`). @Wile.E.Coyote provided the following comment in the forum:. > Actually, it seems to me that the origin of the problem is that the “std::” was removed at the TTree creation time (i.e. if you try “tree->Print();”, you will see that it is not there). It seems to me that this is a long-standing problem which should be fixed (i.e. “std::” should be preserved). ## Optional: share how it could be improved. It would be nicer if header files did qualify names from the `std` namespace so that they can be easier included in other projects. ## To Reproduce. Use `TFile::MakeProject` on a ROOT file with a non-trivial tree. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6411
https://github.com/root-project/root/issues/6411:912,interoperability,share,share,912,"Code generated by TFile::MakeProject should not rely on std namespace import; ## Explain what you would like to see improved. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/tfile-makeproject-problem-with-stl-objects-due-to-removal-of-using-namespace-std/41501): the code generated by `TFile::MakeProject` currently contains the following lines at the beginning. ```. namespace std {} using namespace std;. ```. which is necessary because the header files to not qualify `std` names (e.g., `vector` instead of `std::vector`). @Wile.E.Coyote provided the following comment in the forum:. > Actually, it seems to me that the origin of the problem is that the “std::” was removed at the TTree creation time (i.e. if you try “tree->Print();”, you will see that it is not there). It seems to me that this is a long-standing problem which should be fixed (i.e. “std::” should be preserved). ## Optional: share how it could be improved. It would be nicer if header files did qualify names from the `std` namespace so that they can be easier included in other projects. ## To Reproduce. Use `TFile::MakeProject` on a ROOT file with a non-trivial tree. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6411
https://github.com/root-project/root/issues/6411:713,performance,time,time,713,"Code generated by TFile::MakeProject should not rely on std namespace import; ## Explain what you would like to see improved. As discussed in the [ROOT forum](https://root-forum.cern.ch/t/tfile-makeproject-problem-with-stl-objects-due-to-removal-of-using-namespace-std/41501): the code generated by `TFile::MakeProject` currently contains the following lines at the beginning. ```. namespace std {} using namespace std;. ```. which is necessary because the header files to not qualify `std` names (e.g., `vector` instead of `std::vector`). @Wile.E.Coyote provided the following comment in the forum:. > Actually, it seems to me that the origin of the problem is that the “std::” was removed at the TTree creation time (i.e. if you try “tree->Print();”, you will see that it is not there). It seems to me that this is a long-standing problem which should be fixed (i.e. “std::” should be preserved). ## Optional: share how it could be improved. It would be nicer if header files did qualify names from the `std` namespace so that they can be easier included in other projects. ## To Reproduce. Use `TFile::MakeProject` on a ROOT file with a non-trivial tree. ## Setup. 1. Master. 2. Arch Linux. 3. Built from sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6411
https://github.com/root-project/root/issues/6412:1871,deployability,Version,Version,1871,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:517,energy efficiency,Load,Load,517,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:332,integrability,Event,Event,332,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:403,integrability,Event,Event,403,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:483,integrability,Event,Event,483,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:679,integrability,Event,Event,679,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1871,integrability,Version,Version,1871,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1871,modifiability,Version,Version,1871,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:517,performance,Load,Load,517,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1303,performance,disk,disk,1303,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1447,performance,disk,disk,1447,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:950,safety,test,testdata,950,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:986,safety,test,testdata,986,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1597,safety,compl,completely,1597,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1597,security,compl,completely,1597,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:950,testability,test,testdata,950,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:986,testability,test,testdata,986,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:189,usability,support,support,189,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:306,usability,behavi,behaviour,306,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:809,usability,Close,Close,809,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1659,usability,tip,tips,1659,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1668,usability,efficien,efficient,1668,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/issues/6412:1731,usability,tip,tips-for-efficient-and-successful-posting,1731,"io: streamer for std::bitset appears to be relying on endian-ness; this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```. $> cat ./Event.h. #ifndef MYEVT_H. #define MYEVT_H 1. #include <bitset>. struct Event {. 	std::bitset<16> Bs;. };. #endif // MYEVT_H. $> cat ./run.C. #include ""Event.h"". void run() {. 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");. 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;. 	int splitlvl = 99;. 	Event e;. 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();. 	f->Write();. 	f->Close();. 	exit(0);. }. $> root -b -q ./run.C. ```. reading back the file with `groot`, I see the following bit patterns:. ```. $> root-dump testdata/std-bitset.root . >>> file[testdata/std-bitset.root]. key[000]: tree;1 ""tree"" (TTree). [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}. ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine). (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded? I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,. -s. ___. _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02. Built for linuxx8664gcc on Aug 17 2020, 12:46:52. From tags/v6-22-02@v6-22-02. ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6412
https://github.com/root-project/root/pull/6415:105,availability,failur,failure,105,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:105,deployability,fail,failure,105,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:177,deployability,fail,fails,177,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:105,performance,failur,failure,105,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:105,reliability,fail,failure,105,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:177,reliability,fail,fails,177,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:128,safety,detect,detected,128,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:128,security,detect,detected,128,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/pull/6415:234,usability,minim,minimization,234,"handle NaN EDM better; When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6415
https://github.com/root-project/root/issues/6416:10,deployability,fail,fails,10,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:145,deployability,API,API,145,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:193,deployability,updat,updated,193,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:145,integrability,API,API,145,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:916,integrability,buffer,buffer,916,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:145,interoperability,API,API,145,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:10,reliability,fail,fails,10,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:193,safety,updat,updated,193,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:395,safety,test,testdata,395,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:193,security,updat,updated,193,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:395,testability,test,testdata,395,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:617,testability,assert,assert,617,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:1596,testability,context,context,1596,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:1332,usability,User,Users,1332,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6416:1449,usability,behavi,behavior,1449,"TBulkRead fails with ""fExtraBasket should have been set to nullptr by GetFreshBasket""; ## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++. #include <TBufferFile.h>. #include <TFile.h>. #include <TTree.h>. #include <iostream>. void foo() {. auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");. auto t = (TTree*)f->Get(""O2track"");. auto e = t->GetEntries();. auto b = t->GetBranch(""fAlpha"");. assert(b);. int pos = 0;. while (pos < e) {. TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);. auto &r = b->GetBulkRead();. auto s = r.GetBulkEntries(pos, buf);. pos += s;. std::cout << ""Read "" << s << "" elements "" << std::endl;. b->Print();. }. }. ```. however when I get to read the last but one buffer, I get:. ```c++. Read 1000 elements. *Br 3398 :fAlpha : fAlpha/F *. *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *. *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *. *............................................................................*. Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'. aborting. ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6416
https://github.com/root-project/root/issues/6417:275,deployability,API,API,275,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:275,integrability,API,API,275,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:275,interoperability,API,API,275,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:10,reliability,doe,does,10,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:67,reliability,doe,does,67,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:228,reliability,doe,does,228,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:302,reliability,doe,does,302,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:156,safety,test,test,156,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:156,testability,test,test,156,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/issues/6417:255,usability,behavi,behavior,255,"TBulkRead does not work when TFile is missing; ## Standalone TTree does not allow for TBulkRead. I created a standalone TTree, without a backing TFile, for test purposes. While using TTreeReader works just fine, using TBulkRead does not work. ## Expected behavior. Given the API to request a TBulkRead does not involve a TFile, I would have expected it to work without. ## Setup. 6.20.0. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6417
https://github.com/root-project/root/pull/6418:118,availability,consist,consistently,118,"Fix #6393; Fix #6393 (at least incrementally) by avoiding the demangling step, and instead exposing the template-ness consistently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6418
https://github.com/root-project/root/pull/6418:49,safety,avoid,avoiding,49,"Fix #6393; Fix #6393 (at least incrementally) by avoiding the demangling step, and instead exposing the template-ness consistently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6418
https://github.com/root-project/root/pull/6418:91,security,expos,exposing,91,"Fix #6393; Fix #6393 (at least incrementally) by avoiding the demangling step, and instead exposing the template-ness consistently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6418
https://github.com/root-project/root/pull/6418:118,usability,consist,consistently,118,"Fix #6393; Fix #6393 (at least incrementally) by avoiding the demangling step, and instead exposing the template-ness consistently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6418
https://github.com/root-project/root/pull/6419:64,deployability,updat,update,64,[jsroot] dev 23/09/2020 with several fixes [skip-ci]; Fix stats update in historgam when running in THttpServer. Many small fixes with usage of undefined variables -. discovered when developing jsroot v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6419
https://github.com/root-project/root/pull/6419:167,integrability,discover,discovered,167,[jsroot] dev 23/09/2020 with several fixes [skip-ci]; Fix stats update in historgam when running in THttpServer. Many small fixes with usage of undefined variables -. discovered when developing jsroot v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6419
https://github.com/root-project/root/pull/6419:167,interoperability,discover,discovered,167,[jsroot] dev 23/09/2020 with several fixes [skip-ci]; Fix stats update in historgam when running in THttpServer. Many small fixes with usage of undefined variables -. discovered when developing jsroot v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6419
https://github.com/root-project/root/pull/6419:154,modifiability,variab,variables,154,[jsroot] dev 23/09/2020 with several fixes [skip-ci]; Fix stats update in historgam when running in THttpServer. Many small fixes with usage of undefined variables -. discovered when developing jsroot v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6419
https://github.com/root-project/root/pull/6419:64,safety,updat,update,64,[jsroot] dev 23/09/2020 with several fixes [skip-ci]; Fix stats update in historgam when running in THttpServer. Many small fixes with usage of undefined variables -. discovered when developing jsroot v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6419
https://github.com/root-project/root/pull/6419:64,security,updat,update,64,[jsroot] dev 23/09/2020 with several fixes [skip-ci]; Fix stats update in historgam when running in THttpServer. Many small fixes with usage of undefined variables -. discovered when developing jsroot v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6419
https://github.com/root-project/root/pull/6419:167,usability,discov,discovered,167,[jsroot] dev 23/09/2020 with several fixes [skip-ci]; Fix stats update in historgam when running in THttpServer. Many small fixes with usage of undefined variables -. discovered when developing jsroot v6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6419
https://github.com/root-project/root/pull/6420:36,deployability,patch,patches,36,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/pull/6420:78,deployability,updat,update,78,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/pull/6420:97,modifiability,variab,variables,97,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/pull/6420:141,modifiability,variab,variables,141,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/pull/6420:36,safety,patch,patches,36,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/pull/6420:78,safety,updat,update,78,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/pull/6420:36,security,patch,patches,36,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/pull/6420:78,security,updat,update,78,[jsroot] several fixes for v6-22-00-patches [skip-ci]; Fix histogram stat box update. Do not use variables before define them. Remove unused variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6420
https://github.com/root-project/root/issues/6421:122,availability,error,errors,122,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:306,availability,consist,consistently,306,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:688,availability,error,errors,688,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1592,availability,error,errors,1592,"fore I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1625,availability,error,errors,1625,"changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time config",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1721,availability,error,errors,1721,". The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2122,availability,avail,available,2122," set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2242,availability,avail,available,2242," DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligibl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2945,availability,error,errors,2945,"_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3005,availability,error,errors,3005,"o the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:18,deployability,log,logging,18,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4296,deployability,log,log,4296,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:637,energy efficiency,Current,Currently,637,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2107,energy efficiency,current,currently,2107,"n WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2227,energy efficiency,current,currently,2227,"if. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2543,energy efficiency,current,current,2543,"o verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3173,energy efficiency,Reduc,Reduced,3173," Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the com",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3496,energy efficiency,predict,predicted,3496,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3523,energy efficiency,CPU,CPU,3523,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4108,energy efficiency,current,current,4108,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:716,integrability,messag,messages,716,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1078,integrability,messag,messages,1078,"it2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2089,integrability,messag,messages,2089,"re only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2209,integrability,messag,messages,2209,"t pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on perfo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2498,integrability,messag,messages,2498,"ause the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2622,integrability,configur,configurable,2622,"ors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3718,integrability,rout,routines,3718,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3784,integrability,messag,messages,3784,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3825,integrability,wrap,wrappers,3825,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3887,integrability,wrap,wrappers,3887,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3947,integrability,messag,messages,3947,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3998,integrability,messag,messages,3998,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4071,integrability,messag,messages,4071,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4187,integrability,configur,configurable,4187,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4241,integrability,wrap,wrappers,4241,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:716,interoperability,messag,messages,716,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1078,interoperability,messag,messages,1078,"it2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2089,interoperability,messag,messages,2089,"re only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2209,interoperability,messag,messages,2209,"t pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on perfo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2498,interoperability,messag,messages,2498,"ause the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3137,interoperability,incompatib,incompatibilities,3137,"ler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3784,interoperability,messag,messages,3784,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3825,interoperability,wrapper,wrappers,3825,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3887,interoperability,wrapper,wrappers,3887,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3947,interoperability,messag,messages,3947,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3998,interoperability,messag,messages,3998,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4071,interoperability,messag,messages,4071,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4241,interoperability,wrapper,wrappers,4241,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:817,modifiability,Variab,VariableMetricBuilder,817,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:990,modifiability,Variab,VariableMetric,990,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1173,modifiability,Variab,VariableMetricBuilder,1173," certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1303,modifiability,Variab,VariableMetricBuilder,1303,"ntly everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, tro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2622,modifiability,configur,configurable,2622,"ors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4187,modifiability,configur,configurable,4187,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:122,performance,error,errors,122,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:401,performance,time,time,401,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:609,performance,time,time,609,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:688,performance,error,errors,688,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1429,performance,time,time,1429,"t has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by j",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1485,performance,time,time,1485,"ke [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1592,performance,error,errors,1592,"fore I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1625,performance,error,errors,1625,"changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time config",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1721,performance,error,errors,1721,". The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2617,performance,time,time,2617,"el 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2945,performance,error,errors,2945,"_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3005,performance,error,errors,3005,"o the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3181,performance,perform,performance,3181,"ould enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3208,performance,perform,performance,3208,"ges that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3523,performance,CPU,CPU,3523,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4038,performance,time,time,4038,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4055,performance,time,time,4055,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4182,performance,time,time,4182,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2122,reliability,availab,available,2122," set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2242,reliability,availab,available,2242," DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligibl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2745,reliability,doe,does,2745,"level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:18,safety,log,logging,18,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:122,safety,error,errors,122,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:688,safety,error,errors,688,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1592,safety,error,errors,1592,"fore I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1625,safety,error,errors,1625,"changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time config",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1721,safety,error,errors,1721,". The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2122,safety,avail,available,2122," set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2242,safety,avail,available,2242," DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligibl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2945,safety,error,errors,2945,"_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3005,safety,error,errors,3005,"o the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3496,safety,predict,predicted,3496,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3614,safety,hot,hot,3614,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3630,safety,Hot,Hot,3630,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4296,safety,log,log,4296,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:18,security,log,logging,18,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1490,security,control,control,1490,"nuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2122,security,availab,available,2122," set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2242,security,availab,available,2242," DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligibl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2622,security,configur,configurable,2622,"ors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4187,security,configur,configurable,4187,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4296,security,log,log,4296,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4398,security,session,session,4398,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:18,testability,log,logging,18,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1490,testability,control,control,1490,"nuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3760,testability,instrument,instrumented,3760,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:4296,testability,log,log,4296,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:122,usability,error,errors,122,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:306,usability,consist,consistently,306,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:584,usability,feedback,feedback,584,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:688,usability,error,errors,688,"Proposal to unify logging in Minuit2; Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1592,usability,error,errors,1592,"fore I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1625,usability,error,errors,1625,"changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time config",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:1721,usability,error,errors,1721,". The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way). ```c++. if (PrintLevel() > 1) {. MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);. }. ```. Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set. ```c++. #ifdef WARNINGMSG. MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");. #endif. ```. Use of DEBUG and std::cout. ```c++. #ifdef DEBUG. std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2299,usability,experien,experience,2299,"ariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2324,usability,minim,minimizing,2324,"ergence when edm < ""<<edmval<<std::endl;. #endif. ```. The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors. - level 1: all of level 0 + warnings. - level 2: all of level 1 + info. - level 3: all of level 2 + debug. and add the corresponding macros. ```c++. MN_WARN_MSG. MN_WARN_MSG2. MN_WARN_VAL. MN_WARN_VAL2. MN_DEBUG_MSG. MN_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:2945,usability,error,errors,2945,"_DEBUG_MSG2. MN_DEBUG_VAL. MN_DEBUG_VAL2. ```. in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3005,usability,error,errors,3005,"o the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3075,usability,document,documented,3075," warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3181,usability,perform,performance,3181,"ould enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3208,usability,perform,performance,3208,"ges that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3367,usability,user,user,3367,"d be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6421:3935,usability,user,users,3935,"messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes? This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance? The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jupyter notebook).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6421
https://github.com/root-project/root/issues/6422:4,usability,document,documentation,4,"Add documentation for ROOT::RDF::RunGraphs; We are missing further documentation for `ROOT::RDF::RunGraphs`. Most important, we should explain the feature in the main doxygen docs of `RDataFrame`. Further, we could probably add a tutorial or just add it to the ATLAS Open Data tutorials in `df10*.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6422
https://github.com/root-project/root/issues/6422:67,usability,document,documentation,67,"Add documentation for ROOT::RDF::RunGraphs; We are missing further documentation for `ROOT::RDF::RunGraphs`. Most important, we should explain the feature in the main doxygen docs of `RDataFrame`. Further, we could probably add a tutorial or just add it to the ATLAS Open Data tutorials in `df10*.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6422
https://github.com/root-project/root/pull/6424:0,safety,prevent,prevent,0,prevent invalid canvas height; fix for: https://github.com/root-project/root/issues/6379,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6424
https://github.com/root-project/root/pull/6424:0,security,preven,prevent,0,prevent invalid canvas height; fix for: https://github.com/root-project/root/issues/6379,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6424
https://github.com/root-project/root/issues/6425:93,deployability,patch,patches,93,"Typo in void TEnv::SetValue(const char *name, double value) implementation; Branch: v6-22-00-patches (I checked master has the same issue). On file:. **root_src/core/base/src/TEnv.cxx**. in the implementation of the function: **TEnv::SetValue**. **line#: 784**. ```. void TEnv::SetValue(const char *name, double value). {. SetValue(name, Form(""%g"", value));. }. ```. the argument value should be **Double_t** as declared in the correspoinding TEnv.h file. Regards,. Danilo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6425
https://github.com/root-project/root/issues/6425:161,energy efficiency,core,core,161,"Typo in void TEnv::SetValue(const char *name, double value) implementation; Branch: v6-22-00-patches (I checked master has the same issue). On file:. **root_src/core/base/src/TEnv.cxx**. in the implementation of the function: **TEnv::SetValue**. **line#: 784**. ```. void TEnv::SetValue(const char *name, double value). {. SetValue(name, Form(""%g"", value));. }. ```. the argument value should be **Double_t** as declared in the correspoinding TEnv.h file. Regards,. Danilo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6425
https://github.com/root-project/root/issues/6425:93,safety,patch,patches,93,"Typo in void TEnv::SetValue(const char *name, double value) implementation; Branch: v6-22-00-patches (I checked master has the same issue). On file:. **root_src/core/base/src/TEnv.cxx**. in the implementation of the function: **TEnv::SetValue**. **line#: 784**. ```. void TEnv::SetValue(const char *name, double value). {. SetValue(name, Form(""%g"", value));. }. ```. the argument value should be **Double_t** as declared in the correspoinding TEnv.h file. Regards,. Danilo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6425
https://github.com/root-project/root/issues/6425:93,security,patch,patches,93,"Typo in void TEnv::SetValue(const char *name, double value) implementation; Branch: v6-22-00-patches (I checked master has the same issue). On file:. **root_src/core/base/src/TEnv.cxx**. in the implementation of the function: **TEnv::SetValue**. **line#: 784**. ```. void TEnv::SetValue(const char *name, double value). {. SetValue(name, Form(""%g"", value));. }. ```. the argument value should be **Double_t** as declared in the correspoinding TEnv.h file. Regards,. Danilo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6425
https://github.com/root-project/root/pull/6426:204,availability,consist,consistently,204,[TEnv] Make signatures of method declaration and definition uniform; The `double` overload of `TEnv::SetValue` used `Double_t` as argument. type in the header file and `double` in the source file. Now we consistently use `Double_t`. This fixes #6425.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6426
https://github.com/root-project/root/pull/6426:12,security,sign,signatures,12,[TEnv] Make signatures of method declaration and definition uniform; The `double` overload of `TEnv::SetValue` used `Double_t` as argument. type in the header file and `double` in the source file. Now we consistently use `Double_t`. This fixes #6425.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6426
https://github.com/root-project/root/pull/6426:204,usability,consist,consistently,204,[TEnv] Make signatures of method declaration and definition uniform; The `double` overload of `TEnv::SetValue` used `Double_t` as argument. type in the header file and `double` in the source file. Now we consistently use `Double_t`. This fixes #6425.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6426
https://github.com/root-project/root/issues/6427:308,availability,error,errors,308,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:4,deployability,Integr,Integral,4,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:350,deployability,integr,integral,350,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:544,deployability,Integr,Integral,544,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:4,integrability,Integr,Integral,4,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:350,integrability,integr,integral,350,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:544,integrability,Integr,Integral,544,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:4,interoperability,Integr,Integral,4,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:350,interoperability,integr,integral,350,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:544,interoperability,Integr,Integral,544,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:4,modifiability,Integr,Integral,4,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:350,modifiability,integr,integral,350,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:544,modifiability,Integr,Integral,544,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:85,performance,network,network,85,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:308,performance,error,errors,308,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:4,reliability,Integr,Integral,4,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:350,reliability,integr,integral,350,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:544,reliability,Integr,Integral,544,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:308,safety,error,errors,308,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:4,security,Integr,Integral,4,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:85,security,network,network,85,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:350,security,integr,integral,350,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:544,security,Integr,Integral,544,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:4,testability,Integr,Integral,4,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:350,testability,integr,integral,350,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:544,testability,Integr,Integral,544,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:254,usability,tool,tool,254,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:289,usability,tool,tool,289,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6427:308,usability,error,errors,308,"TH1 Integral incorrectly returns nan; Dear ROOT experts. I have produced some neural network output score, which I exported to ROOT histograms using uproot (as I am more familiar with that than pyROOT), so that I could set limits using the Higgs Combine tool. However in the Higgs Combine tool I encountered errors due to these histograms having nan integral. I presumed this problem may just have been caused by me outputting the histogram incorrectly, however when I investigated one of these histograms I found it had the property that hist.Integral(100, 100) gives nan, but hist.GetBinContent(100) gives 0.0, when I would assume these should always give the same result. What is the difference between these, please, and can anyone advise on where I might be going wrong? Thank you. Dominic Stafford",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6427
https://github.com/root-project/root/issues/6428:2958,availability,mask,masks,2958,"ightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(uns",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3350,availability,mask,masks,3350,"s/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVAL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3473,availability,mask,mask,3473,"cted behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:34,deployability,version,version,34,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:344,deployability,stack,stack,344,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:592,deployability,Stack,StackTrace,592,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1714,deployability,stack,stack,1714,"07fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenabl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1291,energy efficiency,optim,optimized,1291,"========. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<opti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1313,energy efficiency,optim,optimized,1313,"crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/ce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2270,energy efficiency,optim,optimized,2270," in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2292,energy efficiency,optim,optimized,2292,"zed out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3707,energy efficiency,current,current,3707,"eenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 Ce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4039,energy efficiency,current,current,4039,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:34,integrability,version,version,34,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1646,integrability,sub,submit,1646,"ws/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2683,integrability,Pub,Public,2683,"bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:34,modifiability,version,version,34,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1291,performance,optimiz,optimized,1291,"========. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<opti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1313,performance,optimiz,optimized,1313,"crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/ce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2270,performance,optimiz,optimized,2270," in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2292,performance,optimiz,optimized,2292,"zed out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3653,reliability,pra,pragma,3653,") && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3985,reliability,pra,pragma,3985,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:15,safety,except,exception,15,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:99,safety,test,test,99,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1376,safety,test,test,1376,"======================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. =====",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2355,safety,test,test,2355,"yts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2454,safety,test,test,2454,"he lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2859,safety,except,excepts,2859,"===================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2920,safety,except,excepts,2920,"deGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3247,safety,except,excepts,3247,"293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3308,safety,except,excepts,3308,"afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3639,safety,except,excepts,3639,"ned(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3715,safety,except,exception,3715,"cept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3823,safety,except,exception,3823,"nt feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3879,safety,except,excepts,3879,"_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not test",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3971,safety,except,excepts,3971,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4047,safety,except,exception,4047,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4155,safety,except,exception,4155,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4212,safety,except,excepts,4212,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4879,safety,test,tested,4879,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:881,security,sign,signal,881,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:99,testability,test,test,99,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:350,testability,trace,trace,350,"Floating point exception in TPad (version 2); ## Describe the bug. Crash. ```. [averbyts@lxplus701 test]$ ./pad2.exe. Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to 91.114.73.210:0.0. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1376,testability,test,test,1376,"======================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. =====",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1720,testability,trace,trace,1720,"ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcep",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2355,testability,test,test,2355,"yts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2454,testability,test,test,2454,"he lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4879,testability,test,tested,4879,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4902,testability,context,context,4902,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1345,usability,user,user,1345,"ck trace of all threads:. ===========================================================. #0 0x00007fe989ecb46c in waitpid () from /lib64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Project",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1477,usability,hint,hint,1477,"64/libc.so.6. #1 0x00007fe989e48f62 in do_system () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1521,usability,help,help,1521,"stem () from /lib64/libc.so.6. #2 0x00007fe98ba740bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fe98ba716d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:1796,usability,help,help,1796,"ies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2324,usability,user,user,2324,">) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_E",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2480,usability,behavi,behavior,2480," the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:2748,usability,person,personal,2748,"nt in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fe98b1ddee9 in TPad::FillCollideGrid(TObject*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fe98b1de2eb in TPad::PlaceBox(TObject*, double, double, double&, double&) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Wed/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /afs/cern.ch/user/a/averbyts/Projects/zevis/test/pad2.cxx:84. ===========================================================. [averbyts@lxplus701 test]$ . ```. ## Expected behavior. No FPE. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TH1D.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:3810,usability,clear,clear,3810,"ple.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6428:4142,usability,clear,clear,4142,"/ previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. Double_t w=0, h=0, xl=0, yb=0;. TH1D* o=new TH1D();. TPad* c= new TPad();. c->PlaceBox(o,w,h,xl,yb);. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad2.cxx $(root-config --glibs --cflags --libs) -o pad2 -g. ```. run. ```. ./pad2. ```. ## Setup. ROOT 6.22.02 CentOS7 gcc4.8.5 . and . lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```. Should also work with mac (not tested). ## Additional context. Hopefully this will be the last one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6428
https://github.com/root-project/root/issues/6430:6,deployability,build,builds,6,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:31,deployability,releas,releases,31,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:132,deployability,build,build,132,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:178,deployability,build,builds,178,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:219,deployability,releas,releases,219,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:269,deployability,releas,released,269,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:434,deployability,releas,release-only,434,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:452,deployability,Build,Building,452,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:525,deployability,build,builds,525,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:643,deployability,build,building,643,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:666,deployability,configurat,configuration,666,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:726,energy efficiency,CPU,CPU,726,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:730,energy efficiency,power,power,730,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:666,integrability,configur,configuration,666,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:303,interoperability,standard,standard,303,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:570,interoperability,share,shared,570,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:666,modifiability,configur,configuration,666,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:703,performance,time,time,703,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:726,performance,CPU,CPU,726,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:666,security,configur,configuration,666,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:64,usability,efficien,efficient,64,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/issues/6430:761,usability,user,user,761,"Debug builds in nightlies (and releases); # Problem. It is more efficient to debug applications relying on ROOT having a debug ROOT build. # Solution I would like. Provide debug builds for nightlies (and optionally for releases). # Alternatives . - Debug on Linux with released ROOT works perfectly for standard RedHat distros ( the others are less relevant ). This is a very good alternative (thanks to Mattias!), but Linux-only and release-only. . - Building from the sources is a very-very bad alternative, as the created builds cannot be transferred elsewhere, i.e. shared with collaborators. Another reason why this is a bad alternative: building with the full configuration on Mac in a reasonable time requires a lot of CPU power, much more than a single user laptop can provide. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6430
https://github.com/root-project/root/pull/6431:81,availability,operat,operator,81,"[DF] Fix comparison of loopmanager pointers; The std::set requires as comparison operator the ""less than"" operator to. select the unique elements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6431
https://github.com/root-project/root/pull/6431:106,availability,operat,operator,106,"[DF] Fix comparison of loopmanager pointers; The std::set requires as comparison operator the ""less than"" operator to. select the unique elements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6431
https://github.com/root-project/root/issues/6432:1237,availability,avail,available,1237,"ot scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer run",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:0,deployability,Build,Build,0,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:27,deployability,scale,scale,27,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:202,deployability,build,build,202,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:355,deployability,resourc,resources,355,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:376,deployability,build,build,376,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:399,deployability,build,build,399,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:513,deployability,build,build,513,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:656,deployability,build,build,656,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:684,deployability,Build,Building,684,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:698,deployability,scale,scales,698,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:753,deployability,scale,scale,753,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:803,deployability,build,build,803,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:881,deployability,build,building,881,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:937,deployability,build,build,937,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1007,deployability,build,build,1007,"ormance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1133,deployability,build,build,1133,"irst world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1198,deployability,build,build,1198," build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1204,deployability,manag,manage,1204," of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1346,deployability,configurat,configuration,1346,"s resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1393,deployability,depend,dependencies,1393,"build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1418,deployability,build,build,1418,"ages.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1678,deployability,Build,Build,1678,"l. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1695,deployability,modul,modules,1695,"cales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1927,deployability,depend,depends,1927,"t the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CX",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2073,deployability,build,building,2073,"e a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2152,deployability,build,build,2152," more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2253,deployability,build,build,2253," Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2297,deployability,depend,dependencies,2297," a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As menti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2403,deployability,build,building,2403,"etween its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2423,deployability,scale,scales,2423,"rgets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2528,deployability,build,build,2528," In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2588,deployability,depend,depend,2588,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2616,deployability,build,building,2616,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2673,deployability,build,build,2673,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2913,deployability,Releas,Release,2913,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3431,deployability,build,build,3431,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:27,energy efficiency,scale,scale,27,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:41,energy efficiency,core,cores,41,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:266,energy efficiency,core,core,266,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:355,energy efficiency,resourc,resources,355,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:698,energy efficiency,scale,scales,698,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:753,energy efficiency,scale,scale,753,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1204,energy efficiency,manag,manage,1204," of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1247,energy efficiency,core,cores,1247,"ng well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running tho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2423,energy efficiency,scale,scales,2423,"rgets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2448,energy efficiency,core,cores,2448," seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2786,energy efficiency,power,powerful,2786,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1346,integrability,configur,configuration,1346,"s resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1393,integrability,depend,dependencies,1393,"build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1927,integrability,depend,depends,1927,"t the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CX",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2297,integrability,depend,dependencies,2297," a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As menti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2588,integrability,depend,depend,2588,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1267,interoperability,share,share,1267," systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:27,modifiability,scal,scale,27,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:245,modifiability,scal,scaling,245,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:698,modifiability,scal,scales,698,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:753,modifiability,scal,scale,753,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1346,modifiability,configur,configuration,1346,"s resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1393,modifiability,depend,dependencies,1393,"build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1695,modifiability,modul,modules,1695,"cales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1927,modifiability,depend,depends,1927,"t the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CX",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2297,modifiability,depend,dependencies,2297," a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As menti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2423,modifiability,scal,scales,2423,"rgets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2588,modifiability,depend,depend,2588,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:6,performance,perform,performance,6,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:27,performance,scale,scale,27,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:355,performance,resourc,resources,355,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:569,performance,time,timeline,569,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:698,performance,scale,scales,698,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:753,performance,scale,scale,753,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:823,performance,bottleneck,bottlenecks,823,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:865,performance,bottleneck,bottleneck,865,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:993,performance,time,time,993,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1142,performance,parallel,parallel,1142," problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS sof",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2423,performance,scale,scales,2423,"rgets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3417,performance,perform,performed,3417,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:18,reliability,doe,does,18,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1189,reliability,doe,does,1189,"while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1237,reliability,availab,available,1237,"ot scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer run",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2086,reliability,pra,practice,2086,"more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ub",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:355,safety,resourc,resources,355,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1204,safety,manag,manage,1204," of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1237,safety,avail,available,1237,"ot scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer run",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1393,safety,depend,dependencies,1393,"build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1695,safety,modul,modules,1695,"cales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1927,safety,depend,depends,1927,"t the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CX",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2297,safety,depend,dependencies,2297," a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As menti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2588,safety,depend,depend,2588,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3357,safety,test,test,3357,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1237,security,availab,available,1237,"ot scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer run",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1346,security,configur,configuration,1346,"s resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:355,testability,resourc,resources,355,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1393,testability,depend,dependencies,1393,"build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1927,testability,depend,depends,1927,"t the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CX",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2297,testability,depend,dependencies,2297," a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As menti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2588,testability,depend,depend,2588,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3357,testability,test,test,3357,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3544,testability,context,context,3544,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:6,usability,perform,performance,6,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:414,usability,user,user-images,414,"Build performance does not scale to many cores/threads; ## Explain what you would like to see improved. I know that this is a **very** first world problem, but it has been bugging me since a while. The build of ROOT using its CMake setup is not scaling well to many core systems at all. :frowning:. This is a snapshot of how ROOT 6.20/08 used my system's resources during its build:. ![root-6 20 08-build](https://user-images.githubusercontent.com/30694331/94133565-1d97ec80-fe61-11ea-927d-94b8926cd41b.png). The build starts ""pretty much"" at the left hand side of the timeline, and lasts until ""pretty much"" the right hand side of it. As you can see, the build starts out very well. Building LLVM scales perfectly to 64 threads. And I believe it would scale well to even beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that librar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:1767,usability,behavi,behaviour,1767,"beyond that. But once the LLVM build is done, many bottlenecks show up. First there is a big bottleneck with building `libCling` and `rootcling`, but after that the build of `libRIO` is also taking a surprising amount of time. And the build is stuck waiting for all of these. Towards the end things improve a bit once more, as many libraries / source files can build in parallel once more. But even then, very rarely does the build manage to make use of all of the available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:2232,usability,prefer,prefer,2232,"e available cores. ## Optional: share how it could be improved. From a quick glance it seems that ROOT's CMake configuration sets up way too many unnecessary dependencies between its build targets. Most of the issues seem to arise from how the dictionary generation is set up as far as I can see. In ATLAS I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3371,usability,behavi,behaviour,3371,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3417,usability,perform,performed,3417,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/issues/6432:3519,usability,behavi,behaviour,3519,"ing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```. cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \. -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \. -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \. -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \. -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/. ninja. ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6432
https://github.com/root-project/root/pull/6434:342,deployability,updat,update,342,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/pull/6434:193,energy efficiency,Adapt,Adapted,193,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/pull/6434:193,integrability,Adapt,Adapted,193,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/pull/6434:193,interoperability,Adapt,Adapted,193,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/pull/6434:154,modifiability,inherit,inheritance,154,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/pull/6434:193,modifiability,Adapt,Adapted,193,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/pull/6434:342,safety,updat,update,342,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/pull/6434:342,security,updat,update,342,[PyROOT][6376] Fix calculation of offset of dispatch pointer; Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:. https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd. since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6434
https://github.com/root-project/root/issues/6435:990,availability,Operat,Operating,990,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:1065,availability,down,download,1065,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:548,deployability,build,build,548,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:978,deployability,version,version,978,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:1047,deployability,instal,install,1047,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:978,integrability,version,version,978,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:215,modifiability,scal,scalars,215,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:279,modifiability,paramet,parameter,279,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:978,modifiability,version,version,978,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:1281,reliability,doe,does-not-compile,1281,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:502,safety,input,input,502,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:1132,testability,context,context,1132,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:1161,testability,context,context,1161,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:78,usability,clear,clear,78,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:126,usability,behavi,behavior,126,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:357,usability,behavi,behavior,357,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/issues/6435:502,usability,input,input,502,"[DF] Jitted Min method breaks with RVec columns; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Jitted Min calls break with RVec columns, although they work fine with scalars and if the RVec type is passed explicitly as a template parameter. Max is not affected. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```c++. #include <ROOT/RDataFrame.hxx> . #include <ROOT/RVec.hxx> . . int main() { . auto df = ROOT::RDataFrame(1).Define(""x"", [] { return ROOT::RVec<float>{1,2,3}; }); . df.Max<ROOT::RVec<float>>(""x"").GetValue(); . df.Min<ROOT::RVec<float>>(""x"").GetValue(); . df.Max(""x"").GetValue(); . df.Min(""x"").GetValue(); // this one breaks at runtime . return 0; . } . ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.22.02. ## Additional context. <!--. Add any other context about the problem here. -->. First reported [on the forum](https://root-forum.cern.ch/t/rdataframe-min-function-does-not-compile/41573).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6435
https://github.com/root-project/root/pull/6436:273,modifiability,paramet,parameter,273,"[DF] Always pass arguments with the same type to std::min in Min; When the Min or Max actions are jitted, their result type is always. double, independently of the column type. If the column type happens. to be of a different type, std::min won't compile because template. parameter type deduction is ambiguous. We now always explicitly cast the arguments of std::min to the desired. result type to avoid the ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6436
https://github.com/root-project/root/pull/6436:399,safety,avoid,avoid,399,"[DF] Always pass arguments with the same type to std::min in Min; When the Min or Max actions are jitted, their result type is always. double, independently of the column type. If the column type happens. to be of a different type, std::min won't compile because template. parameter type deduction is ambiguous. We now always explicitly cast the arguments of std::min to the desired. result type to avoid the ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6436
https://github.com/root-project/root/pull/6437:273,modifiability,paramet,parameter,273,"[DF] Always pass arguments with the same type to std::min in Min; When the Min or Max actions are jitted, their result type is always. double, independently of the column type. If the column type happens. to be of a different type, std::min won't compile because template. parameter type deduction is ambiguous. We now always explicitly cast the arguments of std::min to the desired. result type to avoid the ambiguity. This fixes #6435.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6437
https://github.com/root-project/root/pull/6437:399,safety,avoid,avoid,399,"[DF] Always pass arguments with the same type to std::min in Min; When the Min or Max actions are jitted, their result type is always. double, independently of the column type. If the column type happens. to be of a different type, std::min won't compile because template. parameter type deduction is ambiguous. We now always explicitly cast the arguments of std::min to the desired. result type to avoid the ambiguity. This fixes #6435.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6437
https://github.com/root-project/root/issues/6438:1035,availability,operat,operations,1035,"Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1305,deployability,contain,contain,1305,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:508,energy efficiency,optim,optimize,508,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:867,interoperability,specif,specified,867,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1212,interoperability,specif,specify,1212,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1385,interoperability,specif,specified,1385,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1451,interoperability,specif,specified,1451,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1595,interoperability,specif,specified,1595,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:2070,interoperability,specif,specify,2070,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1940,modifiability,paramet,parameter,1940,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:256,performance,cach,cachesize,256,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:266,performance,CACH,CACHESIZE,266,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:508,performance,optimiz,optimize,508,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:631,performance,Parallel,Parallelize,631,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:685,performance,Parallel,Parallelize,685,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:976,performance,cach,cachesize,976,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1009,performance,cach,cache,1009,"prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1031,performance,I/O,I/O,1031,"fo; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:748,reliability,Doe,Does,748,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1359,safety,input,input,1359,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1474,safety,input,input,1474,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1618,safety,input,input,1618,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1978,security,control,controls,1978,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1978,testability,control,controls,1978,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:7,usability,help,help,7,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:66,usability,clear,clear,66,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:114,usability,behavi,behavior,114,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:140,usability,help,help,140,"hadd --help prints wrong usage info; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1359,usability,input,input,1359,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1474,usability,input,input,1474,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1618,usability,input,input,1618,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6438:1734,usability,support,support,1734,"or is. -->. `hadd --help` prints the following:. ```. usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]. [-cachesize CACHESIZE]. [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]. [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]. TARGET SOURCES. OPTIONS:. -a Append to the output. -k Skip corrupt or non-existent files, do not exit. -T Do not merge Trees. -O Re-optimize basket size when merging TTree. -v Explicitly set the verbosity level: 0 request no output, 99 is the default. -j Parallelize the execution in multiple processes. -dbg Parallelize the execution in multiple processes in debug mode (Does not delete partial files stored inside working directory). -d Carry out the partial multiprocess execution in the specified directory. -n Open at most 'maxopenedfiles' at once (use 0 to request to use the system maximum). -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to disable). -experimental-io-features Used with an argument provided, enables the corresponding experimental feature for output trees. -f Gives the ability to specify the compression level of the target file(by default 4) . -fk Sets the target file to contain the baskets with the same compression. as the input files (unless -O is specified). Compresses the meta data. using the compression level specified in the first input or the. compression setting after fk (for example 206 when using -fk206). -ff The compression level use is the one specified in the first input. -f0 Do not compress the target file. -f6 Use compression level 6. (See TFile::SetCompressionSettings for the support range of value.). TARGET Target file. SOURCES Source files. ```. The options `-fk`, `-ff` and `-f0` are listed in the short usage overview as `[-fk FK] [-ff FF] [-f0 F0] `, but they do not accept a parameter. The docs mention that `-f` controls the compression _level_ of the target file (e.g. 4), but it's actually possible to specify the full compressoin algorithm (e.g. 404).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6438
https://github.com/root-project/root/issues/6439:42,availability,state,state,42,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:514,availability,failur,failure,514,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:727,availability,error,error,727,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1099,availability,operat,operator,1099,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1257,availability,Operat,Operating,1257,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1332,availability,down,download,1332,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:0,deployability,Fail,Failed,0,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:287,deployability,build,build,287,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:514,deployability,fail,failure,514,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1245,deployability,version,version,1245,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1314,deployability,instal,install,1314,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1463,deployability,build,build,1463,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1177,energy efficiency,load,load,1177,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:42,integrability,state,state,42,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1030,integrability,interfac,interface,1030,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1245,integrability,version,version,1245,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1030,interoperability,interfac,interface,1030,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1200,interoperability,share,shared,1200,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1030,modifiability,interfac,interface,1030,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1245,modifiability,version,version,1245,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1493,modifiability,pac,package,1493,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:514,performance,failur,failure,514,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:727,performance,error,error,727,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:1177,performance,load,load,1177,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:0,reliability,Fail,Failed,0,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:444,reliability,doe,does,444,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:514,reliability,fail,failure,514,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:241,safety,input,input,241,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:392,safety,compl,complains,392,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:422,safety,valid,valid,422,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:576,safety,valid,valid,576,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:727,safety,error,error,727,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:392,security,compl,complains,392,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:96,usability,behavi,behavior,96,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:241,usability,input,input,241,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/issues/6439:727,usability,error,error,727,"Failed compilation leaves cling in a ""bad state""; ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```. ~ root -l. root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");. ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'. /*** snip ***/. root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});. IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]! You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier). Maybe you need to load the corresponding shared library? ```. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master@3ae45ea5f9, RelWithDebInfo. I could not reproduce with master@dcac6e1bf0, Debug build type. The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6439
https://github.com/root-project/root/pull/6440:16,reliability,doe,does,16,Protection if l does not exist; Fix https://github.com/root-project/root/issues/6428,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6440
https://github.com/root-project/root/issues/6441:39,availability,failur,failure,39,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:33,deployability,build,build,33,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:39,deployability,fail,failure,39,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:93,deployability,build,build,93,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:99,deployability,fail,failed,99,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:39,performance,failur,failure,39,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:39,reliability,fail,failure,39,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:99,reliability,fail,failed,99,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:59,safety,test,testing,59,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/issues/6441:59,testability,test,testing,59,Windows CI runs roottest despite build failure; roottest / testing should not be done if the build failed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6441
https://github.com/root-project/root/pull/6442:215,deployability,log,logic,215,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:47,energy efficiency,profil,profiles,47,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:118,energy efficiency,profil,profile,118,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:413,modifiability,Exten,ExtendAxis,413,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:47,performance,profil,profiles,47,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:118,performance,profil,profile,118,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:215,safety,log,logic,215,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:442,safety,test,tests,442,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:215,security,log,logic,215,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:215,testability,log,logic,215,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/pull/6442:442,testability,test,tests,442,[HIST] Several fixes in handling histogram and profiles with labels; This PR provides several fixes for histogram and profile having labels. n particular: . - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class). - fix #6403 for TProfile::LabelsOption when there are weights. - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6442
https://github.com/root-project/root/issues/6443:882,deployability,build,build,882,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:1132,deployability,patch,patches,1132,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:407,performance,I/O,I/O,407,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:836,safety,input,input,836,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:1132,safety,patch,patches,1132,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:1132,security,patch,patches,1132,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:411,usability,custom,customization,411,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:446,usability,behavi,behavior,446,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:691,usability,behavi,behavior,691,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:836,usability,input,input,836,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/issues/6443:950,usability,tip,tip,950,"Spurrious auto-parsing (as seen with CMS file and libraries); . ### Describe the bug. The attached example [repro-autoparsing-cms.tar.gz](https://github.com/root-project/root/files/5277943/repro-autoparsing-cms.tar.gz) shows a case where auto-parsing is spurriously created due to 3 catergories of problems:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). ### Expected behavior. No auto-parsing since all the needed information is provided by a rootpcm file. ### To Reproduce. With the attached file. ```. . build_repro.sh . root.exe -b -l -q -e '.L repro-v11.so' reproread.cxx+. ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. anything up to tip of ROOT main branch but reported with CMSSW_11_2_ROOT6_X_2020-09-17-2300/ which uses ROOT with commit 1d9fbac78569978c7bd67de523956175c070edea plus (not relevant here) minor CMS patches. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6443
https://github.com/root-project/root/pull/6444:0,energy efficiency,Reduc,Reduce,0,Reduce the size difference between title and text in issue template;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6444
https://github.com/root-project/root/pull/6445:109,energy efficiency,core,core,109,"Fix Issue #6443: spurrious auto-parsing due to @ class, pair, __pair_base and enums; Avoid auto-parsing when core/meta does:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). where a class is expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6445
https://github.com/root-project/root/pull/6445:224,performance,I/O,I/O,224,"Fix Issue #6443: spurrious auto-parsing due to @ class, pair, __pair_base and enums; Avoid auto-parsing when core/meta does:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). where a class is expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6445
https://github.com/root-project/root/pull/6445:119,reliability,doe,does,119,"Fix Issue #6443: spurrious auto-parsing due to @ class, pair, __pair_base and enums; Avoid auto-parsing when core/meta does:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). where a class is expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6445
https://github.com/root-project/root/pull/6445:85,safety,Avoid,Avoid,85,"Fix Issue #6443: spurrious auto-parsing due to @ class, pair, __pair_base and enums; Avoid auto-parsing when core/meta does:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). where a class is expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6445
https://github.com/root-project/root/pull/6445:228,usability,custom,customization,228,"Fix Issue #6443: spurrious auto-parsing due to @ class, pair, __pair_base and enums; Avoid auto-parsing when core/meta does:. * Search for a enum type. * Search for __base_pair. * Search for one of ROOT synthetic class (for I/O customization rules). where a class is expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6445
https://github.com/root-project/root/issues/6446:231,deployability,stack,stack,231,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:675,deployability,Stack,StackTrace,675,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1583,deployability,stack,stack,1583,"<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:587,energy efficiency,optim,optimized,587,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:734,energy efficiency,core,core,734,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:903,energy efficiency,core,core,903,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1029,energy efficiency,optim,optimized,1029,"in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1049,energy efficiency,optim,optimized,1049," the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. =====",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1069,energy efficiency,optim,optimized,1069,". [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. =========================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1089,energy efficiency,optim,optimized,1089,"*** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. =============================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1204,energy efficiency,optim,optimized,1204,"h. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1226,energy efficiency,optim,optimized,1226,"stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1815,energy efficiency,optim,optimized,1815,"als (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1835,energy efficiency,optim,optimized,1835," sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1855,energy efficiency,optim,optimized,1855,"nViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() &",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1875,energy efficiency,optim,optimized,1875,"src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). Ge",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1990,energy efficiency,optim,optimized,1990,"d::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:2012,energy efficiency,optim,optimized,2012,"s=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)``.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:2787,energy efficiency,Draw,DrawLine,2787,"s=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)``.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:2892,energy efficiency,Draw,DrawLine,2892,"s=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)``.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1515,integrability,sub,submit,1515,"x/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cfla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:587,performance,optimiz,optimized,587,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1029,performance,optimiz,optimized,1029,"in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1049,performance,optimiz,optimized,1049," the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. =====",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1069,performance,optimiz,optimized,1069,". [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. =========================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1089,performance,optimiz,optimized,1089,"*** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. =============================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1204,performance,optimiz,optimized,1204,"h. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1226,performance,optimiz,optimized,1226,"stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1815,performance,optimiz,optimized,1815,"als (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1835,performance,optimiz,optimized,1835," sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1855,performance,optimiz,optimized,1855,"nViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() &",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1875,performance,optimiz,optimized,1875,"src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). Ge",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1990,performance,optimiz,optimized,1990,"d::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:2012,performance,optimiz,optimized,2012,"s=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)``.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:79,safety,test,test,79,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1245,safety,test,test,1245,"ll threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:2031,safety,test,test,2031,"s=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)``.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:943,security,sign,signal,943,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:79,testability,test,test,79,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:237,testability,trace,trace,237,"Possible Null pointer dereference in TPad; ## Describe the bug. Crash. ```. [@ test]$ ./pad3. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1245,testability,test,test,1245,"ll threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1589,testability,trace,trace,1589,"ized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:2031,testability,test,test,2031,"s=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)``.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1346,usability,hint,hint,1346,"y_printer(gdb.current_objfile(),. #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1390,usability,help,help,1390,"fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc. entry=0x7fffd00a2ce0, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:1665,usability,help,help,1665,"System::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6446:2127,usability,behavi,behavior,2127,"s=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171. #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TLine.h>. #include <TPad.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->cd();. TLine* l= new TLine(0,1,0,1);. l->Paint();. delete l;. delete c;. delete C;. return 0;. }. ```. compile. ```. g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g. ```. run. ```. ./pad3. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7. and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. on lxplus. ## Possible fix. Replace. ```. if (!gPad->IsBatch()). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. with. ```. if (!gPad->IsBatch() && GetPainter() ). GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)``.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6446
https://github.com/root-project/root/issues/6447:323,deployability,stack,stack,323,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:767,deployability,Stack,StackTrace,767,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1616,deployability,stack,stack,1616,"nux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2383,deployability,fail,fails,2383,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:679,energy efficiency,optim,optimized,679,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:825,energy efficiency,core,core,825,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:993,energy efficiency,core,core,993,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1169,energy efficiency,core,core,1169,"est]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1237,energy efficiency,optim,optimized,1237,"=========================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1259,energy efficiency,optim,optimized,1259,"===================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1898,energy efficiency,core,core,1898,"ispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ``",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1966,energy efficiency,optim,optimized,1966,"rc/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1988,energy efficiency,optim,optimized,1988,"core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2436,energy efficiency,Draw,Draw,2436,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1548,integrability,sub,submit,1548,"0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cfl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2732,integrability,sub,subpadnumber,2732,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2755,integrability,sub,subpadnumber,2755,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2931,integrability,sub,subpadnumber,2931,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2954,integrability,sub,subpadnumber,2954,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:679,performance,optimiz,optimized,679,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1237,performance,optimiz,optimized,1237,"=========================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1259,performance,optimiz,optimized,1259,"===================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1966,performance,optimiz,optimized,1966,"rc/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1988,performance,optimiz,optimized,1988,"core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2383,reliability,fail,fails,2383,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:170,safety,test,test,170,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1278,safety,test,test,1278,"===. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2007,safety,test,test,2007,"nixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1033,security,sign,signal,1033,"mitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:170,testability,test,test,170,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:329,testability,trace,trace,329,"MIssing initialization of TPad::fPrimitives; ## Describe the bug. TPad::GetPrimitives() returns nullptr instead of an empty list, gets defererenced ... and so on. ```. [@test]$ ./pad4 . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1278,testability,test,test,1278,"===. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1622,testability,trace,trace,1622,"itpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2007,testability,test,test,2007,"nixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2666,testability,context,context,2666,") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;. return gPad;. }. ..... ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1379,usability,hint,hint,1379,"==============================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1423,usability,help,help,1423,".register_pretty_printer(gdb.current_objfile(),. #0 0x00007fc2c245846c in __libc_waitpid (pid=25123, stat_loc=stat_loc. entry=0x7ffefaecb520, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007fc2c23d5f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:1698,usability,help,help,1698,"/sysdeps/posix/system.c:148. #2 0x00007fc2c55d95dc in TUnixSystem::StackTrace (this=0xcf6980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007fc2c55dc06a in TUnixSystem::DispatchSignals (this=0xcf6980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6447:2103,usability,behavi,behavior,2103,"0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc2c54dd41d in TObject::AppendPad (this=0x190c210, option=0x400c96 """") at /usr/src/debug/root-6.22.02/core/base/src/TObject.cxx:112. #6 0x0000000000400b76 in main (argc=<optimized out>, argv=<optimized out>) at test/pad4.cxx:13. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code:. ```. #include <TCanvas.h>. #include <TText.h>. #include <TPad.h>. #include <fenv.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. //c->cd(1);//works. c->cd();//fails. TText* t= new TText(0.5,0.5,""some text"");. t->Draw();. delete t;. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad4.cxx $(root-config --glibs --cflags --libs) -o pad4 -g. ```. run. ```. ./pad4. ```. ## Setup. ROOT 6.22.02 gcc4.8.5 on CentOS7/EPEL. ## Additional context. Possible fix:. Change . ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. return gPad;. }. ..... ```. to. ```. TVirtualPad *TPad::cd(Int_t subpadnumber). {. if (!subpadnumber) {. gPad = this;. if (!gPad->IsBatch() && GetPainter()) GetPainter()->SelectDrawable(fPixmapID);. if (!fPrimitives) fPrimitives = new TList;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6447
https://github.com/root-project/root/issues/6448:22,deployability,build,builds,22,Disable NDEBUG for PR builds; I think we agree that we don't want the `NDEBUG` flag in PR builds but haven't decided on a solution to remove the flag.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6448
https://github.com/root-project/root/issues/6448:90,deployability,build,builds,90,Disable NDEBUG for PR builds; I think we agree that we don't want the `NDEBUG` flag in PR builds but haven't decided on a solution to remove the flag.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6448
https://github.com/root-project/root/issues/6449:2604,availability,mask,masks,2604," as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(uns",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2996,availability,mask,masks,2996," out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVAL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3119,availability,mask,mask,3119,"ected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",5",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:237,deployability,stack,stack,237,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:681,deployability,Stack,StackTrace,681,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1584,deployability,stack,stack,1584,"line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:4068,deployability,fail,fails,4068,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:593,energy efficiency,optim,optimized,593,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:740,energy efficiency,core,core,740,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:905,energy efficiency,core,core,905,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1029,energy efficiency,optim,optimized,1029,"part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1205,energy efficiency,optim,optimized,1205," crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1227,energy efficiency,optim,optimized,1227,"tire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1814,energy efficiency,optim,optimized,1814,"tchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1990,energy efficiency,optim,optimized,1990,"Pad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2012,energy efficiency,optim,optimized,2012,"237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3353,energy efficiency,current,current,3353,"eenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3685,energy efficiency,current,current,3685,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1516,integrability,sub,submit,1516,"s/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2329,integrability,Pub,Public,2329,"es below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:593,performance,optimiz,optimized,593,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1029,performance,optimiz,optimized,1029,"part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1205,performance,optimiz,optimized,1205," crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1227,performance,optimiz,optimized,1227,"tire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1814,performance,optimiz,optimized,1814,"tchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1990,performance,optimiz,optimized,1990,"Pad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2012,performance,optimiz,optimized,2012,"237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3299,reliability,pra,pragma,3299,") && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3631,reliability,pra,pragma,3631,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:4068,reliability,fail,fails,4068,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:15,safety,except,exception,15,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:78,safety,test,test,78,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:127,safety,except,exception,127,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1246,safety,test,test,1246," of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2031,safety,test,test,2031,"mized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2505,safety,except,excepts,2505,"please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2566,safety,except,excepts,2566,"st the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2893,safety,except,excepts,2893,"r/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2954,safety,except,excepts,2954,"0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3285,safety,except,excepts,3285,"ned(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3361,safety,except,exception,3361,"cept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3469,safety,except,exception,3469,"nt feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3525,safety,except,excepts,3525,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3617,safety,except,excepts,3617,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3693,safety,except,exception,3693,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3801,safety,except,exception,3801,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3858,safety,except,excepts,3858,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:945,security,sign,signal,945,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:78,testability,test,test,78,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:243,testability,trace,trace,243,"Floating point exception in TPad (part 3); ## Describe the bug. Crash. ```. [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1246,testability,test,test,1246," of all threads:. ===========================================================. gdb.printing.register_pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1590,testability,trace,trace,1590,"optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2031,testability,test,test,2031,"mized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1347,usability,hint,hint,1347,"pretty_printer(gdb.current_objfile(),. #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1391,usability,help,help,1391,"00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc. entry=0x7ffeea3c7360, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31. #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:1666,usability,help,help,1666,"TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408. #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646. #4 <signal handler called>. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2127,usability,behavi,behavior,2127,"22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv._",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:2394,usability,person,personal,2394," asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=. 0x7ffeea3c9dc0: 0, yb=. 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108. #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87. ===========================================================. ```. ## Expected behavior. no FPE. ## To Reproduce. Code. ```. #include <TCanvas.h>. #include <TPad.h>. #include <TBox.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3456,usability,clear,clear,3456,"ple.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/issues/6449:3788,usability,clear,clear,3788,"unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails. // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works. C->cd();. Double_t w=20, h=20, xl=0, yb=20;. TBox* o=new TBox();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. c->PlaceBox(o,w,h,xl,yb);. return 0;. }. ```. ## Setup. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6449
https://github.com/root-project/root/pull/6452:532,safety,reme,remember,532,"[RF] Fix root-project/root#6408.; Fix root-project/root#6408. Here, RooFit is bitten by a dangerous `FIXME` that wasn't fixed, see this:. https://github.com/root-project/root/blob/ee4e822e3413938b740850db68ab2221fd19744d/tree/tree/src/TBranch.cxx#L477-L499. What happens is that RooFit imports stuff from a Tree. To not disturb that tree, @pcanal suggested to clone it, and loop through it:. ```c++. std::unique_ptr<TTree> tClone(static_cast<TTree*>(t->Clone()));. tClone->SetDirectory(t->GetDirectory());. ```. For reasons I don't remember, I was instructed to set the directory of the clone to the original directory of the tree. That now leads to a crash, because the cloned Tree closes the input file! I could work around the crash by instead using this:. ```c++. auto deleter = [](TTree* tree){tree->SetDirectory(nullptr); delete tree;};. std::unique_ptr<TTree, decltype(deleter)> tClone(static_cast<TTree*>(t->Clone()), deleter);. tClone->SetDirectory(t->GetDirectory());. ```. But the `FIXME` might need a fix, though.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6452
https://github.com/root-project/root/pull/6452:694,safety,input,input,694,"[RF] Fix root-project/root#6408.; Fix root-project/root#6408. Here, RooFit is bitten by a dangerous `FIXME` that wasn't fixed, see this:. https://github.com/root-project/root/blob/ee4e822e3413938b740850db68ab2221fd19744d/tree/tree/src/TBranch.cxx#L477-L499. What happens is that RooFit imports stuff from a Tree. To not disturb that tree, @pcanal suggested to clone it, and loop through it:. ```c++. std::unique_ptr<TTree> tClone(static_cast<TTree*>(t->Clone()));. tClone->SetDirectory(t->GetDirectory());. ```. For reasons I don't remember, I was instructed to set the directory of the clone to the original directory of the tree. That now leads to a crash, because the cloned Tree closes the input file! I could work around the crash by instead using this:. ```c++. auto deleter = [](TTree* tree){tree->SetDirectory(nullptr); delete tree;};. std::unique_ptr<TTree, decltype(deleter)> tClone(static_cast<TTree*>(t->Clone()), deleter);. tClone->SetDirectory(t->GetDirectory());. ```. But the `FIXME` might need a fix, though.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6452
https://github.com/root-project/root/pull/6452:683,usability,close,closes,683,"[RF] Fix root-project/root#6408.; Fix root-project/root#6408. Here, RooFit is bitten by a dangerous `FIXME` that wasn't fixed, see this:. https://github.com/root-project/root/blob/ee4e822e3413938b740850db68ab2221fd19744d/tree/tree/src/TBranch.cxx#L477-L499. What happens is that RooFit imports stuff from a Tree. To not disturb that tree, @pcanal suggested to clone it, and loop through it:. ```c++. std::unique_ptr<TTree> tClone(static_cast<TTree*>(t->Clone()));. tClone->SetDirectory(t->GetDirectory());. ```. For reasons I don't remember, I was instructed to set the directory of the clone to the original directory of the tree. That now leads to a crash, because the cloned Tree closes the input file! I could work around the crash by instead using this:. ```c++. auto deleter = [](TTree* tree){tree->SetDirectory(nullptr); delete tree;};. std::unique_ptr<TTree, decltype(deleter)> tClone(static_cast<TTree*>(t->Clone()), deleter);. tClone->SetDirectory(t->GetDirectory());. ```. But the `FIXME` might need a fix, though.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6452
https://github.com/root-project/root/pull/6452:694,usability,input,input,694,"[RF] Fix root-project/root#6408.; Fix root-project/root#6408. Here, RooFit is bitten by a dangerous `FIXME` that wasn't fixed, see this:. https://github.com/root-project/root/blob/ee4e822e3413938b740850db68ab2221fd19744d/tree/tree/src/TBranch.cxx#L477-L499. What happens is that RooFit imports stuff from a Tree. To not disturb that tree, @pcanal suggested to clone it, and loop through it:. ```c++. std::unique_ptr<TTree> tClone(static_cast<TTree*>(t->Clone()));. tClone->SetDirectory(t->GetDirectory());. ```. For reasons I don't remember, I was instructed to set the directory of the clone to the original directory of the tree. That now leads to a crash, because the cloned Tree closes the input file! I could work around the crash by instead using this:. ```c++. auto deleter = [](TTree* tree){tree->SetDirectory(nullptr); delete tree;};. std::unique_ptr<TTree, decltype(deleter)> tClone(static_cast<TTree*>(t->Clone()), deleter);. tClone->SetDirectory(t->GetDirectory());. ```. But the `FIXME` might need a fix, though.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6452
https://github.com/root-project/root/issues/6453:325,deployability,stack,stack,325,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:573,deployability,Stack,StackTrace,573,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1757,deployability,stack,stack,1757,"m /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1379,energy efficiency,optim,optimized,1379,"=============================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1401,energy efficiency,optim,optimized,1401,"=======. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:2420,energy efficiency,optim,optimized,2420,"pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetS",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:2442,energy efficiency,optim,optimized,2442,"=================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1689,integrability,sub,submit,1689," 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnva",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1379,performance,optimiz,optimized,1379,"=============================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1401,performance,optimiz,optimized,1401,"=======. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:2420,performance,optimiz,optimized,2420,"pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetS",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:2442,performance,optimiz,optimized,2442,"=================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:96,safety,test,test,96,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1420,safety,test,test,1420,"007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<op",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:2462,safety,test,test,2462,"================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:862,security,sign,signal,862,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:96,testability,test,test,96,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:331,testability,trace,trace,331,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1420,testability,test,test,1420,"007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<op",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1763,testability,trace,trace,1763,"fs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:2462,testability,test,test,2462,"================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:3015,testability,context,context,3015," the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:44,usability,Close,Close,44,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:917,usability,Close,Close,917,"Potential null pointer dereference in TPad::Close; ## Describe the bug. Crash. ```. [@lxplus795 test]$ ./pad6.exe . Warning in <UnknownClass::SetDisplay>: DISPLAY not set, setting it to . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007fc0d7d5e46c in waitpid () from /lib64/libc.so.6. #1 0x00007fc0d7cdbf62 in do_system () from /lib64/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1520,usability,hint,hint,1520,"4/libc.so.6. #2 0x00007fc0d99070bc in TUnixSystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1564,usability,help,help,1564,"ystem::StackTrace() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #3 0x00007fc0d99046d5 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1839,usability,help,help,1839,"/lib/libCore.so. #4 <signal handler called>. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:1958,usability,Close,Close,1958,"ies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at test/pad6.cxx:9. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:2557,usability,behavi,behavior,2557," the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:3046,usability,Close,Close,3046," the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:3112,usability,Clear,ClearPadSave,3112," the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6453:3355,usability,Clear,ClearPadSave,3355," the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so. #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9. ===========================================================. ```. ## Expected behavior. No crash. ## To Reproduce. Code . ```. #include <TCanvas.h>. int main(int argc, char **argv) {. TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);. C->cd();. TPad* c= new TPad();. c->SetPad(0,0,1,1);. c->cd(1);. delete c;. delete C;. return 0;. }. ```. Compile. ```. g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g. ```. Run. ```. ./pad6. ```. ## Setup. EPEL ROOT 62202/gcc485/CentOS7. ROOT night buil/gcc10/lxplus. . ## Additional context. Possible fix in Tpad::Close. Replace. ```. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. ```. with. ```. if (fCanvas). {. if (fCanvas->GetPadSave() == this). fCanvas->ClearPadSave();. if (fCanvas->GetSelectedPad() == this). fCanvas->SetSelectedPad(0);. if (fCanvas->GetClickSelectedPad() == this). fCanvas->SetClickSelectedPad(0);. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6453
https://github.com/root-project/root/issues/6454:454,availability,error,error,454,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:536,availability,error,error,536,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1410,availability,error,error,1410,"ithub.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/ext",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2227,availability,error,error,2227,tr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary d,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2544,availability,error,error,2544,/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3634,availability,error,error,3634,"<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4516,availability,error,error,4516,"nalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5717,availability,error,error,5717,"ect) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6623,availability,error,error,6623,"0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7866,availability,error,error,7866," desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8793,availability,error,error,8793,"4-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9614,availability,Error,Error,9614,"pp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9650,availability,Error,Error,9650,"jects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9888,availability,error,error,9888,"b/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. -----------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10096,availability,error,error,10096,"ote: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/kraszn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10488,availability,error,error,10488,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11046,availability,error,error,11046,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11124,availability,error,error,11124,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5,deployability,fail,fails,5,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:172,deployability,version,version,172,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:206,deployability,version,version,206,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1132,deployability,instal,install,1132,"LAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1169,deployability,Instal,InstallArea,1169,"sion of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1286,deployability,instal,install,1286,"es `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1323,deployability,Instal,InstallArea,1323,"plication dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1585,deployability,build,build,1585,"----------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<cla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1600,deployability,build,build,1600,"-------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1949,deployability,instal,install,1949, [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1986,deployability,Instal,InstallArea,1986,libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/in,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2103,deployability,instal,install,2103,AS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:96,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2140,deployability,Instal,InstallArea,2140,isBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2420,deployability,instal,install,2420,d expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clan,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2457,deployability,Instal,InstallArea,2457,bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2723,deployability,instal,install,2723,ock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2760,deployability,Instal,InstallArea,2760,(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2990,deployability,instal,install,2990,"rea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CS",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3027,deployability,Instal,InstallArea,3027,"boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3356,deployability,instal,install,3356,"NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3393,deployability,Instal,InstallArea,3393,"w/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3510,deployability,instal,install,3510,"t_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3547,deployability,Instal,InstallArea,3547,"pected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3809,deployability,build,build,3809,"/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3824,deployability,build,build,3824,"il/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4238,deployability,instal,install,4238,"yload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4275,deployability,Instal,InstallArea,4275,"ss.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4392,deployability,instal,install,4392,"tallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4429,deployability,Instal,InstallArea,4429,"lude/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/extern",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4581,deployability,build,build,4581,"t/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4596,deployability,build,build,4596,"/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/instal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4892,deployability,instal,install,4892,"ed from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4929,deployability,Instal,InstallArea,4929,"omic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5085,deployability,build,build,5085,"uded from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5100,deployability,build,build,5100,"Library dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5439,deployability,instal,install,5439,"6_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5476,deployability,Instal,InstallArea,5476,"smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5593,deployability,instal,install,5593,"uild/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_pt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5630,deployability,Instal,InstallArea,5630,"stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expect",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5895,deployability,build,build,5895,"l/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5910,deployability,build,build,5910,"xternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6345,deployability,instal,install,6345,"ed from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_stor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6382,deployability,Instal,InstallArea,6382,"d from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6499,deployability,instal,install,6499,"clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6536,deployability,Instal,InstallArea,6536,"p:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6688,deployability,build,build,6688,"r/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6703,deployability,build,build,6703,"p:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/k",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7020,deployability,instal,install,7020,"ic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7057,deployability,Instal,InstallArea,7057,"store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7213,deployability,build,build,7213,"y dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7228,deployability,build,build,7228,"yload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7588,deployability,instal,install,7588,"rt_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7625,deployability,Instal,InstallArea,7625,"xpected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7742,deployability,instal,install,7742,"atomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7779,deployability,Instal,InstallArea,7779,"cro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8056,deployability,build,build,8056,"stallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, _",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8071,deployability,build,build,8071,"4-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8515,deployability,instal,install,8515,":. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8552,deployability,Instal,InstallArea,8552,"a/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8669,deployability,instal,install,8669,"oost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8706,deployability,Instal,InstallArea,8706,"a/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8858,deployability,build,build,8858,":33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WAR",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8873,deployability,build,build,8873,"ected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9199,deployability,instal,install,9199,"ect, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9236,deployability,Instal,InstallArea,9236,"ect, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaratio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9392,deployability,build,build,9392,"ary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9407,deployability,build,build,9407," In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on L",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:240,energy efficiency,load,load,240,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11217,energy efficiency,load,load,11217,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:172,integrability,version,version,172,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:206,integrability,version,version,206,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:172,modifiability,version,version,172,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:206,modifiability,version,version,206,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3650,modifiability,paramet,parameter,3650,") BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5733,modifiability,paramet,parameter,5733,"load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7882,modifiability,paramet,parameter,7882,"_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/clin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10103,modifiability,variab,variable,10103,"anded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:240,performance,load,load,240,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:454,performance,error,error,454,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:536,performance,error,error,536,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1410,performance,error,error,1410,"ithub.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/ext",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2227,performance,error,error,2227,tr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary d,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2544,performance,error,error,2544,/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3634,performance,error,error,3634,"<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4516,performance,error,error,4516,"nalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5717,performance,error,error,5717,"ect) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6623,performance,error,error,6623,"0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7866,performance,error,error,7866," desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8793,performance,error,error,8793,"4-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9614,performance,Error,Error,9614,"pp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9650,performance,Error,Error,9650,"jects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9700,performance,content,content,9700,"0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9888,performance,error,error,9888,"b/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. -----------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10096,performance,error,error,10096,"ote: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/kraszn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10488,performance,error,error,10488,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11046,performance,error,error,11046,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11124,performance,error,error,11124,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11217,performance,load,load,11217,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5,reliability,fail,fails,5,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:322,safety,test,test,322,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:454,safety,error,error,454,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:536,safety,error,error,536,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1410,safety,error,error,1410,"ithub.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/ext",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2227,safety,error,error,2227,tr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary d,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2544,safety,error,error,2544,/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3634,safety,error,error,3634,"<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4516,safety,error,error,4516,"nalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5717,safety,error,error,5717,"ect) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6623,safety,error,error,6623,"0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7866,safety,error,error,7866," desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8793,safety,error,error,8793,"4-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9614,safety,Error,Error,9614,"pp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9650,safety,Error,Error,9650,"jects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9888,safety,error,error,9888,"b/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. -----------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10096,safety,error,error,10096,"ote: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/kraszn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10488,safety,error,error,10488,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11046,safety,error,error,11046,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11124,safety,error,error,11124,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:691,security,Team,Team,691,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10643,security,Team,Team,10643,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:322,testability,test,test,322,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:348,testability,simpl,simplify,348,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:379,testability,simpl,simple,379,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11372,testability,context,context,11372,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:348,usability,simpl,simplify,348,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:379,usability,simpl,simple,379,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:454,usability,error,error,454,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:536,usability,error,error,536,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:825,usability,help,help,825,"ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS; ## Describe the bug. I just ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1089,usability,User,Users,1089,"ran into an issue while trying to use the ATLAS analysis software on the latest version of macOS, with the latest version of Xcode. While trying to load the dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1243,usability,User,Users,1243,"he dictionary of a class whose header includes `<boost/shared_ptr.hpp>`, my test application dies. To simplify things a bit, I put a simple reproducer under: https://github.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1410,usability,error,error,1410,"ithub.com/krasznaa/root-boost-dictionary-error With which I see the following:. ```. [bash][eowyn-1]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/ext",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1542,usability,User,Users,1542,"oot. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:1906,usability,User,Users,1906,--------------------------------------. root [0] MyClass c;. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2060,usability,User,Users,2060,:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-o,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2227,usability,error,error,2227,tr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary d,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2377,usability,User,Users,2377,t_ptr/shared_ptr.hpp:1072:31: error: expected expression. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExte,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2544,usability,error,error,2544,/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:83:73: note: expanded from macro 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2680,usability,User,Users,2680,o 'atomic_is_lock_free'. #define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj))). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<cl,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:2947,usability,User,Users,2947,nstall/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:81: error: expected ';' at end of declaration. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(objec,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3313,usability,User,Users,3313,"ree( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. ;. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3467,usability,User,Users,3467,"86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1072:82: error: expected unqualified-id. template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3634,usability,error,error,3634,"<T> const * /*p*/ ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:3766,usability,User,Users,3766,"ea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/detail/sp_noexcept.hpp:28:29: note: expanded from macro 'BOOST_SP_NOEXCEPT'. # define BOOST_SP_NOEXCEPT BOOST_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/config/detail/suffix.hpp:965:26: note: expanded from macro 'BOOST_NOEXCEPT'. # define BOOST_NOEXCEPT noexcept. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4195,usability,User,Users,4195,"ile included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4349,usability,User,Users,4349,"als/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4516,usability,error,error,4516,"nalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4538,usability,User,Users,4538,"2.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:4849,usability,User,Users,4849,"0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5042,usability,User,Users,5042,"#define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5396,usability,User,Users,5396,"/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5550,usability,User,Users,5550,"ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:55: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5717,usability,error,error,5717,"ect) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:5852,usability,User,Users,5852,"krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1077:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:134:46: note: expanded from macro 'atomic_load'. #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6302,usability,User,Users,6302,"ibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6456,usability,User,Users,6456,"Externals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6623,usability,error,error,6623,"0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6645,usability,User,Users,6645,"-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected parameter declarator. template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:6977,usability,User,Users,6977,"nded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7170,usability,User,Users,7170,"CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7545,usability,User,Users,7545,"x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7699,usability,User,Users,7699,"-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:75: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:7866,usability,error,error,7866," desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8013,usability,User,Users,8013,"als/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1088:24: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:131:57: note: expanded from macro 'atomic_store'. #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST). ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desire",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8472,usability,User,Users,8472,"load:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8626,usability,User,Users,8626,"allArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8793,usability,error,error,8793,"4-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:8815,usability,User,Users,8815,"include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected parameter declarator. template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT. ^. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9156,usability,User,Users,9156,"tomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9349,usability,User,Users,9349," In file included from libMyLibrary dictionary payload:5:. In file included from ./MyClass.h:6:. In file included from /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/shared_ptr.hpp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Exp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9614,usability,Error,Error,9614,"pp:17:. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9650,usability,Error,Error,9650,"jects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: error: expected ')'. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:9888,usability,error,error,9888,"b/clang/5.0.0/include/stdatomic.h:137:81: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. <built-in>:16:26: note: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. -----------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10096,usability,error,error,10096,"ote: expanded from here. #define __ATOMIC_SEQ_CST 5. ^. /Users/krasznaa/ATLAS/sw/projects/externals/install/AnalysisBaseExternals/22.0.0/InstallArea/x86_64-mac1015-clang12-opt/include/boost/smart_ptr/shared_ptr.hpp:1099:33: note: to match this '('. /Users/krasznaa/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/kraszn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10358,usability,behavi,behavior,10358,"a/ATLAS/sw/projects/externals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## A",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10488,usability,error,error,10488,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:10782,usability,help,help,10782,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11046,usability,error,error,11046,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11124,usability,error,error,11124,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6454:11200,usability,interact,interactive,11200,"ernals/build/src/ROOT-build/etc/cling/lib/clang/5.0.0/include/stdatomic.h:137:63: note: expanded from macro 'atomic_exchange'. #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST). ^. Error in <TInterpreter::AutoParse>: Error parsing payload code for class MyClass with content:. #line 1 ""libMyLibrary dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H. // Inline headers. #include ""MyClass.h"". #undef _BACKWARD_BACKWARD_WARNING_H. ROOT_prompt_0:1:1: error: must use 'class' tag to refer to type 'MyClass' in this scope. MyClass c;. ^. class . ROOT_prompt_0:1:1: note: class 'MyClass' is hidden by a non-type declaration of 'MyClass' here. ROOT_prompt_0:1:9: error: variable has incomplete type 'MyClass'. MyClass c;. ^. libMyLibrary dictionary forward declarations' payload:5:62: note: forward declaration of 'MyClass'. class __attribute__((annotate(""$clingAutoload$MyClass.h""))) MyClass;. ^. root [1]. ```. ## Expected behavior. When using the same demonstrator code on Linux, everything goes as expected. ```. [bash][Legolas]:root-boost-dictionary-error > root. ------------------------------------------------------------------. | Welcome to ROOT 6.22/02 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |. | From tags/v6-22-02@v6-22-02 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] MyClass c;. root [1]. ```. ## To Reproduce. Just take the demonstrator code from https://github.com/krasznaa/root-boost-dictionary-error, tweak its [Makefile](https://github.com/krasznaa/root-boost-dictionary-error/blob/master/Makefile) to work correctly for you, and then try to have interactive ROOT load the dictionary for the `MyClass` type, as I've shown above. ## Setup. - ROOT 6.22/02;. - Boost 1.73.0;. - macOS 10.15.6;. - Xcode 12.0. ## Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6454
https://github.com/root-project/root/issues/6455:319,energy efficiency,optim,optimization,319,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:529,energy efficiency,CPU,CPU,529,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:37,integrability,event,event,37,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:205,integrability,event,event,205,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:285,integrability,event,event,285,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:351,integrability,event,event,351,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:247,interoperability,specif,specified,247,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:307,performance,performance optim,performance optimization,307,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:430,performance,perform,performing,430,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:529,performance,CPU,CPU,529,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:17,reliability,doe,does,17,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:108,usability,clear,clear,108,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:307,usability,perform,performance,307,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/issues/6455:430,usability,perform,performing,430,"[DF] RDataSource does not early-quit event loops when all Ranges are exhausted; ## Bug description. <!--. A clear and concise description of what you expected to happen. -->. When running over TTrees, RDF event loops that exhaust all entry ranges specified via `df.Range(..)` quit the event loop early as a performance optimization. RDataSource-based event loops do not, and instead run until the end of the dataset in all cases (performing no processing after Ranges have been exhausted). This yields correct results but wastes CPU cycles.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6455
https://github.com/root-project/root/pull/6456:16,integrability,event,event,16,[DF] Early-quit event loop for RDataSource+Range ; RDataSource event loops did not check whether Ranges had been exhausted. and always looped until the end of the dataset in all cases. Event processing was a no-op after Ranges had been exhausted so results. were correct but runtimes were longer than necessary. This fixes #6455.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6456
https://github.com/root-project/root/pull/6456:63,integrability,event,event,63,[DF] Early-quit event loop for RDataSource+Range ; RDataSource event loops did not check whether Ranges had been exhausted. and always looped until the end of the dataset in all cases. Event processing was a no-op after Ranges had been exhausted so results. were correct but runtimes were longer than necessary. This fixes #6455.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6456
https://github.com/root-project/root/pull/6456:185,integrability,Event,Event,185,[DF] Early-quit event loop for RDataSource+Range ; RDataSource event loops did not check whether Ranges had been exhausted. and always looped until the end of the dataset in all cases. Event processing was a no-op after Ranges had been exhausted so results. were correct but runtimes were longer than necessary. This fixes #6455.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6456
https://github.com/root-project/root/pull/6457:16,integrability,event,event,16,[DF] Early-quit event loop for RDataSource+Range (v6.22); RDataSource event loops did not check whether Ranges had been exhausted. and always looped until the end of the dataset in all cases. Event processing was a no-op after Ranges had been exhausted so results. were correct but runtimes were longer than necessary. This fixes #6455.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6457
https://github.com/root-project/root/pull/6457:70,integrability,event,event,70,[DF] Early-quit event loop for RDataSource+Range (v6.22); RDataSource event loops did not check whether Ranges had been exhausted. and always looped until the end of the dataset in all cases. Event processing was a no-op after Ranges had been exhausted so results. were correct but runtimes were longer than necessary. This fixes #6455.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6457
https://github.com/root-project/root/pull/6457:192,integrability,Event,Event,192,[DF] Early-quit event loop for RDataSource+Range (v6.22); RDataSource event loops did not check whether Ranges had been exhausted. and always looped until the end of the dataset in all cases. Event processing was a no-op after Ranges had been exhausted so results. were correct but runtimes were longer than necessary. This fixes #6455.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6457
https://github.com/root-project/root/pull/6458:237,deployability,Automat,Automatic,237,"[DF] Use RRawFile in CSV data source; Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix). - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6458
https://github.com/root-project/root/pull/6458:55,performance,I/O,I/O,55,"[DF] Use RRawFile in CSV data source; Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix). - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6458
https://github.com/root-project/root/pull/6458:247,safety,detect,detection,247,"[DF] Use RRawFile in CSV data source; Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix). - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6458
https://github.com/root-project/root/pull/6458:380,safety,input,input,380,"[DF] Use RRawFile in CSV data source; Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix). - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6458
https://github.com/root-project/root/pull/6458:247,security,detect,detection,247,"[DF] Use RRawFile in CSV data source; Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix). - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6458
https://github.com/root-project/root/pull/6458:237,testability,Automat,Automatic,237,"[DF] Use RRawFile in CSV data source; Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix). - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6458
https://github.com/root-project/root/pull/6458:380,usability,input,input,380,"[DF] Use RRawFile in CSV data source; Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix). - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6458
https://github.com/root-project/root/pull/6459:0,safety,Avoid,Avoid,0,Avoid null pointer dereference.; Avoid null pointer dereference. Fixes crash in the codes like. ```. TPad* c= new TPad();. c->DivideSquare(4);. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6459
https://github.com/root-project/root/pull/6459:33,safety,Avoid,Avoid,33,Avoid null pointer dereference.; Avoid null pointer dereference. Fixes crash in the codes like. ```. TPad* c= new TPad();. c->DivideSquare(4);. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6459
https://github.com/root-project/root/pull/6462:91,energy efficiency,draw,drawing,91,[TMVA] Provide some fixes for TMVA MulticlassGui; This PR provides two fixes for the plots drawing in the multiclass GUI as reported in . https://root-forum.cern.ch/t/some-bugs-in-tmva-multiclassgui/41114. - fix clicking of plots by using a TH1 for the frame instead of a TH2. - fix the display of ROC curve 1vs all and 1 vs 1 . The bug was due to a wrong parsing of t he classname.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6462
https://github.com/root-project/root/pull/6463:22,reliability,doe,does,22,Protection if fCanvas does not exist; fix https://github.com/root-project/root/issues/6453,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6463
https://github.com/root-project/root/pull/6464:0,safety,Avoid,Avoid,0,Avoid null pointer dereference; Avoid null pointer dereference. Tag @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6464
https://github.com/root-project/root/pull/6464:32,safety,Avoid,Avoid,32,Avoid null pointer dereference; Avoid null pointer dereference. Tag @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6464
https://github.com/root-project/root/issues/6465:77,deployability,fail,failing,77,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:217,deployability,build,build,217,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:552,deployability,build,build,552,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:538,integrability,configur,configure,538,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:538,modifiability,configur,configure,538,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:77,reliability,fail,failing,77,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:60,safety,test,test,60,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:640,safety,avoid,avoid,640,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:5,security,sign,signed-char,5,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:538,security,configur,configure,538,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:55,testability,unit,unit,55,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:60,testability,test,test,60,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/issues/6465:257,usability,interact,interactive,257,"ROOT signed-char convertion issue on AARCH64; Hi,. One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this. 1. aarch64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) 255. ``` . 2. amd64. ```. root [0] static_cast<int>(static_cast<char>(-1)). (int) -1. ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6465
https://github.com/root-project/root/pull/6466:243,deployability,Build,Building,243,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:372,deployability,build,builds-no-,372,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:1197,deployability,build,builds-no-,1197,ion flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -fPIC -std=c++14 -o CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o -c /home/oksana/CERN_sources/root/roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:510,energy efficiency,core,core,510,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:557,energy efficiency,core,core,557,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:613,energy efficiency,core,core,613,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:663,energy efficiency,core,core,663,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:716,energy efficiency,core,core,716,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:768,energy efficiency,core,core,768,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:817,energy efficiency,core,core,817,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:863,energy efficiency,core,core,863,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:910,energy efficiency,core,core,910,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:957,energy efficiency,core,core,957,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:1004,energy efficiency,core,core,1004,"] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-type -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:1050,energy efficiency,core,core,1050,"DARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:1097,energy efficiency,core,core,1097,"eFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -fPIC -std=c+",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:1150,energy efficiency,core,core,1150,"oot/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -fPIC -std=c++14 -o CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyMod",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:1407,energy efficiency,core,core,1407,"a/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -fPIC -std=c++14 -o CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o -c /home/oksana/CERN_sources/root/roofit/roofitcore/src/RooAbsMCStudyModule.cxx. ```. For roottest/rootbench and etc., could be useful next output:. ```. ~ root-config --cxxstandard. 14. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:1683,energy efficiency,core,core,1683,"a/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -fPIC -std=c++14 -o CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o -c /home/oksana/CERN_sources/root/roofit/roofitcore/src/RooAbsMCStudyModule.cxx. ```. For roottest/rootbench and etc., could be useful next output:. ```. ~ root-config --cxxstandard. 14. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:18,interoperability,Standard,Standard,18,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/pull/6466:69,interoperability,standard,standard,69,"[cmake] Setup C++ Standard flags from CMAKE_CXX_STANDARD and add C++ standard to root-config/RootUseFile.cmake; Fixes: https://github.com/root-project/root/issues/6384. I see during ""random"" TU compilation flags are setup properly:. ```[ 78%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/RooAbsMCStudyModule.cxx.o. cd /home/oksana/CERN_sources/root/builds-no-cxx14/roofit/roofitcore && /usr/bin/c++ -I/home/oksana/CERN_sources/root/roofit/roofitcore/inc -I/home/oksana/CERN_sources/root/core/unix/inc -I/home/oksana/CERN_sources/root/core/foundation/v7/inc -I/home/oksana/CERN_sources/root/core/base/v7/inc -I/home/oksana/CERN_sources/root/core/clingutils/inc -I/home/oksana/CERN_sources/root/core/textinput/inc -I/home/oksana/CERN_sources/root/core/thread/inc -I/home/oksana/CERN_sources/root/core/zip/inc -I/home/oksana/CERN_sources/root/core/rint/inc -I/home/oksana/CERN_sources/root/core/clib/inc -I/home/oksana/CERN_sources/root/core/meta/inc -I/home/oksana/CERN_sources/root/core/gui/inc -I/home/oksana/CERN_sources/root/core/cont/inc -I/home/oksana/CERN_sources/root/core/foundation/inc -I/home/oksana/CERN_sources/root/core/base/inc -I/home/oksana/CERN_sources/root/builds-no-cxx14/ginclude -I/home/oksana/CERN_sources/root/hist/hist/inc -I/home/oksana/CERN_sources/root/math/mathcore/v7/inc -I/home/oksana/CERN_sources/root/math/mathcore/inc -I/home/oksana/CERN_sources/root/core/imt/inc -I/home/oksana/CERN_sources/root/math/matrix/inc -I/home/oksana/CERN_sources/root/graf2d/graf/inc -I/home/oksana/CERN_sources/root/io/io/v7/inc -I/home/oksana/CERN_sources/root/io/io/inc -I/home/oksana/CERN_sources/root/io/io/res -I/home/oksana/CERN_sources/root/core/clib/res -I/usr/include/freetype2 -I/home/oksana/CERN_sources/root/tree/tree/inc -I/home/oksana/CERN_sources/root/math/minuit/inc -I/home/oksana/CERN_sources/root/math/foam/inc -I/home/oksana/CERN_sources/root/math/smatrix/inc -I/home/oksana/CERN_sources/root/net/net/inc -Wno-implicit-fallthrough -Wno-noexcept-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6466
https://github.com/root-project/root/issues/6467:512,availability,error,error,512,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:908,availability,avail,available,908,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:122,deployability,instal,install,122,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:463,deployability,instal,installed,463,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:609,deployability,modul,module,609,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:218,integrability,wrap,wrapper,218,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:518,integrability,messag,message,518,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:218,interoperability,wrapper,wrapper,218,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:518,interoperability,messag,message,518,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:609,modifiability,modul,module,609,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:512,performance,error,error,512,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:908,reliability,availab,available,908,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:512,safety,error,error,512,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:609,safety,modul,module,609,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:908,safety,avail,available,908,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:908,security,availab,available,908,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:533,testability,Trace,Traceback,533,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:512,usability,error,error,512,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:649,usability,User,Users,649,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6467:661,usability,Document,Documents,661,"TChain issue in PyROOT with conda; This issue only occurs when the conda environment is activated. I followed the default install method with `conda create -c conda-forge --name <my-environment> root`. I want to use a wrapper class for TChain called [Ntuple](https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py). https://github.com/Allen319/Ntuple/blob/master/python/Ntuple.py. But I cannot initialize this class with conda environment (If I use ROOT installed from source codes, it works well). The error message:. ```. Traceback (most recent call last):. File ""./example_ntuple.py"", line 9, in <module>. n = Ntuple(""DataTree""). File ""/Users/allen/Documents/GitHub/tuple/python/Ntuple.py"", line 29, in __init__. TChain.__init__(self, name). TypeError: none of the 2 overloaded methods succeeded. Full details:. TChain::TChain() =>. TypeError: takes at most 0 arguments (1 given). no constructor available for 'TChain'. ```. It is strange that there is no other overloaded method with 2 args",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6467
https://github.com/root-project/root/issues/6468:16,availability,fault,faults,16,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:296,availability,fault,faults,296,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4581,availability,error,error,4581," from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:670,deployability,fail,failing,670,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:710,deployability,build,build,710,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1450,deployability,build,build,1450," although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x0000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1828,deployability,build,build,1828,"es/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUnixSystem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:2352,deployability,stack,stack,2352," the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so. #5 <signal handler called> . #6 0x00007fd991d6ae29 in CPyCppyy::pp_get(CPyCppyy::CPPDataMember*, CPyCppyy::CPPInstance*, _object*) () from /usr/lib64/python3.8/site-packages/libcppyy3_8.cpython-38-x86_64-linux-gnu.so. #7 0x00007fd99fb9ad27 in _PyObject_GenericGetAttrWithDict () from /lib64/libpython3.8.so.1.0. #8 0x00007fd99fb8e713 in _PyEval_EvalFrameDefault () from /lib64/libpython3.8.so.1.0. #9 0x00007fd99fb8cd54 in _PyEval_EvalCodeWithName () from /lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:2602,deployability,Stack,StackTrace,2602,"ry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so. #5 <signal handler called> . #6 0x00007fd991d6ae29 in CPyCppyy::pp_get(CPyCppyy::CPPDataMember*, CPyCppyy::CPPInstance*, _object*) () from /usr/lib64/python3.8/site-packages/libcppyy3_8.cpython-38-x86_64-linux-gnu.so. #7 0x00007fd99fb9ad27 in _PyObject_GenericGetAttrWithDict () from /lib64/libpython3.8.so.1.0. #8 0x00007fd99fb8e713 in _PyEval_EvalFrameDefault () from /lib64/libpython3.8.so.1.0. #9 0x00007fd99fb8cd54 in _PyEval_EvalCodeWithName () from /lib64/libpython3.8.so.1.0. #10 0x00007fd99fc07e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0. #11 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:5911,deployability,stack,stack,5911,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6062,deployability,instal,installed,6062,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6128,deployability,version,version,6128,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6405,deployability,automat,automatic,6405,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6711,deployability,updat,update,6711,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:16,energy efficiency,fault,faults,16,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:296,energy efficiency,fault,faults,296,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1444,energy efficiency,Load,Load,1444,"arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1822,energy efficiency,Load,Load,1822,"oot/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUni",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:91,integrability,event,event,91,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:253,integrability,sub,subsequent,253,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:876,integrability,event,event,876,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1018,integrability,pub,public,1018,"s when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1564,integrability,event,event,1564,"cessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1942,integrability,event,event,1942,"we_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so. #5 <signal handler called> . #6 0x00007fd991d6ae29",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6128,integrability,version,version,6128,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6415,integrability,schema,schema,6415,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4502,interoperability,share,share,4502,"rom /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6192,interoperability,platform,platforms,6192,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6287,interoperability,format,format,6287,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6327,interoperability,format,format,6327,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6522,interoperability,compatib,compatible,6522,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1360,modifiability,scal,scalar,1360,"hAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:3060,modifiability,pac,packages,3060,". ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so. #5 <signal handler called> . #6 0x00007fd991d6ae29 in CPyCppyy::pp_get(CPyCppyy::CPPDataMember*, CPyCppyy::CPPInstance*, _object*) () from /usr/lib64/python3.8/site-packages/libcppyy3_8.cpython-38-x86_64-linux-gnu.so. #7 0x00007fd99fb9ad27 in _PyObject_GenericGetAttrWithDict () from /lib64/libpython3.8.so.1.0. #8 0x00007fd99fb8e713 in _PyEval_EvalFrameDefault () from /lib64/libpython3.8.so.1.0. #9 0x00007fd99fb8cd54 in _PyEval_EvalCodeWithName () from /lib64/libpython3.8.so.1.0. #10 0x00007fd99fc07e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0. #11 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6128,modifiability,version,version,6128,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:16,performance,fault,faults,16,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:218,performance,time,time,218,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:296,performance,fault,faults,296,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1444,performance,Load,Load,1444,"arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1822,performance,Load,Load,1822,"oot/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUni",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4348,performance,memor,memory,4348,"/lib64/libpython3.8.so.1.0. #10 0x00007fd99fc07e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0. #11 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4459,performance,memor,memory,4459," 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4574,performance,memor,memory,4574,"_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4581,performance,error,error,4581," from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:16,reliability,fault,faults,16,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:296,reliability,fault,faults,296,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:670,reliability,fail,failing,670,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1774,reliability,doe,does,1774,": [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:16,safety,fault,faults,16,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:296,safety,fault,faults,296,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:480,safety,test,tested,480,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4581,safety,error,error,4581," from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4587,safety,detect,detector,4587,"lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6711,safety,updat,update,6711,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:28,security,access,accessing,28,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:170,security,Access,Accessing,170,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:264,security,access,accesses,264,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:565,security,access,accessible,565,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1121,security,access,access,1121,"he members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.998932",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:1719,security,access,access,1719,"te a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::H",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:2899,security,sign,signal,2899,"= ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so. #5 <signal handler called> . #6 0x00007fd991d6ae29 in CPyCppyy::pp_get(CPyCppyy::CPPDataMember*, CPyCppyy::CPPInstance*, _object*) () from /usr/lib64/python3.8/site-packages/libcppyy3_8.cpython-38-x86_64-linux-gnu.so. #7 0x00007fd99fb9ad27 in _PyObject_GenericGetAttrWithDict () from /lib64/libpython3.8.so.1.0. #8 0x00007fd99fb8e713 in _PyEval_EvalFrameDefault () from /lib64/libpython3.8.so.1.0. #9 0x00007fd99fb8cd54 in _PyEval_EvalCodeWithName () from /lib64/libpython3.8.so.1.0. #10 0x00007fd99fc07e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0. #11 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4317,security,access,access,4317,"yEval_EvalCodeWithName () from /lib64/libpython3.8.so.1.0. #10 0x00007fd99fc07e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0. #11 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4587,security,detect,detector,4587,"lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6630,security,access,access,6630,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6711,security,updat,update,6711,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:480,testability,test,tested,480,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:892,testability,simpl,simple,892,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:2358,testability,trace,trace,2358,"calar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.foo[0]). print (ev.foo[1]). ```. This results in . ```. python breaks.py . 0. 0.9989327176093981 . -0.43476438941434026 . 0.7817962561955079 . 0 . 0.9989327176093981 . *** Break *** segmentation violation. . . . =========================================================== . There was a crash. . This is the entire stack trace of all threads: . =========================================================== . #0 0x00007fd99fe87eca in wait4 () from /lib64/libc.so.6 . #1 0x00007fd99fe03aa7 in do_system () from /lib64/libc.so.6 . #2 0x00007fd9924acda1 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so. #3 0x00007fd991cf9f42 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () from /usr/lib64/root/libcppyy_backend3_8.so.6.22. #4 0x00007fd9924a8749 in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so. #5 <signal handler called> . #6 0x00007fd991d6ae29 in CPyCppyy::pp_get(CPyCppyy::CPPDataMember*, CPyCppyy::CPPInstance*, _object*) () from /usr/lib64/python3.8/site-packages/libcppyy3_8.cpython-38-x86_64-linux-gnu.so. #7 0x00007fd99fb9ad27 in _PyObject_GenericGetAttrWithDict () from /lib64/libpython3.8.so.1.0. #8 0x00007fd99fb8e713 in _PyEval_EvalFrameDefault () from /lib64/libpython3.8.so.1.0. #9 0x00007fd99fb8cd54 in _PyEval_EvalCodeWithName () from /lib64/lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6220,testability,context,context,6220,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6405,testability,automat,automatic,6405,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6583,testability,regress,regression,6583,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:84,usability,custom,custom,84,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:516,usability,behavi,behavior,516,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:662,usability,minim,minimal,662,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:892,usability,simpl,simple,892,"6.22 PyROOT seg faults when accessing array members; ## Describe the bug. I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior. Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: . ```. #ifndef _mwe_event_h. #define _mwe_event_h. #include ""TObject.h"" . #include <array>. class MWEEvent . {. public: . MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly . double get_foo(int i) const { return foo[i]; } . int iev; . double bar; . double foo[2]; . virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);. }; . ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print (ev.iev) . print (ev.bar) . print (ev.get_foo(0)). print (ev.get_foo(1)). ```. But if you try to access the array member directly (as used to work), it does not work:. ```. import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); . t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): . t.GetEntry(i); . print ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4348,usability,memor,memory,4348,"/lib64/libpython3.8.so.1.0. #10 0x00007fd99fc07e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0. #11 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4459,usability,memor,memory,4459," 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 . #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4574,usability,memor,memory,4574,"_obj () from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4581,usability,error,error,4581," from /lib64/libpython3.8.so.1.0. #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0. #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0. #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:4762,usability,Command,Command,4762,". #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0. #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0. #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0. #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6. #19 0x0000564fd09cf07e in _start (). ===========================================================. ```. This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:. ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py . ==774799== Memcheck, a memory error detector. ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6468:6453,usability,prefer,prefer,6453,"or copyright info. ==774799== Command: python breaks.py. ==774799== . 0. 0.9989327176093981. -0.43476438941434026. 0.7817962561955079. 0. 0.9989327176093981. ==774799== Invalid read of size 8. ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02). ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0). ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0). ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd. ==774799== . *** Break *** segmentation violation. ```. ## Setup. ROOT 6.22/02 , Python 3.8.5 . Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts! .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6468
https://github.com/root-project/root/issues/6470:1528,availability,Operat,Operating,1528,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1639,availability,slo,slot,1639,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1354,deployability,build,build,1354,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1509,deployability,version,version,1509,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:256,integrability,sub,subsequent,256,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:267,integrability,sub,subclass,267,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1509,integrability,version,version,1509,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:68,modifiability,inherit,inheritance,68,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:438,modifiability,inherit,inherits,438,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:514,modifiability,inherit,inherits,514,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:607,modifiability,inherit,inherits,607,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1095,modifiability,inherit,inheritance,1095,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1509,modifiability,version,version,1509,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1639,reliability,slo,slot,1639,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1308,safety,input,input,1308,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:279,testability,Simpl,Simple,279,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1396,testability,Simpl,Simple,1396,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1660,testability,context,context,1660,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1689,testability,context,context,1689,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:117,usability,clear,clear,117,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:165,usability,behavi,behavior,165,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:279,usability,Simpl,Simple,279,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:719,usability,behavi,behaviour,719,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:766,usability,behavi,behaviour,766,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:809,usability,behavi,behaviour,809,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:872,usability,behavi,behaviour,872,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:914,usability,behavi,behavior,914,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:932,usability,clear,clear,932,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1163,usability,behavi,behavior,1163,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1308,usability,input,input,1308,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6470:1396,usability,Simpl,Simple,1396,"PyROOT: virtual C++ method overriden in python ignored with further inheritance chain ; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The virtual C++ methods overriden in some python class is ignored in the subsequent subclass. . Simple examples is given in [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). In short:. - C++ class A, . - python class B, that inherits from A and override virtual method from A . - python class C, that inherits from B and override (the same) virual method form A (and B). - python class D, that inherits from B and has empty body . And f one call the method from A, B, C , D . - for A one gets original C++ behaviour (OK). - for B one gets the overriden behaviour (OK). - for C one gets overriden behaviour defined in C (OK). - for D one gets the original C++ behaviour ( that is not OK) . ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. It is expected that D picks up the overriden method from class B, as naturally expected for the inheritance pattern . ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Simple gist is [here] (https://gist.github.com/VanyaBelyaev/fb58efd76b693a7777c9c83a6f43ae15). ## Setup. 1. ROOT version 623/01. 2. Operating system CentOS7, lxplus x86, 64-centos7-gcc9-opt. 3. How you obtained ROOT: `dev3/latest` nightly LCG slot,. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6470
https://github.com/root-project/root/issues/6471:1580,availability,slo,slow,1580,"h it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any prog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:8,deployability,instal,installation,8,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:348,deployability,depend,dependencies,348,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:457,deployability,automat,automated,457,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:528,deployability,resourc,resources,528,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:568,deployability,build,build,568,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:587,deployability,depend,dependencies,587,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:638,deployability,build,build,638,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:668,deployability,depend,dependencies,668,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1227,deployability,modul,modular,1227,"tion time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimiz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1240,deployability,build,build,1240,"ss than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root insta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1316,deployability,instal,installation,1316," and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2238,deployability,instal,installation,2238,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2529,deployability,instal,installation,2529,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2547,deployability,modul,modular,2547,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2639,deployability,modul,modularity,2639,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2856,deployability,build,building,2856,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:522,energy efficiency,cloud,cloud,522,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:528,energy efficiency,resourc,resources,528,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:348,integrability,depend,dependencies,348,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:587,integrability,depend,dependencies,587,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:668,integrability,depend,dependencies,668,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:867,integrability,coupl,couple,867,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1227,integrability,modular,modular,1227,"tion time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimiz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2547,integrability,modular,modular,2547,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2639,integrability,modular,modularity,2639,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:542,interoperability,bind,binder,542,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:731,interoperability,standard,standard,731,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1010,interoperability,format,format,1010,"llation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:348,modifiability,depend,dependencies,348,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:542,modifiability,bind,binder,542,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:587,modifiability,depend,dependencies,587,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:668,modifiability,depend,dependencies,668,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:867,modifiability,coupl,couple,867,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1227,modifiability,modul,modular,1227,"tion time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimiz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2547,modifiability,modul,modular,2547,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2639,modifiability,modul,modularity,2639,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:148,performance,time,time,148,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:236,performance,time,time,236,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:522,performance,cloud resourc,cloud resources,522,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:912,performance,time,time,912,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1623,performance,time,time,1623,"r other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2321,performance,time,time,2321,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2405,performance,time,time,2405,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1580,reliability,slo,slow,1580,"h it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any prog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1889,reliability,doe,doesn,1889,"ace and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2284,reliability,doe,doesn,2284,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:348,safety,depend,dependencies,348,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:467,safety,test,testing,467,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:528,safety,resourc,resources,528,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:587,safety,depend,dependencies,587,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:668,safety,depend,dependencies,668,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1126,safety,compl,complexity,1126,"s of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt abou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1227,safety,modul,modular,1227,"tion time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimiz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2178,safety,test,tests,2178,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2547,safety,modul,modular,2547,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2639,safety,modul,modularity,2639,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1126,security,compl,complexity,1126,"s of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt abou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2503,security,team,team,2503,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:348,testability,depend,dependencies,348,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:457,testability,automat,automated,457,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:467,testability,test,testing,467,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:528,testability,resourc,resources,528,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:587,testability,depend,dependencies,587,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:668,testability,depend,dependencies,668,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:867,testability,coupl,couple,867,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1227,testability,modula,modular,1227,"tion time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimiz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2178,testability,test,tests,2178,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2438,testability,context,context,2438,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2547,testability,modula,modular,2547,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2639,testability,modula,modularity,2639,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:0,usability,Minim,Minimal,0,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:958,usability,minim,minimal,958,"Minimal installation for basic IO; ## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:1492,usability,behavi,behavior,1492,"farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know abou",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2073,usability,document,documentation,2073,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2185,usability,user,user,2185,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2224,usability,minim,minimize,2224,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6471:2578,usability,progress,progress,2578,"me. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot is a good example. Also there is no documentation, no one touched it in years and I doubt about the code quality (at least I didn't find any tests, user responses etc.). - One can try to minimize root installation by switching off options. But it doesn't affect space and compilation time much. It still hundreds of megabytes (500 something) and takes almost the same time to compile. . ## Additional context. - I'm talking about C++ solution. . - I know about ROOT team efforts to make root installation more modular. But haven't heard any progress on this and not sure that it is about such level of modularity. - I heard something about using system llvm, but I'm afraid even this wouldn't solve the issue. - Even javascript root can open root files in javascript and I'm surprised it is not possible in C++ without building WHOLE elephant. . - Pitch phrase ""uproot for c++""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6471
https://github.com/root-project/root/issues/6472:427,availability,error,error,427,"TThreadExecutor::Map should be able to accept const std::vector arguments; ## Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/minic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:1104,deployability,fail,failed,1104,"o see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:1821,deployability,fail,failed,1821,"t_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2524,deployability,fail,failed,2524,"::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:3273,deployability,fail,failed,3273," std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4010,deployability,fail,failed,4010,"unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4768,deployability,fail,failed,4768,":TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:5569,deployability,fail,failed,5569,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:6344,deployability,fail,failed,6344,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:185,energy efficiency,Current,Currently,185,"TThreadExecutor::Map should be able to accept const std::vector arguments; ## Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/minic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:795,energy efficiency,alloc,allocator,795,"TThreadExecutor::Map should be able to accept const std::vector arguments; ## Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/minic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:1482,energy efficiency,alloc,allocator,1482,"or::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: temp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2177,energy efficiency,alloc,allocator,2177,"t>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2282,energy efficiency,alloc,allocator,2282,"e/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2580,energy efficiency,alloc,allocator,2580,">). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2918,energy efficiency,alloc,allocator,2918,"tor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:3625,energy efficiency,alloc,allocator,3625,"e incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4375,energy efficiency,alloc,allocator,4375," In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nCh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4480,energy efficiency,alloc,allocator,4480,"x:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4824,energy efficiency,alloc,allocator,4824,"vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:5178,energy efficiency,alloc,allocator,5178,"/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:1091,integrability,sub,substitution,1091,"uld like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:1808,integrability,sub,substitution,1808,"std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2511,integrability,sub,substitution,2511,"(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: templa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:3260,integrability,sub,substitution,3260,":vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:3997,integrability,sub,substitution,3997,"d int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4755,integrability,sub,substitution,4755,"unc, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:5556,integrability,sub,substitution,5556,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:6016,integrability,sub,subc,6016,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:6089,integrability,sub,subc,6089,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:6331,integrability,sub,substitution,6331,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2632,interoperability,incompatib,incompatible,2632,"::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4876,interoperability,incompatib,incompatible,4876,"~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:427,performance,error,error,427,"TThreadExecutor::Map should be able to accept const std::vector arguments; ## Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/minic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:201,reliability,doe,doesn,201,"TThreadExecutor::Map should be able to accept const std::vector arguments; ## Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/minic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:1104,reliability,fail,failed,1104,"o see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:1821,reliability,fail,failed,1821,"t_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:2524,reliability,fail,failed,2524,"::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:3273,reliability,fail,failed,3273," std::allocator<_T2> >&). auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:62:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: candidate: template<class F, class R, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int, R, unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4010,reliability,fail,failed,4010,"unsigned int). auto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:92:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: candidate expects 4 arguments, 2 provided. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: candidate: template<class F, class INTEGER, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>, R, unsigned int). auto Map(F func, ROOT::TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:4768,reliability,fail,failed,4768,":TSeq<INTEGER> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:94:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::vector<T, std::allocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:5569,reliability,fail,failed,5569,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:6344,reliability,fail,failed,6344,"llocator<_T2> >&, R, unsigned int). auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:96:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: types 'std::vector<T, std::allocator<_T2> >' and 'const std::vector<int>' have incompatible cv-qualifiers. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: candidate: template<class F, class T, class R, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, std::initializer_list<_Up>, R, unsigned int). auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:98:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. In file included from /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:25:0,. from foo.cpp:1:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: candidate: template<class F, class T, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type> ROOT::TExecutor<subc>::Map(F, std::initializer_list<T>) [with F = F; T = T; Cond = Cond; subc = ROOT::TThreadExecutor]. auto Map(F func, std::initializer_list<T> args) -> std::vector<typename std::result_of<F(T)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TExecutor.hxx:78:9: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'std::initializer_list<_Up>'. threadExecutor.Map(func, args);. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:427,safety,error,error,427,"TThreadExecutor::Map should be able to accept const std::vector arguments; ## Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/minic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6472:427,usability,error,error,427,"TThreadExecutor::Map should be able to accept const std::vector arguments; ## Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. Currently, this doesn't compile, because `TThreadExecutor::Map` only accepts `std::vector<T> &` and not `const std::vector<T>&`:. ```. const std::vector<int> args = {1,2,3};. threadExecutor.Map(func, args);. ```. gets you. ```. foo.cpp:9:33: error: no matching function for call to 'ROOT::TThreadExecutor::Map(main()::<lambda(int)>&, const std::vector<int>&)'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: candidate: template<class F, class Cond> std::vector<typename std::result_of<F()>::type, std::allocator<typename std::result_of<F()>::type> > ROOT::TThreadExecutor::Map(F, unsigned int). auto Map(F func, unsigned nTimes) -> std::vector<typename std::result_of<F()>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:58:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: cannot convert 'args' (type 'const std::vector<int>') to type 'unsigned int'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: candidate: template<class F, class INTEGER, class Cond> std::vector<typename std::result_of<F(INTEGER)>::type, std::allocator<typename std::result_of<F(INTEGER)>::type> > ROOT::TThreadExecutor::Map(F, ROOT::TSeq<INTEGER>). auto Map(F func, ROOT::TSeq<INTEGER> args) -> std::vector<typename std::result_of<F(INTEGER)>::type>;. ^~~. /home/blue/miniconda3/envs/cern-root/include/ROOT/TThreadExecutor.hxx:60:12: note: template argument deduction/substitution failed:. foo.cpp:9:33: note: 'std::vector<int>' is not derived from 'ROOT::TSeq<INTEGER>'. threadExecutor.Map(func, args);. ^. In file included from foo.cpp:1:0:. /home/blue/minic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6472
https://github.com/root-project/root/issues/6473:795,safety,compl,complete,795,"TTree::Scan truncates leaf names in output; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In the following reproducer, `t.Scan()` prints values for column `out_x.out_x` but the output is truncated to `out_x.out`, which can be quite confusing for larger trees with nested branches:. ```. root [0] TTree t;. root [1] int x = 42;. root [2] t.Branch(""out_x"", &x). (TBranch *) 0x5559ed5dc4f0. root [3] t.Fill(). (int) 4. root [4] t.Scan(). ************************. * Row * out_x.out *. ************************. * 0 * 42 *. ************************. (long long) 1. ```. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The leaf name in the header of the table should either be just `""out_x""` or be the complete `""out_x.out_x""`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473
https://github.com/root-project/root/issues/6473:795,security,compl,complete,795,"TTree::Scan truncates leaf names in output; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In the following reproducer, `t.Scan()` prints values for column `out_x.out_x` but the output is truncated to `out_x.out`, which can be quite confusing for larger trees with nested branches:. ```. root [0] TTree t;. root [1] int x = 42;. root [2] t.Branch(""out_x"", &x). (TBranch *) 0x5559ed5dc4f0. root [3] t.Fill(). (int) 4. root [4] t.Scan(). ************************. * Row * out_x.out *. ************************. * 0 * 42 *. ************************. (long long) 1. ```. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The leaf name in the header of the table should either be just `""out_x""` or be the complete `""out_x.out_x""`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473
https://github.com/root-project/root/issues/6473:73,usability,clear,clear,73,"TTree::Scan truncates leaf names in output; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In the following reproducer, `t.Scan()` prints values for column `out_x.out_x` but the output is truncated to `out_x.out`, which can be quite confusing for larger trees with nested branches:. ```. root [0] TTree t;. root [1] int x = 42;. root [2] t.Branch(""out_x"", &x). (TBranch *) 0x5559ed5dc4f0. root [3] t.Fill(). (int) 4. root [4] t.Scan(). ************************. * Row * out_x.out *. ************************. * 0 * 42 *. ************************. (long long) 1. ```. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The leaf name in the header of the table should either be just `""out_x""` or be the complete `""out_x.out_x""`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473
https://github.com/root-project/root/issues/6473:121,usability,behavi,behavior,121,"TTree::Scan truncates leaf names in output; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In the following reproducer, `t.Scan()` prints values for column `out_x.out_x` but the output is truncated to `out_x.out`, which can be quite confusing for larger trees with nested branches:. ```. root [0] TTree t;. root [1] int x = 42;. root [2] t.Branch(""out_x"", &x). (TBranch *) 0x5559ed5dc4f0. root [3] t.Fill(). (int) 4. root [4] t.Scan(). ************************. * Row * out_x.out *. ************************. * 0 * 42 *. ************************. (long long) 1. ```. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The leaf name in the header of the table should either be just `""out_x""` or be the complete `""out_x.out_x""`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473
https://github.com/root-project/root/issues/6473:627,usability,behavi,behavior,627,"TTree::Scan truncates leaf names in output; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In the following reproducer, `t.Scan()` prints values for column `out_x.out_x` but the output is truncated to `out_x.out`, which can be quite confusing for larger trees with nested branches:. ```. root [0] TTree t;. root [1] int x = 42;. root [2] t.Branch(""out_x"", &x). (TBranch *) 0x5559ed5dc4f0. root [3] t.Fill(). (int) 4. root [4] t.Scan(). ************************. * Row * out_x.out *. ************************. * 0 * 42 *. ************************. (long long) 1. ```. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The leaf name in the header of the table should either be just `""out_x""` or be the complete `""out_x.out_x""`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473
https://github.com/root-project/root/issues/6473:645,usability,clear,clear,645,"TTree::Scan truncates leaf names in output; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In the following reproducer, `t.Scan()` prints values for column `out_x.out_x` but the output is truncated to `out_x.out`, which can be quite confusing for larger trees with nested branches:. ```. root [0] TTree t;. root [1] int x = 42;. root [2] t.Branch(""out_x"", &x). (TBranch *) 0x5559ed5dc4f0. root [3] t.Fill(). (int) 4. root [4] t.Scan(). ************************. * Row * out_x.out *. ************************. * 0 * 42 *. ************************. (long long) 1. ```. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The leaf name in the header of the table should either be just `""out_x""` or be the complete `""out_x.out_x""`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6473
https://github.com/root-project/root/pull/6474:25,safety,safe,safetiness,25,[rawfile] clarify thread safetiness in class comment (NFC);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6474
https://github.com/root-project/root/issues/6477:54,deployability,contain,contained,54,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6477:143,deployability,contain,contained,143,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6477:1043,deployability,version,versions,1043,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6477:1043,integrability,version,versions,1043,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6477:1043,modifiability,version,versions,1043,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6477:927,security,IsO,IsOpen,927,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6477:175,usability,behavi,behavior,175,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6477:1214,usability,close,close,1214,"[Tree] Cloning a tree deletes the TFile instance that contained the tree.; ## Describe the bug. Cloning a tree deletes the TFile instance that contained the tree. ## Expected behavior. Don't delete, of course! ## To Reproduce. Run `root.exe repro.cxx+g`, with `repro.cxx`:. ```c++. #include <TTree.h>. #include <TFile.h>. #include <TBranch.h>. #include <TROOT.h>. #include <iostream>. void repro() {. auto filename = ""/tmp/test1.root"";. {. TFile file(filename, ""NEW"");. TTree tree(""tree"", ""tree"");. double doub = 5.;. tree.Branch(""branch"", &doub);. tree.Fill();. file.WriteObject(&tree, ""tree"");. }. . auto file = TFile::Open(filename, ""READ"");. TTree* tree;. file->GetObject(""tree"", tree);. TTree* tree2 = static_cast<TTree*>(tree->Clone());. tree2->SetDirectory(gROOT);. double doub2;. tree2->Branch(""branch"", &doub2);. tree->GetEntry(0);. std::cout << doub2 << std::endl;. delete tree2;. std::cout << ""File open? "" << file->IsOpen() << '\t' << file->GetName() << std::endl;. }. ```. ## Setup. Master, but I'm quite sure that it affects all versions before master. This is causing #6408, but in RooFit, it's trivial to work around this bug using `tree2->SetDirectory(nullptr)`, so that's what I will do there to close that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6477
https://github.com/root-project/root/issues/6479:34,integrability,batch,batch,34,"[TMVA] TMVAGui functions crash in batch mode; As reported in https://root-forum.cern.ch/t/tmva-mvaeffs-crashes-when-disabling-graphical-output/40198. calling functions of TMVAGui in batch result in a crash. Also reproducer reported in ROOT-9483 is still crashing. Code reproducing the issue. ```. void tmva_plot(std::string infilename) {. gROOT->SetBatch(kTRUE);. TFile* myFile = TFile::Open(infilename.c_str());. std::cout << myFile << std::endl;. . TMVA::mvas(""dataset"", infilename, static_cast<TMVA::HistType>(3));. TMVA::mvaeffs(""dataset"", infilename);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6479
https://github.com/root-project/root/issues/6479:182,integrability,batch,batch,182,"[TMVA] TMVAGui functions crash in batch mode; As reported in https://root-forum.cern.ch/t/tmva-mvaeffs-crashes-when-disabling-graphical-output/40198. calling functions of TMVAGui in batch result in a crash. Also reproducer reported in ROOT-9483 is still crashing. Code reproducing the issue. ```. void tmva_plot(std::string infilename) {. gROOT->SetBatch(kTRUE);. TFile* myFile = TFile::Open(infilename.c_str());. std::cout << myFile << std::endl;. . TMVA::mvas(""dataset"", infilename, static_cast<TMVA::HistType>(3));. TMVA::mvaeffs(""dataset"", infilename);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6479
https://github.com/root-project/root/issues/6479:34,performance,batch,batch,34,"[TMVA] TMVAGui functions crash in batch mode; As reported in https://root-forum.cern.ch/t/tmva-mvaeffs-crashes-when-disabling-graphical-output/40198. calling functions of TMVAGui in batch result in a crash. Also reproducer reported in ROOT-9483 is still crashing. Code reproducing the issue. ```. void tmva_plot(std::string infilename) {. gROOT->SetBatch(kTRUE);. TFile* myFile = TFile::Open(infilename.c_str());. std::cout << myFile << std::endl;. . TMVA::mvas(""dataset"", infilename, static_cast<TMVA::HistType>(3));. TMVA::mvaeffs(""dataset"", infilename);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6479
https://github.com/root-project/root/issues/6479:182,performance,batch,batch,182,"[TMVA] TMVAGui functions crash in batch mode; As reported in https://root-forum.cern.ch/t/tmva-mvaeffs-crashes-when-disabling-graphical-output/40198. calling functions of TMVAGui in batch result in a crash. Also reproducer reported in ROOT-9483 is still crashing. Code reproducing the issue. ```. void tmva_plot(std::string infilename) {. gROOT->SetBatch(kTRUE);. TFile* myFile = TFile::Open(infilename.c_str());. std::cout << myFile << std::endl;. . TMVA::mvas(""dataset"", infilename, static_cast<TMVA::HistType>(3));. TMVA::mvaeffs(""dataset"", infilename);. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6479
https://github.com/root-project/root/issues/6481:90,energy efficiency,core,core,90,"LookupHelper cannot instantiate function templates; ## Describe the bug. See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6481
https://github.com/root-project/root/issues/6481:105,safety,test,test,105,"LookupHelper cannot instantiate function templates; ## Describe the bug. See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6481
https://github.com/root-project/root/issues/6481:142,safety,TEST,TEST,142,"LookupHelper cannot instantiate function templates; ## Describe the bug. See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6481
https://github.com/root-project/root/issues/6481:105,testability,test,test,105,"LookupHelper cannot instantiate function templates; ## Describe the bug. See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6481
https://github.com/root-project/root/issues/6481:142,testability,TEST,TEST,142,"LookupHelper cannot instantiate function templates; ## Describe the bug. See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6481
https://github.com/root-project/root/issues/6482:29,deployability,fail,fails,29,"TClass::GetListOfFunctions() fails to enumerate using decls.; See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6482
https://github.com/root-project/root/issues/6482:79,energy efficiency,core,core,79,"TClass::GetListOfFunctions() fails to enumerate using decls.; See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6482
https://github.com/root-project/root/issues/6482:29,reliability,fail,fails,29,"TClass::GetListOfFunctions() fails to enumerate using decls.; See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6482
https://github.com/root-project/root/issues/6482:94,safety,test,test,94,"TClass::GetListOfFunctions() fails to enumerate using decls.; See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6482
https://github.com/root-project/root/issues/6482:131,safety,TEST,TEST,131,"TClass::GetListOfFunctions() fails to enumerate using decls.; See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6482
https://github.com/root-project/root/issues/6482:94,testability,test,test,94,"TClass::GetListOfFunctions() fails to enumerate using decls.; See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6482
https://github.com/root-project/root/issues/6482:131,testability,TEST,TEST,131,"TClass::GetListOfFunctions() fails to enumerate using decls.; See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6482
https://github.com/root-project/root/issues/6483:490,energy efficiency,current,current,490,"[GUI] Crashes when creating TGClient in a standalone application; When creating a TGClient instance in a standalone application. ROOT crashes. . This reproduces the problem:. ```. #include ""TGClient.h"". #include ""TROOT.h"". #include <iostream>. void test() {. std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;. auto g = new TGClient(); . }. int main() {. test(); . } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6483
https://github.com/root-project/root/issues/6483:285,integrability,batch,batch,285,"[GUI] Crashes when creating TGClient in a standalone application; When creating a TGClient instance in a standalone application. ROOT crashes. . This reproduces the problem:. ```. #include ""TGClient.h"". #include ""TROOT.h"". #include <iostream>. void test() {. std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;. auto g = new TGClient(); . }. int main() {. test(); . } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6483
https://github.com/root-project/root/issues/6483:285,performance,batch,batch,285,"[GUI] Crashes when creating TGClient in a standalone application; When creating a TGClient instance in a standalone application. ROOT crashes. . This reproduces the problem:. ```. #include ""TGClient.h"". #include ""TROOT.h"". #include <iostream>. void test() {. std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;. auto g = new TGClient(); . }. int main() {. test(); . } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6483
https://github.com/root-project/root/issues/6483:249,safety,test,test,249,"[GUI] Crashes when creating TGClient in a standalone application; When creating a TGClient instance in a standalone application. ROOT crashes. . This reproduces the problem:. ```. #include ""TGClient.h"". #include ""TROOT.h"". #include <iostream>. void test() {. std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;. auto g = new TGClient(); . }. int main() {. test(); . } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6483
https://github.com/root-project/root/issues/6483:372,safety,test,test,372,"[GUI] Crashes when creating TGClient in a standalone application; When creating a TGClient instance in a standalone application. ROOT crashes. . This reproduces the problem:. ```. #include ""TGClient.h"". #include ""TROOT.h"". #include <iostream>. void test() {. std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;. auto g = new TGClient(); . }. int main() {. test(); . } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6483
https://github.com/root-project/root/issues/6483:249,testability,test,test,249,"[GUI] Crashes when creating TGClient in a standalone application; When creating a TGClient instance in a standalone application. ROOT crashes. . This reproduces the problem:. ```. #include ""TGClient.h"". #include ""TROOT.h"". #include <iostream>. void test() {. std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;. auto g = new TGClient(); . }. int main() {. test(); . } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6483
https://github.com/root-project/root/issues/6483:372,testability,test,test,372,"[GUI] Crashes when creating TGClient in a standalone application; When creating a TGClient instance in a standalone application. ROOT crashes. . This reproduces the problem:. ```. #include ""TGClient.h"". #include ""TROOT.h"". #include <iostream>. void test() {. std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;. auto g = new TGClient(); . }. int main() {. test(); . } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6483
https://github.com/root-project/root/pull/6484:27,integrability,batch,batch,27,[RF] More functional-style batch evaluations;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6484
https://github.com/root-project/root/pull/6484:27,performance,batch,batch,27,[RF] More functional-style batch evaluations;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6484
https://github.com/root-project/root/pull/6485:70,integrability,batch,batch,70,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:115,integrability,batch,batch,115,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:524,integrability,event,events,524,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:568,integrability,batch,batch,568,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:601,integrability,event,events,601,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:411,interoperability,specif,specify,411,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:431,interoperability,format,format,431,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:377,modifiability,Variab,VariablePlotting,377,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:70,performance,batch,batch,70,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:115,performance,batch,batch,115,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:568,performance,batch,batch,568,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:502,security,sign,signal,502,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:478,usability,dialog,dialog,478,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6485:535,usability,efficien,efficiency,535,"[TMVA] Fix using GUI functions TMVA::mva and TMVA::mvaeffs running in batch; This fixes #6479 when running ROOT in batch (with root -b), but still. a problem is present when running ROOT in a standalone application (see #6483). - improve TMVA::mva fixing a problem in storing output plots. - Create the full path to the directory `dataset/plot`. - Add option via TMVA::Config::VariablePlotting::fPlotFormat. to specify plot output format. - in TMVA::mvaeffs do not create a GUI dialog to set number of signal and background events for efficiency plots when running in batch mode. - add option to pass events number in TMVA::mvaeffs function call. The last commit provide the fix for ROOT-9483 (https://sft.its.cern.ch/jira/browse/ROOT-9483)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6485
https://github.com/root-project/root/pull/6487:38,integrability,sub,submission,38,"[GitHub] Add ""check for dupes"" in bug submission.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6487
https://github.com/root-project/root/pull/6488:107,deployability,build,building,107,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/pull/6488:116,deployability,modul,module,116,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/pull/6488:216,deployability,modul,module-includes,216,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/pull/6488:116,modifiability,modul,module,116,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/pull/6488:216,modifiability,modul,module-includes,216,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/pull/6488:272,reliability,RCa,RCanvas,272,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/pull/6488:116,safety,modul,module,116,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/pull/6488:216,safety,modul,module-includes,216,"Outline the RObjectDrawable class dtor in the cxx file; It should fix broken cxxmodules combination: While building module 'ROOTGpadv7' imported from graf2d/primitivesv7/inc/ROOT/RBox.hxx:12:. In file included from <module-includes>:1:. In file included from include/ROOT/RCanvas.hxx:12:. In file included from include/ROOT/RPadBase.hxx:12:. include/ROOT/RDrawable.hxx:61:39: note: in instantiation of function template specialization 'std::__shared_ptr<TObject, __gnu_cxx::_S_atomic>::reset<TObject>' requested here",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6488
https://github.com/root-project/root/issues/6489:519,availability,Operat,Operating,519,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:594,availability,down,download,594,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:441,deployability,build,build,441,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:507,deployability,version,version,507,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:576,deployability,instal,install,576,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:507,integrability,version,version,507,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:507,modifiability,version,version,507,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:0,safety,Test,Test,0,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:395,safety,input,input,395,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:0,testability,Test,Test,0,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:647,testability,context,context,647,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:676,testability,context,context,676,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:41,usability,clear,clear,41,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
https://github.com/root-project/root/issues/6489:89,usability,behavi,behavior,89,"Test Issue; ## Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ## Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ## To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ## Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ## Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6489
