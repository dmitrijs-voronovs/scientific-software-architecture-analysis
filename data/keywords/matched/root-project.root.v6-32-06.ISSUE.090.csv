id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/13290:3268,deployability,build,build,3268,"x:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3338,deployability,build,build,3338,"/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3372,deployability,build,build,3372,"ams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3378,deployability,build,build,3378,"ang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3508,deployability,build,build,3508,"/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3542,deployability,build,build,3542,"/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3619,deployability,build,build,3619,"ace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3653,deployability,build,build,3653,"lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3659,deployability,build,build,3659,"bCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/work",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3767,deployability,build,build,3767,"OT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3801,deployability,build,build,3801,"nst&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3865,deployability,build,build,3865,"ot/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsign",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3899,deployability,build,build,3899,".cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sft",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3905,deployability,build,build,3905,"982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4431,deployability,build,build,4431,"eTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4465,deployability,build,build,4465,"lizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4529,deployability,build,build,4529,"lrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4563,deployability,build,build,4563,"g/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4569,deployability,build,build,4569,"TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4652,deployability,build,build,4652,"ild/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::Crea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4686,deployability,build,build,4686," TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4750,deployability,build,build,4750,"sers/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4784,deployability,build,build,4784,"-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/works",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4790,deployability,build,build,4790,"equests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4908,deployability,build,build,4908,"lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4942,deployability,build,build,4942,"eepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5001,deployability,build,build,5001,"_1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPy",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5035,deployability,build,build,5035,"har_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5041,deployability,build,build,5041,"aits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5129,deployability,build,build,5129,"::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5163,deployability,build,build,5163,"::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Us",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5222,deployability,build,build,5222,"tring<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5256,deployability,build,build,5256,"char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCpp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5262,deployability,build,build,5262," std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5430,deployability,build,build,5430,"ild/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5464,deployability,build,build,5464,"ild/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5567,deployability,build,build,5567,"uild/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _obj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5601,deployability,build,build,5601,"ng::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallCont",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5607,deployability,build,build,5607,"toLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5776,deployability,build,build,5776,"ests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5810,deployability,build,build,5810,"01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5892,deployability,build,build,5892,"ers/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _obj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5926,deployability,build,build,5926,"pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/worksp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5932,deployability,build,build,5932,"quests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6063,deployability,build,build,6063,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6097,deployability,build,build,6097,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6179,deployability,build,build,6179,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6213,deployability,build,build,6213,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6219,deployability,build,build,6219,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6325,deployability,build,build,6325,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6359,deployability,build,build,6359,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6441,deployability,build,build,6441,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6475,deployability,build,build,6475,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6481,deployability,build,build,6481,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6626,deployability,build,build,6626,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6660,deployability,build,build,6660,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6742,deployability,build,build,6742,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6776,deployability,build,build,6776,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6782,deployability,build,build,6782,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6917,deployability,build,build,6917,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6951,deployability,build,build,6951,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:47,energy efficiency,current,currently,47,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:1874,energy efficiency,core,core,1874,"nerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2237,energy efficiency,core,core,2237,"float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2551,energy efficiency,core,core,2551,"nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2871,energy efficiency,core,core,2871,"/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3105,energy efficiency,alloc,allocator,3105,"OT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3279,energy efficiency,core,core,3279,"Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::alloc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3553,energy efficiency,core,core,3553,"/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3812,energy efficiency,core,core,3812,"rs/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4066,energy efficiency,alloc,allocator,4066,"__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4168,energy efficiency,alloc,allocator,4168,"&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4276,energy efficiency,alloc,allocator,4276,"re/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4307,energy efficiency,alloc,allocator,4307,"xx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::G",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4385,energy efficiency,alloc,allocator,4385,"bCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4476,energy efficiency,core,core,4476,"const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4697,energy efficiency,core,core,4697,"ataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4953,energy efficiency,core,core,4953,"dImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5174,energy efficiency,core,core,5174,"r<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5388,energy efficiency,alloc,allocator,5388,"r<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5734,energy efficiency,alloc,allocator,5734,"s/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5475,interoperability,bind,bindings,5475,"e/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5821,interoperability,bind,bindings,5821,"s::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6108,interoperability,bind,bindings,6108,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6370,interoperability,bind,bindings,6370,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6671,interoperability,bind,bindings,6671,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6962,interoperability,bind,bindings,6962,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5475,modifiability,bind,bindings,5475,"e/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5821,modifiability,bind,bindings,5821,"s::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6108,modifiability,bind,bindings,6108,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6370,modifiability,bind,bindings,6370,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6671,modifiability,bind,bindings,6671,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6962,modifiability,bind,bindings,6962,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:277,performance,Error,Error,277,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:122,reliability,fail,failed,122,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:323,reliability,Fail,Failed,323,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:178,safety,compl,completed,178,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:277,safety,Error,Error,277,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:178,security,compl,completed,178,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4095,security,hash,hash,4095,"d::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char cons",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:277,usability,Error,Error,277,"[tmva] Disable RBatchGenerator tutorials; They currently trigger segfaults in TClass*/cling of the like:. ```. RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511. *** Break *** abort. Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree). {. if (withFree) {. if (!nary) {. delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:1604,usability,User,Users,1604," &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:1814,usability,User,Users,1814,"}. else {. delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:1918,usability,User,Users,1918,"loat &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;. }. }. else {. typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2177,usability,User,Users,2177,":Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2281,usability,User,Users,2281,"float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;. if (!nary) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2491,usability,User,Users,2491,"ry) {. ((Nm*)obj)->~Nm();. }. else {. do {. (((Nm*)obj)+(--nary))->~Nm();. } while (nary);. }. }. ```. ```. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /U",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2595,usability,User,Users,2595,"``. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2811,usability,User,Users,2811,"Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:2915,usability,User,Users,2915,"Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgument&, clang::TemplateArgument const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&, clang::ASTContext const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3219,usability,User,Users,3219,"sts-build/root/core/clingutils/src/TClingUtils.cxx:3717. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3323,usability,User,Users,3323,"sts-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3493,usability,User,Users,3493,"/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3907. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3604,usability,User,Users,3604,"ht/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedType(clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3752,usability,User,Users,3752,"eter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:3850,usability,User,Users,3850,"quests-build/root/core/clingutils/src/TClingUtils.cxx:3982. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] ROOT::TMetaUtils::GetNormalizedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, boo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4416,usability,User,Users,4416,"MemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /User",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4514,usability,User,Users,4514,"kspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingw",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4637,usability,User,Users,4637,"pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4735,usability,User,Users,4735,"fo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4893,usability,User,Users,4893,"ts-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:4986,usability,User,Users,4986,"ered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5114,usability,User,Users,5114,"tring<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5207,usability,User,Users,5207,"d::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullreques",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5415,usability,User,Users,5415,"ers/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5552,usability,User,Users,5552,"equests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5761,usability,User,Users,5761,"e/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:5877,usability,User,Users,5877,"igned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6048,usability,User,Users,6048,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6164,usability,User,Users,6164,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6310,usability,User,Users,6310,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6426,usability,User,Users,6426,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6611,usability,User,Users,6611,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6727,usability,User,Users,6727,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13290:6902,usability,User,Users,6902,"pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy_backend3_9.6.29.01.so] Cppyy::GetScope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:541. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CreateExecutor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:816. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::InitExecutor_(CPyCppyy::Executor*&, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:196. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Initialize(CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:600. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:807. [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libcppyy3_9.6.29.01.so] CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /Users/sftnight/build/workspace/root-pullrequests-build/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:567. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13290
https://github.com/root-project/root/pull/13291:24,safety,prevent,prevent,24,[IO][v6-28] Backport of prevent infinite loop in `TFile::ls` #13217 ; # This Pull request:. See https://github.com/root-project/root/issues/13182,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13291
https://github.com/root-project/root/pull/13291:24,security,preven,prevent,24,[IO][v6-28] Backport of prevent infinite loop in `TFile::ls` #13217 ; # This Pull request:. See https://github.com/root-project/root/issues/13182,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13291
https://github.com/root-project/root/pull/13292:118,availability,Error,Error,118,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:10,deployability,configurat,configuration,10,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:10,integrability,configur,configuration,10,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:223,interoperability,specif,specified,223,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:10,modifiability,configur,configuration,10,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:118,performance,Error,Error,118,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:118,safety,Error,Error,118,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:10,security,configur,configuration,10,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13292:118,usability,Error,Error,118,"Fix CMake configuration without Python; In that case `PYTHON_VERSION_STRING_Development_Main` is not set:. ```. CMake Error at tutorials/CMakeLists.txt:80 (if):. if given arguments:. ""VERSION_LESS"" ""3.8"". Unknown arguments specified. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13292
https://github.com/root-project/root/pull/13293:124,integrability,sub,subfields,124,[ntuple] fix setting field IDs for complex fields in RDF DS; # This Pull request:. Fix setting the field IDs of fields with subfields in the RNTuple RDF data source. It also fixes field IDs for clones of RClassField instances. ## Checklist:. - [X] tested changes locally. This PR fixes #12852 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13293
https://github.com/root-project/root/pull/13293:35,safety,compl,complex,35,[ntuple] fix setting field IDs for complex fields in RDF DS; # This Pull request:. Fix setting the field IDs of fields with subfields in the RNTuple RDF data source. It also fixes field IDs for clones of RClassField instances. ## Checklist:. - [X] tested changes locally. This PR fixes #12852 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13293
https://github.com/root-project/root/pull/13293:248,safety,test,tested,248,[ntuple] fix setting field IDs for complex fields in RDF DS; # This Pull request:. Fix setting the field IDs of fields with subfields in the RNTuple RDF data source. It also fixes field IDs for clones of RClassField instances. ## Checklist:. - [X] tested changes locally. This PR fixes #12852 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13293
https://github.com/root-project/root/pull/13293:35,security,compl,complex,35,[ntuple] fix setting field IDs for complex fields in RDF DS; # This Pull request:. Fix setting the field IDs of fields with subfields in the RNTuple RDF data source. It also fixes field IDs for clones of RClassField instances. ## Checklist:. - [X] tested changes locally. This PR fixes #12852 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13293
https://github.com/root-project/root/pull/13293:248,testability,test,tested,248,[ntuple] fix setting field IDs for complex fields in RDF DS; # This Pull request:. Fix setting the field IDs of fields with subfields in the RNTuple RDF data source. It also fixes field IDs for clones of RClassField instances. ## Checklist:. - [X] tested changes locally. This PR fixes #12852 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13293
https://github.com/root-project/root/pull/13294:67,integrability,discover,discovered,67,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:279,integrability,sub,subtle,279,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:67,interoperability,discover,discovered,67,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:395,interoperability,specif,specific,395,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:251,modifiability,concern,concerned,251,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:366,reliability,doe,does,366,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:610,safety,test,tested,610,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:251,testability,concern,concerned,251,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:610,testability,test,tested,610,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13294:67,usability,discov,discovered,67,"FlexibleInterpVar - protect against 0 or negative variations; I've discovered that some workspaces that worked fine before are broken by https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed - I am getting NaN back! I'm concerned that there's some subtle numerical effects that the old code (in fillPolyCoef) handles that the new code does not. But at least in my specific case I think the issue is one of the variations is 0, and there's no protection in the new code for a variation being 0 or negative, unlike in the old code. . This suggests a fix for this although I've not tested it yet ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13294
https://github.com/root-project/root/pull/13295:1399,availability,redund,redundant-string-cstr,1399,hat are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikeliho,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3208,availability,Consist,Consistent,3208,"r1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3555,availability,error,error,3555,"dc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5449,availability,error,errors,5449,"ToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8052,availability,state,stateless,8052,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9674,availability,error,error,9674,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:153,deployability,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:435,deployability,patch,patches,435,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:579,deployability,depend,dependency,579,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:715,deployability,manag,management,715,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:842,deployability,manag,management,842,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:908,deployability,automat,automatic,908,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:925,deployability,manag,management,925,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1399,deployability,redundan,redundant-string-cstr,1399,hat are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikeliho,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1598,deployability,contain,container-size-empty,1598,653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2881,deployability,manag,management,2881,"d181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `B",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5479,deployability,build,buildArg,5479,"exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6496,deployability,observ,observables,6496,"05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6916,deployability,version,version,6916,"ation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7146,deployability,manag,management,7146,"RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7232,deployability,build,buildLoopBegin,7232,"ut scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7658,deployability,depend,dependency,7658,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7889,deployability,integr,integrals,7889,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7960,deployability,integr,integrals,7960,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8118,deployability,integr,integration,8118,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8590,deployability,manag,management,8590," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8887,deployability,Compos,Composition,8887,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9034,deployability,modul,modules,9034,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::Se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9046,deployability,modul,modules,9046,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. fa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9103,deployability,modul,modules,9103,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are mar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9304,deployability,observ,observables,9304,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9530,deployability,modul,modules,9530,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:715,energy efficiency,manag,management,715,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:842,energy efficiency,manag,management,842,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:925,energy efficiency,manag,management,925,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:976,energy efficiency,Reduc,Reduce,976,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2542,energy efficiency,optim,optimization,2542,s`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2881,energy efficiency,manag,management,2881,"d181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `B",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6708,energy efficiency,Optim,Optimize,6708,"r. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interfa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7146,energy efficiency,manag,management,7146,"RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8590,energy efficiency,manag,management,8590," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:579,integrability,depend,dependency,579,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:736,integrability,interfac,interface,736,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:861,integrability,event,events,861,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:983,integrability,pub,public,983,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2016,integrability,pub,public,2016, 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFi,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2023,integrability,interfac,interface,2023,0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::Owning,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2794,integrability,Batch,BatchMode,2794,functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit te,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3885,integrability,Batch,BatchMode,3885,"t from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove interna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3964,integrability,interfac,interface,3964,"arameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4910,integrability,pub,public,4910,"] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4924,integrability,interfac,interface,4924,"l::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5317,integrability,pub,public,5317,"] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5677,integrability,Batch,BatchMode,5677,"] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6349,integrability,Batch,BatchMode,6349,"2a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6473,integrability,Batch,BatchMode,6473,":buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper te",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6916,integrability,version,version,6916,"ation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7271,integrability,translat,translate,7271,"oops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7305,integrability,translat,translate,7305," [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7658,integrability,depend,dependency,7658,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7669,integrability,pub,public,7669,"e()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7705,integrability,interfac,interface,7705,"timize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7889,integrability,integr,integrals,7889,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7960,integrability,integr,integrals,7960,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8052,integrability,state,stateless,8052,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8118,integrability,integr,integration,8118,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8441,integrability,interfac,interface,8441,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8725,integrability,interfac,interface,8725,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9614,integrability,wrap,wrapper,9614,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:736,interoperability,interfac,interface,736,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1649,interoperability,format,format,1649,7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2023,interoperability,interfac,interface,2023,0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::Owning,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2077,interoperability,plug,plugin,2077,] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2475,interoperability,compatib,compatibility,2475,ls`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3964,interoperability,interfac,interface,3964,"arameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4924,interoperability,interfac,interface,4924,"l::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6006,interoperability,Format,Format,6006,"AbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7076,interoperability,Format,Format,7076,"] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7271,interoperability,translat,translate,7271,"oops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7305,interoperability,translat,translate,7305," [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7705,interoperability,interfac,interface,7705,"timize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7889,interoperability,integr,integrals,7889,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7960,interoperability,integr,integrals,7960,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8118,interoperability,integr,integration,8118,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8441,interoperability,interfac,interface,8441,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8473,interoperability,format,format,8473,"test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8725,interoperability,interfac,interface,8725,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9614,interoperability,wrapper,wrapper,9614,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:579,modifiability,depend,dependency,579,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:736,modifiability,interfac,interface,736,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1036,modifiability,Refact,Refactor,1036,"6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2023,modifiability,interfac,interface,2023,0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::Owning,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2192,modifiability,Refact,Refactor,2192,tors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f68,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2862,modifiability,variab,variable,2862," RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2968,modifiability,paramet,parameter,2968,"80 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3495,modifiability,Exten,Extend,3495,"c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3767,modifiability,Exten,Extend,3767,"ge. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issue",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3964,modifiability,interfac,interface,3964,"arameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4009,modifiability,paramet,parameters,4009,"RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4257,modifiability,exten,extended,4257,"tFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4924,modifiability,interfac,interface,4924,"l::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5865,modifiability,variab,variable,5865,"e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Rem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6242,modifiability,scal,scalar,6242,"Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6249,modifiability,interm,intermediate,6249,"ate specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by rec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6331,modifiability,reu,reuse,6331,"e` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6467,modifiability,Reu,Reuse,6467,"Context::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6916,modifiability,version,version,6916,"ation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7658,modifiability,depend,dependency,7658,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7705,modifiability,interfac,interface,7705,"timize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7889,modifiability,integr,integrals,7889,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7960,modifiability,integr,integrals,7960,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8118,modifiability,integr,integration,8118,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8441,modifiability,interfac,interface,8441,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8725,modifiability,interfac,interface,8725,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8887,modifiability,Compos,Composition,8887,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8904,modifiability,inherit,inheritance,8904,"his commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9034,modifiability,modul,modules,9034,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::Se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9046,modifiability,modul,modules,9046,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. fa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9103,modifiability,modul,modules,9103,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are mar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9327,modifiability,paramet,parameter,9327,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9530,modifiability,modul,modules,9530,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9971,modifiability,paramet,parameter,9971,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:505,performance,perform,performance-faster-string-find,505,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:708,performance,memor,memory,708,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:918,performance,memor,memory,918,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1036,performance,Refactor,Refactor,1036,"6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2192,performance,Refactor,Refactor,2192,tors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f68,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2542,performance,optimiz,optimization,2542,s`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2794,performance,Batch,BatchMode,2794,functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit te,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3555,performance,error,error,3555,"dc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3885,performance,Batch,BatchMode,3885,"t from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove interna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5449,performance,error,errors,5449,"ToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5677,performance,Batch,BatchMode,5677,"] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6349,performance,Batch,BatchMode,6349,"2a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6473,performance,Batch,BatchMode,6473,":buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper te",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6708,performance,Optimiz,Optimize,6708,"r. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interfa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8583,performance,memor,memory,8583,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d294",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9674,performance,error,error,9674,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1399,reliability,redundan,redundant-string-cstr,1399,hat are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikeliho,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7889,reliability,integr,integrals,7889,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7960,reliability,integr,integrals,7960,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8118,reliability,integr,integration,8118,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:153,safety,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:435,safety,patch,patches,435,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:579,safety,depend,dependency,579,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:690,safety,safe,safety,690,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:715,safety,manag,management,715,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:842,safety,manag,management,842,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:925,safety,manag,management,925,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1399,safety,redund,redundant-string-cstr,1399,hat are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikeliho,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2398,safety,test,testLikelihoodJob,2398,t-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2515,safety,test,test,2515,dy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `te,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2689,safety,test,test,2689,F] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2881,safety,manag,management,2881,"d181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `B",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3053,safety,Avoid,Avoid,3053,"e `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] A",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3088,safety,safe,safe,3088,". 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3385,safety,test,test,3385,"anually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3430,safety,test,test,3430," New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3451,safety,test,testHistFactory,3451,"gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3505,safety,test,tests,3505,"d unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter meth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3515,safety,test,testHistFactory,3515," binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-exi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3555,safety,error,error,3555,"dc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3775,safety,test,testHistFactory,3775,"e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3797,safety,test,test,3797,"Mode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4483,safety,except,exceptions,4483,"5 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4723,safety,test,test,4723,"ooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5449,safety,error,errors,5449,"ToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5518,safety,Avoid,Avoid,5518,"xisting objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5545,safety,test,testRooFuncWrapper,5545,"Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Impro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5824,safety,test,testRooFuncWrapper,5824,"ts in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7021,safety,test,testRooFuncWrapper,7021,") and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7146,safety,manag,management,7146,"RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7217,safety,Avoid,Avoid,7217,"bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7476,safety,test,test,7476,"Mode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7658,safety,depend,dependency,7658,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7999,safety,test,test,7999,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8481,safety,test,testRooDataHist,8481,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8538,safety,test,test,8538,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8590,safety,manag,management,8590," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8841,safety,test,tests,8841,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8855,safety,Test,TestStatistics,8855,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9034,safety,modul,modules,9034,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::Se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9046,safety,modul,modules,9046,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. fa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9103,safety,modul,modules,9103,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are mar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9372,safety,Test,Test,9372,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9416,safety,test,testRooFuncWrapper,9416,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9530,safety,modul,modules,9530,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9674,safety,error,error,9674,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:153,security,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:435,security,patch,patches,435,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7889,security,integr,integrals,7889,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7960,security,integr,integrals,7960,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8118,security,integr,integration,8118,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:579,testability,depend,dependency,579,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:908,testability,automat,automatic,908,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2398,testability,test,testLikelihoodJob,2398,t-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2510,testability,unit,unit,2510,ng-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests i,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2515,testability,test,test,2515,dy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `te,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:2689,testability,test,test,2689,F] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase. 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3385,testability,test,test,3385,"anually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3430,testability,test,test,3430," New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3451,testability,test,testHistFactory,3451,"gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3505,testability,test,tests,3505,"d unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter meth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3515,testability,test,testHistFactory,3515," binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-exi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3775,testability,test,testHistFactory,3775,"e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3792,testability,unit,unit,3792,"BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3797,testability,test,test,3797,"Mode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4723,testability,test,test,4723,"ooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4818,testability,simul,simultaneous,4818,"ation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5545,testability,test,testRooFuncWrapper,5545,"Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Impro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5824,testability,test,testRooFuncWrapper,5824,"ts in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6496,testability,observ,observables,6496,"05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7021,testability,test,testRooFuncWrapper,7021,") and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7476,testability,test,test,7476,"Mode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7658,testability,depend,dependency,7658,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7889,testability,integr,integrals,7889,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7960,testability,integr,integrals,7960,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7979,testability,mock,mock,7979,"wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7999,testability,test,test,7999,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8118,testability,integr,integration,8118,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8481,testability,test,testRooDataHist,8481,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8538,testability,test,test,8538,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8841,testability,test,tests,8841,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8855,testability,Test,TestStatistics,8855,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9304,testability,observ,observables,9304,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9372,testability,Test,Test,9372,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9416,testability,test,testRooFuncWrapper,9416,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:505,usability,perform,performance-faster-string-find,505,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:708,usability,memor,memory,708,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:918,usability,memor,memory,918,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 23; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegrat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:1158,usability,document,documentation,1158,"ated to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:. https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt. 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`. 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore. cf653869f7 [RF] Don't bar xroofit behind `root7` anymore. e5a67bc647 [RF] More type safety and better memory management with CUDA interface. bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute. 529ba82432 [RF] RAII management of CUDA events and streams. cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays. 77299a2c34 [RF] Reduce public headers of `roobatchcompute`. 8b0a768f0c [RF] Refactor CUDA code in RooFit. 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra. a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors. e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude. 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction. 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`. bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`. 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`. 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`. e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx. 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr. 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions. 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf. 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding. b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface. e11a5e4d8c [RF] Improve `RooNumIntFactory` plugin system. 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3208,usability,Consist,Consistent,3208,"r1D to use free functions. 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`. 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob. 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility. c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization. aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3555,usability,error,error,3555,"dc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous. 1ab0f6ddba [RF] Remove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3651,usability,support,support,3651,"emove default constructors of old test statistic classes. 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:3712,usability,support,support,3712,"9da19c3 [RF] Deprecate now unused RooDataWeightedAverage. 2de763972e [RF] Use BatchMode for data projection plots. a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData. f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists. d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`. 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4074,usability,support,support,4074,"on-thread safe `Form()` in RooFit. 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4143,usability,support,support,4143,"eInterpVar constructor from RooArgLists. 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4202,usability,support,support,4202,"] Consistent 6th-degree polynomial interpolation in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4249,usability,Support,Support,4249,"n in HistFactory. 07b56333f9 [RF] Put members in RooAbsReal class declaration in order. 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal. 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows. 1e74086875 [RF] Extend AD tests in `testHistFactory`. 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory. 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal. 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation. 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark tem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:4810,usability,Support,Support,4810,"code generation AD. efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`. 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface. 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper. 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar. 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson. a493684a19 [RF] Add Code-Squash AD support for the Hist* classes. cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD. 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWork",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5449,usability,error,errors,5449,"ToZero()`. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5589,usability,support,support,5589," [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Deta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5751,usability,support,support,5751,"eneration issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSamePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:5950,usability,support,support,5950,"ove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:6097,usability,support,support,6097," private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7102,usability,command,command,7102,"or RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enab",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7852,usability,support,support,7852,"0268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:7927,usability,support,support,7927,"of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8583,usability,memor,memory,8583,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d294",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:8715,usability,minim,minimizer,8715,"mplementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e802",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9383,usability,prototyp,prototype,9383,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13295:9674,usability,error,error,9674,"oHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13295
https://github.com/root-project/root/pull/13298:223,deployability,updat,updated,223,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:159,energy efficiency,GPU,GPU,159,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:32,integrability,batch,batch,32,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:32,performance,batch,batch,32,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:159,performance,GPU,GPU,159,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:193,safety,test,tested,193,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:223,safety,updat,updated,223,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:223,security,updat,updated,223,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13298:193,testability,test,tested,193,RooPower and RooExpPoly compute batch implemented; # This Pull request:. ## Changes or fixes:. Implementation of the RooExpPoly and RooPower functions for the GPU backend. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13298
https://github.com/root-project/root/pull/13299:306,deployability,updat,updated,306,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:347,deployability,depend,depends,347,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:347,integrability,depend,depends,347,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:347,modifiability,depend,depends,347,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:276,safety,test,tested,276,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:306,safety,updat,updated,306,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:347,safety,depend,depends,347,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:306,security,updat,updated,306,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:276,testability,test,tested,276,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/pull/13299:347,testability,depend,depends,347,"counterpart of Python's join function in C++; # This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`. Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally. - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13299
https://github.com/root-project/root/issues/13300:436,availability,Operat,Operating,436,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:376,deployability,version,version,376,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:398,deployability,Instal,Installation,398,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:376,integrability,version,version,376,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:376,modifiability,version,version,376,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:154,performance,memor,memory,154,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:127,reliability,doe,doesn,127,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:0,safety,Test,Test,0,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:204,safety,test,test,204,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:0,testability,Test,Test,0,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:204,testability,test,test,204,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:481,testability,context,context,481,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/issues/13300:154,usability,memor,memory,154,"Test SIGTERM vs ~TFile; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Rumors have it that SIGTERM doesn't trigger writing in-memory objects to open `TFile`s. We should have a test for this. ### Reproducer. Likely this should be enough:. ```C++. TFile file(""out.root"", ""RECREATE"");. TH1F hist(""h"", ""h"", 10, 0., 1.);. raise(SIGTERM);. ```. ### ROOT version. 6.29/01. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13300
https://github.com/root-project/root/pull/13301:280,deployability,updat,updated,280,Avoid C-Style Casts in Dictionary; # This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13301
https://github.com/root-project/root/pull/13301:185,energy efficiency,reduc,reduce,185,Avoid C-Style Casts in Dictionary; # This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13301
https://github.com/root-project/root/pull/13301:0,safety,Avoid,Avoid,0,Avoid C-Style Casts in Dictionary; # This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13301
https://github.com/root-project/root/pull/13301:250,safety,test,tested,250,Avoid C-Style Casts in Dictionary; # This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13301
https://github.com/root-project/root/pull/13301:280,safety,updat,updated,280,Avoid C-Style Casts in Dictionary; # This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13301
https://github.com/root-project/root/pull/13301:280,security,updat,updated,280,Avoid C-Style Casts in Dictionary; # This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13301
https://github.com/root-project/root/pull/13301:250,testability,test,tested,250,Avoid C-Style Casts in Dictionary; # This Pull request:. ## Changes or fixes:. We compile our code (including the dictionaries) with warnings about C-Style casts. We would like to also reduce the warnings about the dictionaries. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13301
https://github.com/root-project/root/pull/13302:388,deployability,UPDAT,UPDATE,388,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:414,deployability,updat,update,414,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:489,performance,lock,locks,489,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:641,performance,lock,locks,641,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:16,safety,safe,safety,16,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:388,safety,UPDAT,UPDATE,388,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:414,safety,updat,update,414,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:388,security,UPDAT,UPDATE,388,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:414,security,updat,update,414,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:489,security,lock,locks,489,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:641,security,lock,locks,641,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/pull/13302:553,testability,context,context,553,"Increase thread safety to fix RBatchGenerator tutorials segfaults; Attempting to improve the situation regarding segfaults seen in the RBatchGenerator tutorials. Generally, the situation triggering the segfaults is:. 1. Main process is running Python code. 2. Spawns a C++ thread, which runs RDataFrame code. 3. Main thread will call into the interpreter via cppyy. 4. Data races happen. UPDATE:. The commits were update after discussion with @pcanal. The general strategy is to write the locks further deep in the call chain when possible (e.g. in the context of this PR, `TFunction` is a higher-level class than `TClingMethodInfo`, so the locks are better placed in the latter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13302
https://github.com/root-project/root/issues/13303:284,availability,error,error,284,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:254,energy efficiency,current,currently,254,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:427,energy efficiency,current,currently,427,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:284,performance,error,error,284,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:232,reliability,pra,pragma,232,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:284,safety,error,error,284,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:210,usability,user,user,210,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:284,usability,error,error,284,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/issues/13303:547,usability,clear,clear,547,"Clarify working of enums and typedefs to them in LinkDefs; Follow-up from https://github.com/root-project/root/pull/13238#issuecomment-1645247274, see also the three points raised in the linked comment. From a user perspective, a `#pragma link C++ enum` currently produces neither an error nor a warning if the `enum` is not found (this is going to change with LLVM 16). As far as I can tell, `typedef`s to unnamed `enum`s are currently not considered (this was the pattern addressed in https://github.com/root-project/root/pull/13238), it is not clear if they should.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13303
https://github.com/root-project/root/pull/13304:102,usability,tool,tools,102,"[skip-ci] Add LLVM's gitignore; The `.gitignore` files were traditionally skipped to not exclude the `tools/clang/` directory, but this isn't necessary since adopting the monorepo. Adding them back will correctly ignore the compiled Python `pyc` files after running `check-cling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13304
https://github.com/root-project/root/pull/13305:161,deployability,updat,updated,161,[mathcore] Fix return of FitResult::ParameterBounds as doc says.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13305
https://github.com/root-project/root/pull/13305:36,modifiability,Paramet,ParameterBounds,36,[mathcore] Fix return of FitResult::ParameterBounds as doc says.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13305
https://github.com/root-project/root/pull/13305:131,safety,test,tested,131,[mathcore] Fix return of FitResult::ParameterBounds as doc says.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13305
https://github.com/root-project/root/pull/13305:161,safety,updat,updated,161,[mathcore] Fix return of FitResult::ParameterBounds as doc says.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13305
https://github.com/root-project/root/pull/13305:161,security,updat,updated,161,[mathcore] Fix return of FitResult::ParameterBounds as doc says.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13305
https://github.com/root-project/root/pull/13305:131,testability,test,tested,131,[mathcore] Fix return of FitResult::ParameterBounds as doc says.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13305
https://github.com/root-project/root/pull/13306:210,deployability,contain,container,210,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:647,deployability,updat,update,647,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:754,deployability,updat,updated,754,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:26,interoperability,prox,proxied,26,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:78,performance,I/O,I/O,78,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:510,safety,test,test,510,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:647,safety,updat,update,647,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:724,safety,test,tested,724,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:754,safety,updat,updated,754,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:647,security,updat,update,647,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:754,security,updat,updated,754,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:505,testability,unit,unit,505,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:510,testability,test,test,510,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:724,testability,test,tested,724,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:591,usability,behavi,behavior,591,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:608,usability,document,documented,608,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13306:658,usability,document,documentation,658,"[ntuple] Fix iteration of proxied array-backed collections; Per the last ROOT I/O meeting (where the correct use of iterators to array-backed collections, e.g. `std::vector<T>`): an iterator on an array-backed container is just a pointer; thus, it can be directly stored in `*xyz_arena`, saving one dereference (see [here](https://github.com/root-project/root/blob/master/io/io/inc/TVirtualCollectionIterators.h#L34)). This pull request, fixes both the implementation of `RCollectionIterableOnce` and the unit test. As a result, this PR should fix the use case in PR #12948. Given that this behavior was not documented at all, a follow-up PR will update the documentation for `TVirtualCollectionProxy`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13306
https://github.com/root-project/root/pull/13307:323,deployability,updat,updated,323,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13307:1,energy efficiency,core,core,1,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13307:247,modifiability,exten,extends,247,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13307:323,safety,updat,updated,323,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13307:323,security,updat,updated,323,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13307:15,usability,document,documentation,15,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13307:140,usability,document,documented,140,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13307:259,usability,document,documentation,259,"[core] Improve documentation of the `TVirtualCollectionProxy` class (NFC); The `TVirtualCollectionProxy` class has been proved to be weakly documented (see, e.g. issues in PR #13306 and #12948). Given the situation, this pull request improves and extends the documentation of the aforementioned class. ## Checklist:. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13307
https://github.com/root-project/root/pull/13308:239,deployability,contain,contains,239,"[RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; It's not clear to users whether the `RooDataSet` passed to a. RooNDKeysPdf has to live as long as that pdf or not. Right now it has to live just as long, because the RooNDKeysPdf contains. the RooDataSet by non-owning pointer. However, there was no reason for. that, because the dataset is only used in the constructor. This commit suggests to drop this unused `_data` member of the. RooNDKeysPdf, solving potential lifetime problems: the dataset doesn't. need to live as long as the RooNDKeysPdf anymore. With this change, it was possible to use some more of the `RooFit::OwningPtr<T>` alias in RooFit, which is done in the second commit of this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13308
https://github.com/root-project/root/pull/13308:507,reliability,doe,doesn,507,"[RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; It's not clear to users whether the `RooDataSet` passed to a. RooNDKeysPdf has to live as long as that pdf or not. Right now it has to live just as long, because the RooNDKeysPdf contains. the RooDataSet by non-owning pointer. However, there was no reason for. that, because the dataset is only used in the constructor. This commit suggests to drop this unused `_data` member of the. RooNDKeysPdf, solving potential lifetime problems: the dataset doesn't. need to live as long as the RooNDKeysPdf anymore. With this change, it was possible to use some more of the `RooFit::OwningPtr<T>` alias in RooFit, which is done in the second commit of this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13308
https://github.com/root-project/root/pull/13308:69,usability,clear,clear,69,"[RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; It's not clear to users whether the `RooDataSet` passed to a. RooNDKeysPdf has to live as long as that pdf or not. Right now it has to live just as long, because the RooNDKeysPdf contains. the RooDataSet by non-owning pointer. However, there was no reason for. that, because the dataset is only used in the constructor. This commit suggests to drop this unused `_data` member of the. RooNDKeysPdf, solving potential lifetime problems: the dataset doesn't. need to live as long as the RooNDKeysPdf anymore. With this change, it was possible to use some more of the `RooFit::OwningPtr<T>` alias in RooFit, which is done in the second commit of this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13308
https://github.com/root-project/root/pull/13308:78,usability,user,users,78,"[RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; It's not clear to users whether the `RooDataSet` passed to a. RooNDKeysPdf has to live as long as that pdf or not. Right now it has to live just as long, because the RooNDKeysPdf contains. the RooDataSet by non-owning pointer. However, there was no reason for. that, because the dataset is only used in the constructor. This commit suggests to drop this unused `_data` member of the. RooNDKeysPdf, solving potential lifetime problems: the dataset doesn't. need to live as long as the RooNDKeysPdf anymore. With this change, it was possible to use some more of the `RooFit::OwningPtr<T>` alias in RooFit, which is done in the second commit of this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13308
https://github.com/root-project/root/pull/13310:5,deployability,Build,Build,5,"[ci] Build in home directory [skip-ci]; The `/tmp` area in macOS seems to be restricted in size, failing jobs when upgrading to LLVM 16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13310
https://github.com/root-project/root/pull/13310:97,deployability,fail,failing,97,"[ci] Build in home directory [skip-ci]; The `/tmp` area in macOS seems to be restricted in size, failing jobs when upgrading to LLVM 16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13310
https://github.com/root-project/root/pull/13310:115,deployability,upgrad,upgrading,115,"[ci] Build in home directory [skip-ci]; The `/tmp` area in macOS seems to be restricted in size, failing jobs when upgrading to LLVM 16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13310
https://github.com/root-project/root/pull/13310:115,modifiability,upgrad,upgrading,115,"[ci] Build in home directory [skip-ci]; The `/tmp` area in macOS seems to be restricted in size, failing jobs when upgrading to LLVM 16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13310
https://github.com/root-project/root/pull/13310:97,reliability,fail,failing,97,"[ci] Build in home directory [skip-ci]; The `/tmp` area in macOS seems to be restricted in size, failing jobs when upgrading to LLVM 16.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13310
https://github.com/root-project/root/pull/13311:203,safety,test,tests,203,"[RF] Fix bug in NLL summation in RooBatchCompute; This commit fixes a problem in weighted fits with CUDA, replacing the kernel for weighted NLL sums with a new multi-block kernel that works for all unit tests. The `stressRooFit` test suite is now passing again with the CUDA backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13311
https://github.com/root-project/root/pull/13311:229,safety,test,test,229,"[RF] Fix bug in NLL summation in RooBatchCompute; This commit fixes a problem in weighted fits with CUDA, replacing the kernel for weighted NLL sums with a new multi-block kernel that works for all unit tests. The `stressRooFit` test suite is now passing again with the CUDA backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13311
https://github.com/root-project/root/pull/13311:198,testability,unit,unit,198,"[RF] Fix bug in NLL summation in RooBatchCompute; This commit fixes a problem in weighted fits with CUDA, replacing the kernel for weighted NLL sums with a new multi-block kernel that works for all unit tests. The `stressRooFit` test suite is now passing again with the CUDA backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13311
https://github.com/root-project/root/pull/13311:203,testability,test,tests,203,"[RF] Fix bug in NLL summation in RooBatchCompute; This commit fixes a problem in weighted fits with CUDA, replacing the kernel for weighted NLL sums with a new multi-block kernel that works for all unit tests. The `stressRooFit` test suite is now passing again with the CUDA backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13311
https://github.com/root-project/root/pull/13311:229,testability,test,test,229,"[RF] Fix bug in NLL summation in RooBatchCompute; This commit fixes a problem in weighted fits with CUDA, replacing the kernel for weighted NLL sums with a new multi-block kernel that works for all unit tests. The `stressRooFit` test suite is now passing again with the CUDA backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13311
https://github.com/root-project/root/pull/13313:8,integrability,filter,filters,8,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:94,integrability,filter,filters,94,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:148,integrability,filter,filter,148,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:164,integrability,filter,filter,164,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:176,integrability,filter,filters,176,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:237,integrability,filter,filter,237,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:263,integrability,interfac,interface,263,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:263,interoperability,interfac,interface,263,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:263,modifiability,interfac,interface,263,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/pull/13313:296,reliability,doe,does,296,"Changed filters used by RBatchGenerator to a single string; Changed the internal handeling of filters in RBatchGenerator. . Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter . Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13313
https://github.com/root-project/root/issues/13314:6,availability,error,error,6,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:366,availability,error,error,366,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1281,availability,avail,available,1281," a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() != b.getChannel()). return a.getChannel() > b.getChannel();. return true;. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4949,availability,Error,ErrorHandler,4949,"t);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8464,availability,error,error,8464,"ng::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8753,availability,error,error,8753,":Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8967,availability,error,error,8967,"ing::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9257,availability,error,error,9257,"0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9885,availability,down,down,9885,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:10468,availability,Operat,Operating,10468,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:303,deployability,manag,managed,303,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:742,deployability,fail,fail,742,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1207,deployability,fail,fails,1207," on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() !",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4002,deployability,stack,stack,4002,"""trdtracklets.root"");. TTree* dataTree = 0;. mainFile->GetObject(""o2sim"", dataTree);. TTreeReader* dataReader = new TTreeReader(dataTree);. // set up the branches we want to read. TTreeReaderArray<o2::trd::Tracklet64>* tracklets = new TTreeReaderArray<o2::trd::Tracklet64>(*dataReader, ""Tracklet"");. dataTree->AddFriend(""o2sim"", ""trddigits.root"");. TTreeReaderArray<o2::trd::Digit>* digits = new TTreeReaderArray<o2::trd::Digit>(*dataReader, ""TRDDigit"");. int tfno = 0;. while(dataReader->Next()) {. cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4402,deployability,build,build-any-ib,4402,"aderArray<o2::trd::Digit>(*dataReader, ""TRDDigit"");. int tfno = 0;. while(dataReader->Next()) {. cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4512,deployability,Stack,StackTrace,4512,"t TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4562,deployability,build,build-any-ib,4562,"cklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4822,deployability,build,build-any-ib,4822,"::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5139,deployability,build,build-any-ib,5139,"reeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5334,deployability,build,build-any-ib,5334,"ellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00007fa750f27d24 in void std::__stable_sort_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8285,deployability,build,build-any-ib,8285,"x00007fa76b06739f in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8508,deployability,build,build-any-ib,8508,") () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8553,deployability,Toolchain,Toolchain,8553,"/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8798,deployability,build,build-any-ib,8798,"e/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be trig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9033,deployability,build,build-any-ib,9033,"-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. --------------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9303,deployability,build,build-any-ib,9303,"/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9504,deployability,build,build-any-ib,9504,"ild-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9688,deployability,build,build-any-ib,9688,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9963,deployability,version,version,9963,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:10422,deployability,Instal,Installation,10422,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:303,energy efficiency,manag,managed,303,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4348,energy efficiency,optim,optimized,4348," TTreeReaderArray<o2::trd::Digit>* digits = new TTreeReaderArray<o2::trd::Digit>(*dataReader, ""TRDDigit"");. int tfno = 0;. while(dataReader->Next()) {. cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/201",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4460,energy efficiency,core,core,4460,"nt tfno = 0;. while(dataReader->Next()) {. cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4620,energy efficiency,core,core,4620,"< ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4709,energy efficiency,optim,optimized,4709," << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4737,energy efficiency,optim,optimized,4737,"tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4763,energy efficiency,optim,optimized,4763,"ets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Track",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4784,energy efficiency,optim,optimized,4784,"klet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReader",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4880,energy efficiency,core,core,4880,"..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderAr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5082,energy efficiency,optim,optimized,5082,"atch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5197,energy efficiency,core,core,5197,"waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00007fa750f27d24 in void std::__stable_sort_adaptive<TTr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5275,energy efficiency,optim,optimized,5275,"64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00007fa750f27d24 in void std::__stable_sort_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5296,energy efficiency,optim,optimized,5296,"007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00007fa750f27d24 in void std::__stable_sort_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, o2::trd::Track",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5392,energy efficiency,core,core,5392,"rkspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00007fa750f27d24 in void std::__stable_sort_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Trackl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:7411,energy efficiency,alloc,allocator,7411,"ray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) [clone .constprop.0] () from /home/tdietel/alice/data/ole/sortbug_C.so. #9 0x00007fa750f288f4 in sortbug() () from /home/tdietel/alice/data/ole/sortbug_C.so. #10 0x00007fa7683ff036 in ?? (). #11 0x00007fff0771e170 in ?? (). #12 0x00007fa76b0e4bbe in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #13 0x00007fa76b066cda in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #14 0x00007fa76b06739f in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::Pro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:7709,energy efficiency,alloc,allocator,7709,"rop.0] () from /home/tdietel/alice/data/ole/sortbug_C.so. #9 0x00007fa750f288f4 in sortbug() () from /home/tdietel/alice/data/ole/sortbug_C.so. #10 0x00007fa7683ff036 in ?? (). #11 0x00007fff0771e170 in ?? (). #12 0x00007fa76b0e4bbe in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #13 0x00007fa76b066cda in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #14 0x00007fa76b06739f in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8343,energy efficiency,core,core,8343,"nal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8448,energy efficiency,optim,optimized,8448,"onOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8856,energy efficiency,core,core,8856," 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8951,energy efficiency,optim,optimized,8951,"ionResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8995,energy efficiency,optim,optimized,8995,"me/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. -----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9093,energy efficiency,core,core,9093,"dleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9204,energy efficiency,optim,optimized,9204," cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9361,energy efficiency,core,core,9361,"Cling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9562,energy efficiency,core,core,9562,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9629,energy efficiency,optim,optimized,9629,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:700,integrability,sub,subsequent,700,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9963,integrability,version,version,9963,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9963,modifiability,version,version,9963,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:6,performance,error,error,6,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:366,performance,error,error,366,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1383,performance,content,content,1383,"hat std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() != b.getChannel()). return a.getChannel() > b.getChannel();. return true;. }. bool comp_tracklet(o2::trd::Tracklet64 a, o2::trd::Tracklet64 b). {. cout << ""COMPARE tracklets: "" <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4348,performance,optimiz,optimized,4348," TTreeReaderArray<o2::trd::Digit>* digits = new TTreeReaderArray<o2::trd::Digit>(*dataReader, ""TRDDigit"");. int tfno = 0;. while(dataReader->Next()) {. cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/201",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4709,performance,optimiz,optimized,4709," << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4737,performance,optimiz,optimized,4737,"tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4763,performance,optimiz,optimized,4763,"ets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Track",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4784,performance,optimiz,optimized,4784,"klet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReader",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4949,performance,Error,ErrorHandler,4949,"t);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5082,performance,optimiz,optimized,5082,"atch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5275,performance,optimiz,optimized,5275,"64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00007fa750f27d24 in void std::__stable_sort_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:5296,performance,optimiz,optimized,5296,"007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, long, o2::trd::Tracklet64*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)>) () from /home/tdietel/alice/data/ole/sortbug_C.so. #8 0x00007fa750f27d24 in void std::__stable_sort_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, o2::trd::Track",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8448,performance,optimiz,optimized,8448,"onOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8464,performance,error,error,8464,"ng::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8753,performance,error,error,8753,":Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8951,performance,optimiz,optimized,8951,"ionResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8967,performance,error,error,8967,"ing::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8995,performance,optimiz,optimized,8995,"me/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. -----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9204,performance,optimiz,optimized,9204," cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9257,performance,error,error,9257,"0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9629,performance,optimiz,optimized,9629,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9948,performance,time,time,9948,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:742,reliability,fail,fail,742,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1207,reliability,fail,fails,1207," on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() !",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1281,reliability,availab,available,1281," a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() != b.getChannel()). return a.getChannel() > b.getChannel();. return true;. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:6,safety,error,error,6,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:303,safety,manag,managed,303,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:366,safety,error,error,366,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1281,safety,avail,available,1281," a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() != b.getChannel()). return a.getChannel() > b.getChannel();. return true;. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4949,safety,Error,ErrorHandler,4949,"t);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8464,safety,error,error,8464,"ng::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8753,safety,error,error,8753,":Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8967,safety,error,error,8967,"ing::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9257,safety,error,error,9257,"0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1281,security,availab,available,1281," a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() != b.getChannel()). return a.getChannel() > b.getChannel();. return true;. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:10118,security,Team,Team,10118,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4008,testability,trace,trace,4008,"acklets.root"");. TTree* dataTree = 0;. mainFile->GetObject(""o2sim"", dataTree);. TTreeReader* dataReader = new TTreeReader(dataTree);. // set up the branches we want to read. TTreeReaderArray<o2::trd::Tracklet64>* tracklets = new TTreeReaderArray<o2::trd::Tracklet64>(*dataReader, ""Tracklet"");. dataTree->AddFriend(""o2sim"", ""trddigits.root"");. TTreeReaderArray<o2::trd::Digit>* digits = new TTreeReaderArray<o2::trd::Digit>(*dataReader, ""TRDDigit"");. int tfno = 0;. while(dataReader->Next()) {. cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {. cout << tracklet << endl;. }. cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;. std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);. cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;. std::stable_sort(digits->begin(), digits->end(), comp_digit);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:10519,testability,context,context,10519,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:6,usability,error,error,6,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:366,usability,error,error,366,"Fatal error during std::stable sort of TTreeReaderArray; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. I tried to run std::stable_sort on a TTreeReaderArrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getRO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1176,usability,minim,minimal,1176,"Arrray. The sorting works fine on macOS, but a colleague tried to run the same code on Ubuntu and reported a crash. I then managed to reproduce the crash on CentOS 7. I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:1343,usability,command,command,1343,"I investigated the error, and it seems that std::stable_sort assumes that it can decrement and invalid pointer to get a pointer to the last array of an element. However, TTreeReaderArray invalidates the iterator by setting fArray=0 when fIndex is incremented to fIndex>=fSize. This means that the information about the associated array is lost, and the subsequent decrement and dereference will fail. I would assume this could be fixed by marking an invalid iterator with a special value for fIndex (instead of setting fArray=0). So my question would be if TTreeReaderArray is supposed to be sortable, or if I am trying something that's outside of the scope of the implementation? I know my reproducer requires ALICE O2. ### Reproducer. I encountered the bug with a tree that holds classes from the ALICE O2 framework. I wrote a minimal macro `sortbug.C` that fails when run in compiled mode in an O2 root environment. Data files are available from https://cernbox.cern.ch/s/ypjoEC6awvYpjwR. The command is root `sortbug.C+`. The macro content is:. ```. #if !defined(__CLING__) || defined(__ROOTCLING__). #include <iostream>. //std::cout << ""including header files"" << std::endl;. #include <DataFormatsTRD/Digit.h>. #include <DataFormatsTRD/Tracklet64.h>. #include <TFile.h>. #include <TTreeReader.h>. #include <TTreeReaderArray.h>. #endif. /// comparison function to order digits by det / row / MCM / -channel. bool comp_digit(const o2::trd::Digit& a, const o2::trd::Digit& b). {. if (a.getDetector() != b.getDetector()). return a.getDetector() < b.getDetector();. if (a.getPadRow() != b.getPadRow()). return a.getPadRow() < b.getPadRow();. if (a.getROB() != b.getROB()). return a.getROB() < b.getROB();. if (a.getMCM() != b.getMCM()). return a.getMCM() < b.getMCM();. // sort channels in descending order, to ensure ordering of pad columns. if (a.getChannel() != b.getChannel()). return a.getChannel() > b.getChannel();. return true;. }. bool comp_tracklet(o2::trd::Tracklet64 a, o2::trd::Tracklet6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:4949,usability,Error,ErrorHandler,4949,"t);. }. }. ```. The code creates the following stack trace:. ```. Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'. aborting. #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6. #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6. #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104. #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395. #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177. #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:153. #6 0x00007fa77124b302 in Fatal (location=<optimized out>, fmt=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/foundation/src/TError.cxx:251. #7 0x00007fa750f2a19e in void std::__merge_adaptive<TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, long, o2::trd::Tracklet64*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(o2::trd::Tracklet64, o2::trd::Tracklet64)> >(TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64> >, TTreeReaderArray<o2::trd::Tracklet64>::Iterator_t<TTreeReaderArray<o2::trd::Tracklet64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8464,usability,error,error,8464,"ng::Value*, cling::Transaction**, unsigned long) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8553,usability,Tool,Toolchain,8553,"/ROOT/v6-28-04-14/lib/libCling.so. #15 0x00007fa76b0675ea in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8753,usability,error,error,8753,":Transaction**, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #16 0x00007fa76b142c97 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:8967,usability,error,error,8967,"ing::Value*, bool) () from /home/tdietel/alice/sw/slc7_x86-64/ROOT/v6-28-04-14/lib/libCling.so. #17 0x00007fa76af8a0bc in HandleInterpreterException (metaProcessor=0x243df60, input_line=0x7fff0771e079 ""sortbug()"", compRes=. 0x7fff0771e03c: cling::Interpreter::kSuccess, result=0x7fff0771e170) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9257,usability,error,error,9257,"0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:2460. #18 0x00007fa76afa4749 in TCling::ProcessLine (this=0x16e7bc0, line=<optimized out>, error=0x7fff0771f04c) at /jenkins/workspace/build-any-ib/sw/20156516. /1/slc7_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:9928,usability,efficien,efficient,9928,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/issues/13314:10284,usability,help,help,10284,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191. #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c). at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554. #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib. /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661. #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /. jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820. #22 0x00007fa771721fc6 in TRint::Run (this=this. entry=0x16b4f60, retrn=retrn. entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461. #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0. 4/main/src/rmain.cxx:84. ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |. | From tags/v6-28-04@v6-28-04 |. | With c++ (GCC) 12.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13314
https://github.com/root-project/root/pull/13315:27,deployability,Updat,Update,27,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:34,deployability,releas,release,34,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:66,deployability,Build,Build,66,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:106,deployability,updat,updates,106,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:118,deployability,releas,release,118,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:192,deployability,updat,updated,192,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:72,modifiability,system chang,system changes,72,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:27,safety,Updat,Update,27,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:106,safety,updat,updates,106,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:192,safety,updat,updated,192,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:27,security,Updat,Update,27,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:106,security,updat,updates,106,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13315:192,security,updat,updated,192,[relnotes][skip-ci][v6-30] Update release notes incl. RNTuple and Build system changes; This pull request updates the release notes for ROOT v6.30 (changes up to 25-Jul). ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13315
https://github.com/root-project/root/pull/13316:755,deployability,scale,scale,755,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:790,deployability,scale,scale,790,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:817,deployability,scale,scale,817,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1283,deployability,scale,scale,1283,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1301,deployability,scale,scale,1301,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1385,deployability,scale,scale,1385,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1403,deployability,scale,scale,1403,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1487,deployability,scale,scale,1487,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1505,deployability,scale,scale,1505,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:755,energy efficiency,scale,scale,755,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:790,energy efficiency,scale,scale,790,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:817,energy efficiency,scale,scale,817,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1283,energy efficiency,scale,scale,1283,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1301,energy efficiency,scale,scale,1301,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1385,energy efficiency,scale,scale,1385,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1403,energy efficiency,scale,scale,1403,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1487,energy efficiency,scale,scale,1487,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1505,energy efficiency,scale,scale,1505,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1722,energy efficiency,Draw,Draw,1722,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:109,modifiability,variab,variables,109,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:755,modifiability,scal,scale,755,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:790,modifiability,scal,scale,790,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:817,modifiability,scal,scale,817,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1283,modifiability,scal,scale,1283,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1301,modifiability,scal,scale,1301,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1385,modifiability,scal,scale,1385,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1403,modifiability,scal,scale,1403,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1487,modifiability,scal,scale,1487,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1505,modifiability,scal,scale,1505,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:755,performance,scale,scale,755,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:790,performance,scale,scale,790,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:817,performance,scale,scale,817,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1283,performance,scale,scale,1283,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1301,performance,scale,scale,1301,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1385,performance,scale,scale,1385,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1403,performance,scale,scale,1403,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1487,performance,scale,scale,1487,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:1505,performance,scale,scale,1505,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:170,security,hardcod,hardcoded,170,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13316:521,usability,hint,hints,521,"[RF] Make plotting of histograms work for all orders of magnitude; The RooFit plotting did not work well for variables of small orders of. magnitude, because there was a hardcoded check with an absolute value to. see if two points are considered the same: `x2 - x1 < 1e-20`. If this. condition is true, the point at x2 was not plotted. This meant that some. points that were actually different were skipped. The fix is to change this condition to a relative one, considering xmin. and xmax. The code to generate sampling hints for histograms was also. moved inside RooCurve, such that it's easier to syncronize the relevant. magic constants. Here is a demo of a plot that didn't work before but now works:. ```C++. void repro(). {. int nBins = 4;. double scale = 1e-31;. double xmin = 0. * scale;. double xmax = 1. * scale;. double binWidth = (xmax - xmin) / nBins;. // Fill the bin boundaries. std::vector<double> binBoundaries(nBins + 1);. for (int i = 0; i <= nBins; ++i) {. binBoundaries[i] = i * binWidth;. }. // The RooParametricStepFunction needs a TArrayD. TArrayD step_edges{int(binBoundaries.size()), binBoundaries.data()};. RooRealVar Gamma(""Gamma"", ""Gamma"", xmin, xmax);. RooArgList step_values;. step_values.addOwned(std::make_unique<RooRealVar>(""coef1"", ""coef1"", 0.0 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef2"", ""coef2"", 0.1 / scale, 0.0, 1.0 / scale));. step_values.addOwned(std::make_unique<RooRealVar>(""coef3"", ""coef3"", 0.1 / scale, 0.0, 1.0 / scale));. RooParametricStepFunction prior(""prior"", ""Prior for decay rate"", Gamma, step_values, step_edges, nBins);. RooPlot *xframe = Gamma.frame(xmin, xmax);. prior.plotOn(xframe);. auto c1 = new TCanvas();. xframe->Draw();. c1->SaveAs(""plot.png"");. }. ```. This bugfix was inspired by the following forum post:. https://root-forum.cern.ch/t/rooparametricstepfunction/55820",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13316
https://github.com/root-project/root/pull/13317:40,deployability,API,API,40,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:297,deployability,API,API,297,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:40,integrability,API,API,40,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:154,integrability,pub,public,154,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:297,integrability,API,API,297,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:40,interoperability,API,API,40,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:297,interoperability,API,API,297,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:342,safety,test,tested,342,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13317:342,testability,test,tested,342,"[ntuple] Improvements to the RFieldBase API (3/3); # This Pull request:. Changes the visibility of the `Append()` and `Read()` methods in RFieldBase from public to protected. Follow up from #13264 . In addition, `RFieldBase::GenerateValue(void *)` is now const. This should be the last PR in this API improvement series. ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13317
https://github.com/root-project/root/pull/13318:84,deployability,patch,patches,84,Backport fixes for Cling tests [v6.28]; This makes `check-cling` clean on `v6-28-00-patches`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13318
https://github.com/root-project/root/pull/13318:25,safety,test,tests,25,Backport fixes for Cling tests [v6.28]; This makes `check-cling` clean on `v6-28-00-patches`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13318
https://github.com/root-project/root/pull/13318:84,safety,patch,patches,84,Backport fixes for Cling tests [v6.28]; This makes `check-cling` clean on `v6-28-00-patches`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13318
https://github.com/root-project/root/pull/13318:84,security,patch,patches,84,Backport fixes for Cling tests [v6.28]; This makes `check-cling` clean on `v6-28-00-patches`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13318
https://github.com/root-project/root/pull/13318:25,testability,test,tests,25,Backport fixes for Cling tests [v6.28]; This makes `check-cling` clean on `v6-28-00-patches`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13318
https://github.com/root-project/root/pull/13319:219,energy efficiency,reduc,reduced,219,"[TCling] Fix suppression of enum forward declarations; There can be multiple attributes in the forward declaration, see the added test in [`roottest/cling/dict/enum`](https://github.com/root-project/roottest/pull/986) (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13319
https://github.com/root-project/root/pull/13319:130,safety,test,test,130,"[TCling] Fix suppression of enum forward declarations; There can be multiple attributes in the forward declaration, see the added test in [`roottest/cling/dict/enum`](https://github.com/root-project/roottest/pull/986) (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13319
https://github.com/root-project/root/pull/13319:130,testability,test,test,130,"[TCling] Fix suppression of enum forward declarations; There can be multiple attributes in the forward declaration, see the added test in [`roottest/cling/dict/enum`](https://github.com/root-project/roottest/pull/986) (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13319
https://github.com/root-project/root/pull/13320:105,deployability,configurat,configuration,105,[RF] Apply more `clang-tidy` suggestions to RooFit; I took some inspiration from the CMSSW `.clang-tidy` configuration file to run some more `clang-tidy` checks and automatically apply its suggestions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13320
https://github.com/root-project/root/pull/13320:165,deployability,automat,automatically,165,[RF] Apply more `clang-tidy` suggestions to RooFit; I took some inspiration from the CMSSW `.clang-tidy` configuration file to run some more `clang-tidy` checks and automatically apply its suggestions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13320
https://github.com/root-project/root/pull/13320:105,integrability,configur,configuration,105,[RF] Apply more `clang-tidy` suggestions to RooFit; I took some inspiration from the CMSSW `.clang-tidy` configuration file to run some more `clang-tidy` checks and automatically apply its suggestions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13320
https://github.com/root-project/root/pull/13320:105,modifiability,configur,configuration,105,[RF] Apply more `clang-tidy` suggestions to RooFit; I took some inspiration from the CMSSW `.clang-tidy` configuration file to run some more `clang-tidy` checks and automatically apply its suggestions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13320
https://github.com/root-project/root/pull/13320:105,security,configur,configuration,105,[RF] Apply more `clang-tidy` suggestions to RooFit; I took some inspiration from the CMSSW `.clang-tidy` configuration file to run some more `clang-tidy` checks and automatically apply its suggestions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13320
https://github.com/root-project/root/pull/13320:165,testability,automat,automatically,165,[RF] Apply more `clang-tidy` suggestions to RooFit; I took some inspiration from the CMSSW `.clang-tidy` configuration file to run some more `clang-tidy` checks and automatically apply its suggestions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13320
https://github.com/root-project/root/pull/13321:17,availability,failur,failure,17,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:59,availability,failur,failure,59,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:104,availability,error,error,104,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:17,deployability,fail,failure,17,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:59,deployability,fail,failure,59,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:621,deployability,contain,container,621,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:811,deployability,contain,container,811,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:858,deployability,stack,stackoverflow,858,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:90,interoperability,incompatib,incompatible,90,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:477,interoperability,incompatib,incompatible,477,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:928,interoperability,incompatib,incompatible-c,928,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:17,performance,failur,failure,17,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:59,performance,failur,failure,59,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:104,performance,error,error,104,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:413,performance,time,time,413,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:690,performance,time,time,690,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:17,reliability,fail,failure,17,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:59,reliability,fail,failure,59,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:524,reliability,doe,does,524,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:566,reliability,doe,does,566,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:104,safety,error,error,104,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:559,safety,safe,safety,559,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:7,testability,assert,assertion,7,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:49,testability,assert,assertion,49,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:901,testability,assert,assertion-vector-iterators-incompatible-c,901,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:104,usability,error,error,104,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13321:575,usability,help,help,575,"Fix an assertion failure on Windows; Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode. In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13321
https://github.com/root-project/root/pull/13322:22,availability,failur,failure,22,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:64,availability,failur,failure,64,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:22,deployability,fail,failure,22,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:64,deployability,fail,failure,64,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:285,deployability,contain,container,285,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:241,interoperability,standard,standard,241,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:22,performance,failur,failure,22,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:64,performance,failur,failure,64,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:22,reliability,fail,failure,22,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:64,reliability,fail,failure,64,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:444,security,access,access,444,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:12,testability,assert,assertion,12,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:54,testability,assert,assertion,54,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/pull/13322:475,usability,behavi,behavior,475,"Fix another assertion failure on Windows; Fix a debug assertion failure `can't dereference value-initialized vector iterator` . With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13322
https://github.com/root-project/root/issues/13323:10,deployability,updat,update,10,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:90,deployability,updat,update,90,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:393,deployability,API,APIs,393,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:393,integrability,API,APIs,393,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:393,interoperability,API,APIs,393,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:10,safety,updat,update,10,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:90,safety,updat,update,90,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:10,security,updat,update,10,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:90,security,updat,update,90,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:458,security,access,accessed,458,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/issues/13323:642,testability,context,context,642,"Script to update PDG table; ### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13323
https://github.com/root-project/root/pull/13324:26,availability,failur,failure,26,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:68,availability,failur,failure,68,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:26,deployability,fail,failure,26,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:68,deployability,fail,failure,68,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:26,performance,failur,failure,26,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:68,performance,failur,failure,68,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:26,reliability,fail,failure,26,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:68,reliability,fail,failure,68,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:16,testability,assert,assertion,16,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/pull/13324:58,testability,assert,assertion,58,"Fix yet another assertion failure on Windows; Fix a debug assertion failure ""can't decrement vector iterator before begin"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13324
https://github.com/root-project/root/issues/13325:16,availability,failur,failure,16,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:349,availability,failur,failure,349,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:863,availability,Operat,Operating,863,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:16,deployability,fail,failure,16,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:349,deployability,fail,failure,349,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:463,deployability,contain,container,463,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:788,deployability,version,version,788,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:819,deployability,Instal,Installation,819,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:788,integrability,version,version,788,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:419,interoperability,standard,standard,419,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:788,modifiability,version,version,788,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:16,performance,failur,failure,16,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:349,performance,failur,failure,349,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:16,reliability,fail,failure,16,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:349,reliability,fail,failure,349,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:762,safety,test,tests,762,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:619,security,access,access,619,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:6,testability,assert,assertion,6,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:339,testability,assert,assertion,339,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:762,testability,test,tests,762,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:905,testability,context,context,905,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/issues/13325:650,usability,behavi,behavior,650,"Debug assertion failure ""cannot seek vector iterator after end"" in RTensor.hxx; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):. ```. shape.insert(shape.end() + 1 + idx, 1);. ```. generates a debug assertion failure ""cannot seek vector iterator after end"". As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13325
https://github.com/root-project/root/pull/13326:174,energy efficiency,reduc,reduced,174,"[TCling] Fix suppression of enum forward declarations [v6.28]; There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13326
https://github.com/root-project/root/pull/13326:138,safety,test,test,138,"[TCling] Fix suppression of enum forward declarations [v6.28]; There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13326
https://github.com/root-project/root/pull/13326:138,testability,test,test,138,"[TCling] Fix suppression of enum forward declarations [v6.28]; There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13326
https://github.com/root-project/root/pull/13327:174,energy efficiency,reduc,reduced,174,"[TCling] Fix suppression of enum forward declarations [v6.26]; There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13327
https://github.com/root-project/root/pull/13327:138,safety,test,test,138,"[TCling] Fix suppression of enum forward declarations [v6.26]; There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13327
https://github.com/root-project/root/pull/13327:138,testability,test,test,138,"[TCling] Fix suppression of enum forward declarations [v6.26]; There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13327
https://github.com/root-project/root/pull/13328:186,availability,failur,failure,186,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13328:186,deployability,fail,failure,186,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13328:308,deployability,contain,container,308,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13328:264,interoperability,standard,standard,264,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13328:186,performance,failur,failure,186,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13328:186,reliability,fail,failure,186,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13328:9,testability,assert,assertion,9,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13328:176,testability,assert,assertion,176,"Fixes an assertion ""can't dereference invalidated vector iterator""; Print info before inserting a value in the vector (therefore invalidating the iterator). This fixes a debug assertion failure ""can't dereference invalidated vector iterator"", as explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/insert):. > Causes reallocation if the new size() is greater than the old capacity(). If the new size() is greater than capacity(), all iterators and references are invalidated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13328
https://github.com/root-project/root/pull/13329:201,availability,Sli,Slightly,201,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:474,availability,slo,slots,474,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:487,availability,slo,slots,487,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:521,availability,slo,slots,521,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:581,availability,cluster,cluster,581,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:860,availability,slo,slots,860,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:944,availability,avail,available,944,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:1015,availability,slo,slots,1015,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:581,deployability,cluster,cluster,581,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:915,deployability,resourc,resource,915,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:408,energy efficiency,schedul,scheduling,408,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:606,energy efficiency,optim,optimizations,606,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:642,energy efficiency,Load,Load,642,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:828,energy efficiency,current,currently,828,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:915,energy efficiency,resourc,resource,915,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:721,integrability,batch,batch,721,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:531,interoperability,distribut,distributed,531,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:388,performance,Multi-thread,Multi-threaded,388,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:408,performance,schedul,scheduling,408,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:606,performance,optimiz,optimizations,606,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:642,performance,Load,Load,642,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:721,performance,batch,batch,721,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:915,performance,resourc,resource,915,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:954,performance,memor,memory,954,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:1046,performance,time,time,1046,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:201,reliability,Sli,Slightly,201,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:474,reliability,slo,slots,474,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:487,reliability,slo,slots,487,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:521,reliability,slo,slots,521,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:860,reliability,slo,slots,860,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:944,reliability,availab,available,944,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:1015,reliability,slo,slots,1015,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:915,safety,resourc,resource,915,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:944,safety,avail,available,944,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:944,security,availab,available,944,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:210,testability,simpl,simplifies,210,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:915,testability,resourc,resource,915,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:19,usability,support,support,19,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:210,usability,simpl,simplifies,210,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:225,usability,prototyp,prototype,225,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:319,usability,prototyp,prototypes,319,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:360,usability,prototyp,prototypes,360,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13329:954,usability,memor,memory,954,"[ntuple] Add chain support for RDF data source; Adds a new constructor to the RNTuple RDF data source that takes an ntuple name and a list of files. The data source then treats these files as a chain. Slightly simplifies the prototype construction in the RNTuple data source: instead of constructing full column reader prototypes, only the corresponding field prototypes are constructed. Multi-threaded work scheduling is as follows:. - As long as there are more files than slots: every slots get a file. - For the tail: slots get distributed over the remaining files and align on cluster boundaries. Some optimizations for follow-up PRs:. - Load the next ranges in the background. In particular that would open the next batch of files in the backgound. - Clone page sources without reopening the file. - The next set of ranges currently gives up to number of slots ranges. However, it would make more sense to use resource constraints such as available memory or number of open file descriptors as a limit and let slots work on more ranges at a time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13329
https://github.com/root-project/root/pull/13331:299,interoperability,semant,semantic,299,"[ntuple] Add more field-related inspector functions ; With this PR, a new method `GetFieldsByName` is added to the `RNTupleInspector` and the option to get the number of fields whose type matches a certain regular expression is added. The first is useful for RNTuples where field names have certain semantic meaning (e.g. `.*AuxDyn`). The second can be used to group certain templated types (e.g. `std::vector<.*>`). These additions are also in anticipation of a larger PR that will add functionality to get more complete statistics about a set of fields (and columns).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13331
https://github.com/root-project/root/pull/13331:513,safety,compl,complete,513,"[ntuple] Add more field-related inspector functions ; With this PR, a new method `GetFieldsByName` is added to the `RNTupleInspector` and the option to get the number of fields whose type matches a certain regular expression is added. The first is useful for RNTuples where field names have certain semantic meaning (e.g. `.*AuxDyn`). The second can be used to group certain templated types (e.g. `std::vector<.*>`). These additions are also in anticipation of a larger PR that will add functionality to get more complete statistics about a set of fields (and columns).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13331
https://github.com/root-project/root/pull/13331:513,security,compl,complete,513,"[ntuple] Add more field-related inspector functions ; With this PR, a new method `GetFieldsByName` is added to the `RNTupleInspector` and the option to get the number of fields whose type matches a certain regular expression is added. The first is useful for RNTuples where field names have certain semantic meaning (e.g. `.*AuxDyn`). The second can be used to group certain templated types (e.g. `std::vector<.*>`). These additions are also in anticipation of a larger PR that will add functionality to get more complete statistics about a set of fields (and columns).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13331
https://github.com/root-project/root/pull/13333:20,usability,prototyp,prototypes,20,[DF] use RFieldBase prototypes in RNTupleDS; Replaces the more heavy-weight RColumnReader prototypes by RFieldBase prototypes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13333
https://github.com/root-project/root/pull/13333:90,usability,prototyp,prototypes,90,[DF] use RFieldBase prototypes in RNTupleDS; Replaces the more heavy-weight RColumnReader prototypes by RFieldBase prototypes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13333
https://github.com/root-project/root/pull/13333:115,usability,prototyp,prototypes,115,[DF] use RFieldBase prototypes in RNTupleDS; Replaces the more heavy-weight RColumnReader prototypes by RFieldBase prototypes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13333
https://github.com/root-project/root/pull/13334:252,deployability,integr,integral,252,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:313,deployability,integr,integral,313,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:392,deployability,integr,integrals,392,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:644,deployability,integr,integral,644,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:694,deployability,integr,integral,694,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:730,deployability,integr,integral,730,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:829,deployability,integr,integral,829,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:913,deployability,integr,integrals,913,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:930,energy efficiency,GPU,GPU,930,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:252,integrability,integr,integral,252,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:300,integrability,wrap,wrapping,300,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:313,integrability,integr,integral,313,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:392,integrability,integr,integrals,392,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:644,integrability,integr,integral,644,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:694,integrability,integr,integral,694,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:730,integrability,integr,integral,730,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:829,integrability,integr,integral,829,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:882,integrability,event,eventually,882,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:913,integrability,integr,integrals,913,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:252,interoperability,integr,integral,252,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:313,interoperability,integr,integral,313,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:392,interoperability,integr,integrals,392,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:644,interoperability,integr,integral,644,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:694,interoperability,integr,integral,694,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:730,interoperability,integr,integral,730,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:829,interoperability,integr,integral,829,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:913,interoperability,integr,integrals,913,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:252,modifiability,integr,integral,252,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:313,modifiability,integr,integral,313,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:392,modifiability,integr,integrals,392,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:644,modifiability,integr,integral,644,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:694,modifiability,integr,integral,694,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:730,modifiability,integr,integral,730,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:829,modifiability,integr,integral,829,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:913,modifiability,integr,integrals,913,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:930,performance,GPU,GPU,930,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:252,reliability,integr,integral,252,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:313,reliability,integr,integral,313,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:392,reliability,integr,integrals,392,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:644,reliability,integr,integral,644,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:694,reliability,integr,integral,694,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:730,reliability,integr,integral,730,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:829,reliability,integr,integral,829,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:913,reliability,integr,integrals,913,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:363,safety,test,tests,363,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:440,safety,test,test,440,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:252,security,integr,integral,252,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:313,security,integr,integral,313,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:392,security,integr,integrals,392,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:644,security,integr,integral,644,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:694,security,integr,integral,694,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:730,security,integr,integral,730,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:829,security,integr,integral,829,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:913,security,integr,integrals,913,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:252,testability,integr,integral,252,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:313,testability,integr,integral,313,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:358,testability,unit,unit,358,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:363,testability,test,tests,363,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:392,testability,integr,integrals,392,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:409,testability,simpl,simple,409,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:440,testability,test,test,440,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:644,testability,integr,integral,644,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:694,testability,integr,integral,694,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:730,testability,integr,integral,730,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:829,testability,integr,integral,829,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:843,testability,simpl,simpler,843,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:913,testability,integr,integrals,913,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:409,usability,simpl,simple,409,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13334:843,usability,simpl,simpler,843,"[RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++. RooWorkspace ws;. ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");. RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};. integral->Print(""v"");. std::cout << integral->getVal() << std::endl;. ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13334
https://github.com/root-project/root/pull/13336:156,deployability,depend,dependencies,156,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:191,deployability,integr,integration,191,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:256,deployability,integr,integration,256,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:386,deployability,integr,integration,386,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:111,integrability,wrap,wrapper,111,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:156,integrability,depend,dependencies,156,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:191,integrability,integr,integration,191,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:256,integrability,integr,integration,256,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:386,integrability,integr,integration,386,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:111,interoperability,wrapper,wrapper,111,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:191,interoperability,integr,integration,191,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:256,interoperability,integr,integration,256,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:386,interoperability,integr,integration,386,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:5,modifiability,Refact,Refactor,5,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:82,modifiability,refact,refactored,82,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:156,modifiability,depend,dependencies,156,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:191,modifiability,integr,integration,191,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:256,modifiability,integr,integration,256,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:280,modifiability,reu,reused,280,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:386,modifiability,integr,integration,386,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:5,performance,Refactor,Refactor,5,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:82,performance,refactor,refactored,82,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:174,reliability,doe,does,174,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:191,reliability,integr,integration,191,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:256,reliability,integr,integration,256,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:386,reliability,integr,integration,386,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:156,safety,depend,dependencies,156,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:191,security,integr,integration,191,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:256,security,integr,integration,256,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:386,security,integr,integration,386,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:156,testability,depend,dependencies,156,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:191,testability,integr,integration,191,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:256,testability,integr,integration,256,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13336:386,testability,integr,integration,386,"[RF] Refactor RooIntegrator1D to use free functions; The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13336
https://github.com/root-project/root/pull/13337:164,deployability,updat,updated,164,[RF] RooPower RooExpPoly implementation for the RooBatchCompute.cxx; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13337
https://github.com/root-project/root/pull/13337:134,safety,test,tested,134,[RF] RooPower RooExpPoly implementation for the RooBatchCompute.cxx; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13337
https://github.com/root-project/root/pull/13337:164,safety,updat,updated,164,[RF] RooPower RooExpPoly implementation for the RooBatchCompute.cxx; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13337
https://github.com/root-project/root/pull/13337:164,security,updat,updated,164,[RF] RooPower RooExpPoly implementation for the RooBatchCompute.cxx; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13337
https://github.com/root-project/root/pull/13337:134,testability,test,tested,134,[RF] RooPower RooExpPoly implementation for the RooBatchCompute.cxx; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13337
https://github.com/root-project/root/issues/13338:1063,availability,error,error,1063," tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function defined after main . void createTree(const std::string &outputFile)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4504,availability,Operat,Operating,4504,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4347,deployability,version,version,4347,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4361,deployability,Version,Version,4361,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4394,deployability,version,versions,4394,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4460,deployability,Instal,Installation,4460,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4347,integrability,version,version,4347,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4361,integrability,Version,Version,4361,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4394,integrability,version,versions,4394,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4347,modifiability,version,version,4347,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4361,modifiability,Version,Version,4361,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4394,modifiability,version,versions,4394,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:414,performance,time,times,414,"Bug: TEntryList and TTree inconsitency of entry number returned by tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:825,performance,time,times,825,"Bug: TEntryList and TTree inconsitency of entry number returned by tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:1063,performance,error,error,1063," tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function defined after main . void createTree(const std::string &outputFile)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:1063,safety,error,error,1063," tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function defined after main . void createTree(const std::string &outputFile)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:2101,safety,test,test,2101," the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function defined after main . void createTree(const std::string &outputFile);. int main(){. . // number of the test . // set to 0, 1 or 2. int numTest = 2; . // Define an entry list . TEntryList *entryList = new TEntryList(); . std::vector<long long int> entries={. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19. };. // fill the entry list . for (long long int entry : entries){. entryList->Enter(entry);. }. // Create tree . std::string inFileName = ""myFile.root""; . createTree(inFileName);. // Read tree . TFile *file = nullptr; . TTree *tree = nullptr;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryN",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:475,testability,simpl,simple,475,"Bug: TEntryList and TTree inconsitency of entry number returned by tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:919,testability,simpl,simple,919,"Bug: TEntryList and TTree inconsitency of entry number returned by tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:2101,testability,test,test,2101," the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function defined after main . void createTree(const std::string &outputFile);. int main(){. . // number of the test . // set to 0, 1 or 2. int numTest = 2; . // Define an entry list . TEntryList *entryList = new TEntryList(); . std::vector<long long int> entries={. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19. };. // fill the entry list . for (long long int entry : entries){. entryList->Enter(entry);. }. // Create tree . std::string inFileName = ""myFile.root""; . createTree(inFileName);. // Read tree . TFile *file = nullptr; . TTree *tree = nullptr;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryN",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:4544,testability,context,context,4544,"r;. file = TFile::Open(inFileName.c_str());. tree = (TTree*) file->Get(""myTree"");. // On purpose get entry 15 . // before setting entry list for tree . entryList->GetEntry(15);. tree->SetEntryList(entryList);. . if (numTest == 0){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl;. }. . if (numTest == 1){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. }. if (numTest == 2){. std::cout << ""tree->GetEntryNumber(0)="" << tree->GetEntryNumber(0) << std::endl; . std::cout << ""tree->GetEntryNumber(1)="" << tree->GetEntryNumber(1) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. std::cout << ""tree->GetEntryNumber(2)="" << tree->GetEntryNumber(2) << std::endl;. }. return 0; . }. void createTree(const std::string &outputFile){. unsigned int NEntries = 100;. TTree *tree = nullptr;. double x1;. // create file . TFile *file = TFile::Open(outputFile.c_str(),""recreate""); . // init tree . tree = new TTree(""myTree"",""myTree""); . tree->Branch(""x1"", &x1);. for (unsigned int iEntry = 0 ; iEntry < NEntries; iEntry++){. x1 = iEntry;. tree->Fill();. }. file->Write(); . delete file;. }. ```. ### ROOT version. ROOT Version: 6.26/08 . I believe all versions are affected by that bug even the most recent ones . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:475,usability,simpl,simple,475,"Bug: TEntryList and TTree inconsitency of entry number returned by tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:919,usability,simpl,simple,919,"Bug: TEntryList and TTree inconsitency of entry number returned by tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:1046,usability,behavi,behaviour,1046,"ber returned by tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function defined after main . void createTree(const std::stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/issues/13338:1063,usability,error,error,1063," tree if entry list has been already used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because there is a bug when setting an entry list that has already been used to a `TTree`. The entry number returned by `tree->GetEntryNumber(index)` are messed up until that function is called 2 times in a row for the same index. You can find a standalone simple reproducer of the bug below. . In that code by setting `numTest` to `0`, `1` or `2` you will obtain the different print below. . With that example by calling `tree->GetEntryNumber(index)` it should return the value `index` . e.g. `tree->GetEntryNumber(2)` should return `2`. However until the `GetEntryNumber()` function has not been called 2 times for the same index then the returned entry number is NOT the expected one. . Here it is simple to solve the issue i.e. not call `entryList->GetEntry(15);` before setting the entry list to the tree . but I find this behaviour really error prone as one would need to be sure the entry list has never been used basically. . On the other hand using the copy constructor allows not having this issue because I think the `fLastIndexQueried` is reset to `-1` . ```. tree->SetEntryList( new TEntryList(*entryList) );. ``` . Tagging @pcanal and @Axel-Naumann . For `numTest=0`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. tree->GetEntryNumber(0)=0. ```. For `numTest=1`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(1)=1. tree->GetEntryNumber(1)=1. ```. For `numTest=2`. ```. tree->GetEntryNumber(0)=16. tree->GetEntryNumber(1)=17. tree->GetEntryNumber(2)=18. tree->GetEntryNumber(2)=2. tree->GetEntryNumber(2)=2. ```. ### Reproducer. ```C++. #include ""TFile.h"". #include ""TTree.h"". #include ""TError.h"". #include ""TEntryList.h"". #include<string>. #include<vector>. #include<iostream>. // function defined after main . void createTree(const std::string &outputFile)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13338
https://github.com/root-project/root/pull/13339:44,usability,support,support,44,Expanded the types that RBatchGenerator can support; Expanded the types that RBatchGenerator can support to all accepted numeric values supported by TTree and RVec. This PR fixes the problem that some types that should be supported were not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13339
https://github.com/root-project/root/pull/13339:97,usability,support,support,97,Expanded the types that RBatchGenerator can support; Expanded the types that RBatchGenerator can support to all accepted numeric values supported by TTree and RVec. This PR fixes the problem that some types that should be supported were not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13339
https://github.com/root-project/root/pull/13339:136,usability,support,supported,136,Expanded the types that RBatchGenerator can support; Expanded the types that RBatchGenerator can support to all accepted numeric values supported by TTree and RVec. This PR fixes the problem that some types that should be supported were not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13339
https://github.com/root-project/root/pull/13339:222,usability,support,supported,222,Expanded the types that RBatchGenerator can support; Expanded the types that RBatchGenerator can support to all accepted numeric values supported by TTree and RVec. This PR fixes the problem that some types that should be supported were not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13339
https://github.com/root-project/root/issues/13340:760,availability,Operat,Operating,760,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:688,deployability,version,version,688,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:716,deployability,Instal,Installation,716,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:688,integrability,version,version,688,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:688,modifiability,version,version,688,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:7,reliability,doe,does,7,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:216,reliability,doe,does,216,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:807,testability,context,context,807,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:27,usability,minim,minimum,27,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:240,usability,minim,minimum,240,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/issues/13340:391,usability,minim,minimum,391,"TGraph does not re-compute minimum and maximum when a point is added; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When adding a point to a TGraph with the SetPoint() method, the object does not re-compute its minimum (fMinimum) and maximum (fMaximum). In the following macro I just added one point with random X and Y values to an empty TGraph and the printed minimum and maximum are still set at their default value (-1111). ### Reproducer. #include ""TGraph.h"". void macro(). {. 	TGraph* gr = new TGraph();. 	gr->Set(gr->GetN()+1);. 	gr->SetPoint(gr->GetN()-1, 2, 10);. 	std::cout << gr->GetMinimum() << ""\t"" << gr->GetMaximum() << std::endl;. }. ### ROOT version. root 6.26/10 . ### Installation method. built from source. ### Operating system. Ubuntu 20.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13340
https://github.com/root-project/root/pull/13341:712,availability,avail,available,712,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:776,availability,avail,available,776,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:800,deployability,API,API,800,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:858,deployability,updat,updated,858,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:693,integrability,rout,routine,693,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:793,integrability,pub,public,793,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:800,integrability,API,API,800,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:800,interoperability,API,API,800,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:133,performance,memor,memory,133,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:712,reliability,availab,available,712,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:776,reliability,availab,available,776,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:115,safety,avoid,avoid,115,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:344,safety,avoid,avoids,344,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:460,safety,avoid,avoid,460,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:591,safety,input,input,591,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:667,safety,avoid,avoid,667,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:712,safety,avail,available,712,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:776,safety,avail,available,776,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:827,safety,test,tested,827,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:858,safety,updat,updated,858,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:712,security,availab,available,712,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:776,security,availab,available,776,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:858,security,updat,updated,858,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:827,testability,test,tested,827,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:133,usability,memor,memory,133,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:280,usability,feedback,feedback,280,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13341:591,usability,input,input,591,"[WIP] TClass::GetClass: no interpreter lookups for fundamental types; Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:. This PR avoids lookups and parsing in some cases. One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:. This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it. In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally. - [v ] updated the docs (if necessary). This PR fixes #9029.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13341
https://github.com/root-project/root/pull/13343:122,energy efficiency,draw,drawn,122,"Implement options for Honeycomb; New parameter `option` for Honeycomb. - If the option ""v"" is specified, the hexagons are drawn ""vertically"" (default). - If the option ""h"" is selected they are drawn ""horizontally"". The option ""h"" has been suggested by Sam Liechty in this forum thread:. https://root-forum.cern.ch/t/rotate-a-figure-90-degrees/55623/7. Thanks Sam !",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13343
https://github.com/root-project/root/pull/13343:193,energy efficiency,draw,drawn,193,"Implement options for Honeycomb; New parameter `option` for Honeycomb. - If the option ""v"" is specified, the hexagons are drawn ""vertically"" (default). - If the option ""h"" is selected they are drawn ""horizontally"". The option ""h"" has been suggested by Sam Liechty in this forum thread:. https://root-forum.cern.ch/t/rotate-a-figure-90-degrees/55623/7. Thanks Sam !",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13343
https://github.com/root-project/root/pull/13343:94,interoperability,specif,specified,94,"Implement options for Honeycomb; New parameter `option` for Honeycomb. - If the option ""v"" is specified, the hexagons are drawn ""vertically"" (default). - If the option ""h"" is selected they are drawn ""horizontally"". The option ""h"" has been suggested by Sam Liechty in this forum thread:. https://root-forum.cern.ch/t/rotate-a-figure-90-degrees/55623/7. Thanks Sam !",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13343
https://github.com/root-project/root/pull/13343:37,modifiability,paramet,parameter,37,"Implement options for Honeycomb; New parameter `option` for Honeycomb. - If the option ""v"" is specified, the hexagons are drawn ""vertically"" (default). - If the option ""h"" is selected they are drawn ""horizontally"". The option ""h"" has been suggested by Sam Liechty in this forum thread:. https://root-forum.cern.ch/t/rotate-a-figure-90-degrees/55623/7. Thanks Sam !",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13343
https://github.com/root-project/root/pull/13343:316,security,rotat,rotate-a-figure-,316,"Implement options for Honeycomb; New parameter `option` for Honeycomb. - If the option ""v"" is specified, the hexagons are drawn ""vertically"" (default). - If the option ""h"" is selected they are drawn ""horizontally"". The option ""h"" has been suggested by Sam Liechty in this forum thread:. https://root-forum.cern.ch/t/rotate-a-figure-90-degrees/55623/7. Thanks Sam !",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13343
https://github.com/root-project/root/pull/13344:433,availability,operat,operation,433,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:78,energy efficiency,schedul,scheduling,78,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:397,energy efficiency,schedul,scheduler,397,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:29,integrability,sub,submits,29,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:199,integrability,sub,submit,199,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:337,integrability,sub,submit,337,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:0,interoperability,Distribut,Distributed,0,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:206,interoperability,distribut,distributed,206,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:279,interoperability,distribut,distributed,279,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:385,interoperability,distribut,distributed,385,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:495,interoperability,distribut,distributed,495,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:507,interoperability,prox,proxies,507,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:37,performance,concurren,concurrently,37,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:78,performance,schedul,scheduling,78,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:181,performance,time,time,181,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:225,performance,concurren,concurrently,225,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:365,performance,concurren,concurrently,365,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:397,performance,schedul,scheduler,397,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:143,usability,user,users,143,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13344:246,usability,user,user,246,"Distributed RunGraphs always submits concurrently; Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13344
https://github.com/root-project/root/pull/13345:23,usability,support,support,23,RBatchGenerator: Added support for multiple target columns; RBatchGenerator now supports multiple target columns. The target should be given as a list of strings and the data will be returned in the same order. The user can still provide a string when using a single target.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13345
https://github.com/root-project/root/pull/13345:80,usability,support,supports,80,RBatchGenerator: Added support for multiple target columns; RBatchGenerator now supports multiple target columns. The target should be given as a list of strings and the data will be returned in the same order. The user can still provide a string when using a single target.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13345
https://github.com/root-project/root/pull/13345:215,usability,user,user,215,RBatchGenerator: Added support for multiple target columns; RBatchGenerator now supports multiple target columns. The target should be given as a list of strings and the data will be returned in the same order. The user can still provide a string when using a single target.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13345
https://github.com/root-project/root/pull/13347:119,deployability,build,build,119,"[skip-ci][windows] Fix root-config.bat; Add the missing `--prefix` flag, properly set `%ROOTSYS%` when called from the build directory, and therefore fix the variables relative to `%ROOTSYS%`, like for example `--tutdir` I will fix the `CMakeLists.txt` of `roottest` once this PR is merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13347
https://github.com/root-project/root/pull/13347:158,modifiability,variab,variables,158,"[skip-ci][windows] Fix root-config.bat; Add the missing `--prefix` flag, properly set `%ROOTSYS%` when called from the build directory, and therefore fix the variables relative to `%ROOTSYS%`, like for example `--tutdir` I will fix the `CMakeLists.txt` of `roottest` once this PR is merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13347
https://github.com/root-project/root/pull/13348:60,availability,state,state,60,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:20,deployability,Unload,UnloadFile,20,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:87,deployability,UPDAT,UPDATE,87,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:269,energy efficiency,Load,LoadFile,269,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:60,integrability,state,state,60,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:4,performance,lock,lock,4,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:78,performance,lock,locking,78,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:269,performance,Load,LoadFile,269,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:333,performance,lock,lock,333,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:87,safety,UPDAT,UPDATE,87,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:150,safety,test,test,150,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:373,safety,test,test,373,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:4,security,lock,lock,4,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:35,security,modif,modifies,35,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:78,security,lock,locking,78,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:87,security,UPDAT,UPDATE,87,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:333,security,lock,lock,333,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:145,testability,unit,unit,145,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:150,testability,test,test,150,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13348:373,testability,test,test,373,"Add lock in TCling::UnloadFile; It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13348
https://github.com/root-project/root/pull/13349:4,performance,lock,locks,4,"Add locks in TClingMethodArgInfo; The first two commits are cherry-picked from #13302 , so we need that one in before merging this one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13349
https://github.com/root-project/root/pull/13349:4,security,lock,locks,4,"Add locks in TClingMethodArgInfo; The first two commits are cherry-picked from #13302 , so we need that one in before merging this one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13349
https://github.com/root-project/root/pull/13350:147,deployability,integr,integrator,147,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:302,deployability,integr,integrators,302,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:573,deployability,integr,integrator,573,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:723,deployability,integr,integrator,723,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:768,deployability,manag,management,768,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:789,deployability,integr,integrator,789,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:768,energy efficiency,manag,management,768,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:83,integrability,pub,public,83,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:90,integrability,interfac,interface,90,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:147,integrability,integr,integrator,147,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:302,integrability,integr,integrators,302,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:564,integrability,wrap,wrap,564,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:573,integrability,integr,integrator,573,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:644,integrability,pub,public,644,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:656,integrability,interfac,interface,656,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:723,integrability,integr,integrator,723,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:789,integrability,integr,integrator,789,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:32,interoperability,plug,plugin,32,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:90,interoperability,interfac,interface,90,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:105,interoperability,plug,plugin,105,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:147,interoperability,integr,integrator,147,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:158,interoperability,plug,plugin,158,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:302,interoperability,integr,integrators,302,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:328,interoperability,plug,plugins,328,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:573,interoperability,integr,integrator,573,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:656,interoperability,interfac,interface,656,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:723,interoperability,integr,integrator,723,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:789,interoperability,integr,integrator,789,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:90,modifiability,interfac,interface,90,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:122,modifiability,refact,refactored,122,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:147,modifiability,integr,integrator,147,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:302,modifiability,integr,integrators,302,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:573,modifiability,integr,integrator,573,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:656,modifiability,interfac,interface,656,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:723,modifiability,integr,integrator,723,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:789,modifiability,integr,integrator,789,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:122,performance,refactor,refactored,122,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:147,reliability,integr,integrator,147,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:165,reliability,doe,does,165,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:302,reliability,integr,integrators,302,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:573,reliability,integr,integrator,573,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:723,reliability,integr,integrator,723,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:789,reliability,integr,integrator,789,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:735,safety,avoid,avoiding,735,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:768,safety,manag,management,768,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:147,security,integr,integrator,147,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:302,security,integr,integrators,302,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:573,security,integr,integrator,573,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:723,security,integr,integrator,723,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:789,security,integr,integrator,789,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:147,testability,integr,integrator,147,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:302,testability,integr,integrators,302,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:573,testability,integr,integrator,573,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:723,testability,integr,integrator,723,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:789,testability,integr,integrator,789,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13350:651,usability,user,user,651,"[RF] Improve `RooNumIntFactory` plugin system and remove RooIntegratorBinding from public interface; The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation. detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to. wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also. changed such that it takes ownership of the integrator, avoiding the. need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13350
https://github.com/root-project/root/pull/13351:18,deployability,depend,dependencies,18,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:116,deployability,depend,dependencies,116,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:18,integrability,depend,dependencies,18,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:116,integrability,depend,dependencies,116,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:18,modifiability,depend,dependencies,18,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:116,modifiability,depend,dependencies,116,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:18,safety,depend,dependencies,18,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:39,safety,test,tests,39,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:70,safety,test,test,70,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:103,safety,test,test,103,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:116,safety,depend,dependencies,116,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:18,testability,depend,dependencies,18,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:34,testability,unit,unit,34,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:39,testability,test,tests,39,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:65,testability,unit,unit,65,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:70,testability,test,test,70,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:98,testability,unit,unit,98,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:103,testability,test,test,103,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/pull/13351:116,testability,depend,dependencies,116,[ntuple] clean-up dependencies of unit tests; Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13351
https://github.com/root-project/root/issues/13352:241,availability,state,state,241,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:233,energy efficiency,Current,Current,233,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:334,energy efficiency,current,currently,334,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:241,integrability,state,state,241,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:13,safety,compl,complex,13,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:213,safety,compl,complex,213,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:295,safety,compl,complex,295,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:13,security,compl,complex,13,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:213,security,compl,complex,213,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:295,security,compl,complex,295,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:303,security,sign,signal,303,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:638,testability,simpl,simply,638,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:892,testability,context,context,892,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:195,usability,UI,UI,195,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/issues/13352:638,usability,simpl,simply,638,"Histogram of complex numbers and browser representation; ### Feature description. How hard would it be to implement a class (somehow) deriving from histogram classes, but showing in the TBrowser UI some sort of a complex histogram ? Current state: I have histograms storing Re and Im parts of a complex signal for instance. This goes currently in TBrowser as:. ```. my.root. -> TH1D* : histogram[Re]. -> TH1D* : histogram[Im]. -> TH1D* : histogram[Ph]. -> TH1D* : histogram[Mag]. ```. I would like to display something like:. ```. my.root. TComplexH1D* . |. --> Re (TH1D). --> Im (TH1D). --> Ph (TH1D). --> Mag (TH1D). ```. This wouldn't simply be a class with 4 histograms inside, I don't want to spread histograms everywhere in my rootfiles, but represent this object as a single key and still be able to open it and look inside.. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13352
https://github.com/root-project/root/pull/13353:112,deployability,build,build,112,[ntuple] Correct LinkDef entries for enum classes; This fixes `gtest-tree-ntuple-v7-test-ntuple-types` in a PCH build.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13353
https://github.com/root-project/root/pull/13353:84,safety,test,test-ntuple-types,84,[ntuple] Correct LinkDef entries for enum classes; This fixes `gtest-tree-ntuple-v7-test-ntuple-types` in a PCH build.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13353
https://github.com/root-project/root/pull/13353:84,testability,test,test-ntuple-types,84,[ntuple] Correct LinkDef entries for enum classes; This fixes `gtest-tree-ntuple-v7-test-ntuple-types` in a PCH build.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13353
https://github.com/root-project/root/pull/13354:0,deployability,Updat,Update,0,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:75,deployability,automat,automatically,75,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:89,deployability,updat,update,89,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:278,deployability,updat,updated,278,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:0,safety,Updat,Update,0,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:89,safety,updat,update,89,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:248,safety,test,tested,248,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:278,safety,updat,updated,278,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:0,security,Updat,Update,0,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:89,security,updat,update,89,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:278,security,updat,updated,278,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:75,testability,automat,automatically,75,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13354:248,testability,test,tested,248,Update script for PDG table; # This Pull request:. Adds a python script to automatically update the pdg_table.txt from the [Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt). ## Changes or fixes:. none. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #13323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13354
https://github.com/root-project/root/pull/13355:64,modifiability,layer,layering,64,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:77,reliability,doe,does,77,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:37,safety,test,test,37,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:52,safety,test,test,52,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:86,safety,test,test,86,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:120,safety,test,tested,120,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:170,safety,test,test,170,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:32,testability,unit,unit,32,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:37,testability,test,test,37,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:47,testability,unit,unit,47,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:52,testability,test,test,52,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:86,testability,test,test,86,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:120,testability,test,tested,120,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:165,testability,unit,unit,165,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13355:170,testability,test,test,170,[ntuple] remove unnecessary RDF unit test; The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13355
https://github.com/root-project/root/pull/13356:236,availability,error,errors,236,"[cmake] Check that the Protobuf compiler is found; On Ubuntu at least, the compiler is in a package separate of the development headers and libraries, but it is required to build `ROOTTMVASofieParser`. If missing, it leads to confusing errors such as `target pattern contains no '%'`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13356
https://github.com/root-project/root/pull/13356:173,deployability,build,build,173,"[cmake] Check that the Protobuf compiler is found; On Ubuntu at least, the compiler is in a package separate of the development headers and libraries, but it is required to build `ROOTTMVASofieParser`. If missing, it leads to confusing errors such as `target pattern contains no '%'`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13356
https://github.com/root-project/root/pull/13356:267,deployability,contain,contains,267,"[cmake] Check that the Protobuf compiler is found; On Ubuntu at least, the compiler is in a package separate of the development headers and libraries, but it is required to build `ROOTTMVASofieParser`. If missing, it leads to confusing errors such as `target pattern contains no '%'`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13356
https://github.com/root-project/root/pull/13356:92,modifiability,pac,package,92,"[cmake] Check that the Protobuf compiler is found; On Ubuntu at least, the compiler is in a package separate of the development headers and libraries, but it is required to build `ROOTTMVASofieParser`. If missing, it leads to confusing errors such as `target pattern contains no '%'`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13356
https://github.com/root-project/root/pull/13356:236,performance,error,errors,236,"[cmake] Check that the Protobuf compiler is found; On Ubuntu at least, the compiler is in a package separate of the development headers and libraries, but it is required to build `ROOTTMVASofieParser`. If missing, it leads to confusing errors such as `target pattern contains no '%'`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13356
https://github.com/root-project/root/pull/13356:236,safety,error,errors,236,"[cmake] Check that the Protobuf compiler is found; On Ubuntu at least, the compiler is in a package separate of the development headers and libraries, but it is required to build `ROOTTMVASofieParser`. If missing, it leads to confusing errors such as `target pattern contains no '%'`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13356
https://github.com/root-project/root/pull/13356:236,usability,error,errors,236,"[cmake] Check that the Protobuf compiler is found; On Ubuntu at least, the compiler is in a package separate of the development headers and libraries, but it is required to build `ROOTTMVASofieParser`. If missing, it leads to confusing errors such as `target pattern contains no '%'`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13356
https://github.com/root-project/root/issues/13359:4736,availability,Operat,Operating,4736,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:890,deployability,contain,contains,890,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4602,deployability,version,version,4602,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4628,deployability,Version,Version,4628,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4664,deployability,version,versions,4664,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4692,deployability,Instal,Installation,4692,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4713,deployability,Build,Build,4713,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4602,integrability,version,version,4602,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4628,integrability,Version,Version,4628,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4664,integrability,version,versions,4664,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:3881,interoperability,specif,specified,3881,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4602,modifiability,version,version,4602,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4628,modifiability,Version,Version,4628,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4664,modifiability,version,versions,4664,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:38,safety,input,input,38,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:294,safety,input,input,294,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:394,safety,input,input,394,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:604,safety,input,input,604,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:1416,safety,avoid,avoid,1416,"anal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:1482,safety,input,input,1482,"ed below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:1533,safety,input,input,1533,"0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:1775,safety,avoid,avoid,1775,"and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:2676,safety,test,test,2676,"ot` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:2961,safety,input,input,2961,"selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:3136,safety,input,input,3136,"ile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:3285,safety,avoid,avoid,3285," root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""his",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:3353,safety,input,input,3353,"ain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:3596,safety,avoid,avoid,3596,"ists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4611,safety,Test,Tested,4611,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4754,safety,Test,Tested,4754,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:443,testability,simpl,simple,443,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:2676,testability,test,test,2676,"ot` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4611,testability,Test,Tested,4611,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4754,testability,Test,Tested,4754,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4818,testability,context,context,4818,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:38,usability,input,input,38,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:294,usability,input,input,294,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:322,usability,user,user,322,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:394,usability,input,input,394,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:443,usability,simpl,simple,443,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:604,usability,input,input,604,"Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello, . I am creating this issue because I found a bug in the `TFileMerger` class in case there is a single input file provided and the user is requesting producing an output with only some objects from that input file. . Tagging @pcanal on that issue. . A simple standalone bug reproducer is provided below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:1482,usability,input,input,1482,"ed below. . In the script `numTest` can be set to `0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:1533,usability,input,input,1533,"0` or `1` . The case `numTest=0` allows illustrating the bug: . The input file `myFileWithHists.root` is created with 4 histograms: `hist1`, `hist2`, `hist3` and `hist4`. . The `TFileMerger` object should create a file `myExclusiveFile.root` and is required to only copy `hist1`, `hist2`. . But instead the full file is copied and `myExclusiveFile.root` contains all histograms. . ```. selectiveHadd Source file 1: myFileWithHists.root. [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x562d3abbe360. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. KEY: TH1F	hist3;1	hist3. KEY: TH1F	hist4;1	hist4. root [2] . ```. The case `numTest=1` is a way to avoid this bug. . One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . . In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file. ```. selectiveHadd Source file 1: myFileWithHists.root. Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root. selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:2961,usability,input,input,2961,"selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root . root [0] . Attaching file myExclusiveFile.root as _file0... (TFile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:3136,usability,input,input,3136,"ile *) 0x55932d5cd940. root [1] .ls. TFile**		myExclusiveFile.root	. TFile*		myExclusiveFile.root	. KEY: TH1F	hist1;1	hist1. KEY: TH1F	hist2;1	hist2. root [2] . ```. Many thanks in advance for fixing that issue, . Romain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:3353,usability,input,input,3353,"ain. ### Reproducer. ```C++. #include ""TFileMerger.h"". #include ""TSystem.h"". #include ""TUUID.h"". #include ""TFile.h"". #include ""TH1F.h"". #include <iostream>. #include <string> . // Function defined after the main function . void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test. // 0 or 1 . int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);. fileMerger.SetMsgPrefix(""selectiveHadd"");. fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/issues/13359:4543,usability,close,close,4543,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd . // The rest of objects will not be considered in the input files . fileMerger.AddObjectNames(""hist1"");. fileMerger.AddObjectNames(""hist2"");. // Set output file . fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) . fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){. . // In that case add a dummy file i.e. empty file . // In order to avoid the bug in in the TFileMerger class . // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();. // create a unique empty file . std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;. // Just create dummy file . TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");. delete file;. fileMerger.AddFile(dummyFileName.c_str());. }. . // Will only merge in the output files . // the list of objects specified . Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);. . fileMerger.PartialMerge(mode);. . return 0;. }. void createFileWithHists(const std::string &fileName){. TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);. TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);. TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);. TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);. hist2->Fill(2);. hist3->Fill(1);. hist3->Fill(1);. hist3->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. hist4->Fill(1);. // Write and close file. file->Write();. delete file;. }. ```. ### ROOT version. Tested with ROOT Version: 6.26/10. But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13359
https://github.com/root-project/root/pull/13360:199,modifiability,maintain,maintainance,199,"[math] Avoid warnings from Vc.h from deprecated enum comparisons; Similar to 736644bce3b, ignoring some warnings from `Vc` that will not be fixed upstream for the foreseeable time because `Vc` is in maintainance mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13360
https://github.com/root-project/root/pull/13360:175,performance,time,time,175,"[math] Avoid warnings from Vc.h from deprecated enum comparisons; Similar to 736644bce3b, ignoring some warnings from `Vc` that will not be fixed upstream for the foreseeable time because `Vc` is in maintainance mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13360
https://github.com/root-project/root/pull/13360:7,safety,Avoid,Avoid,7,"[math] Avoid warnings from Vc.h from deprecated enum comparisons; Similar to 736644bce3b, ignoring some warnings from `Vc` that will not be fixed upstream for the foreseeable time because `Vc` is in maintainance mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13360
https://github.com/root-project/root/pull/13360:199,safety,maintain,maintainance,199,"[math] Avoid warnings from Vc.h from deprecated enum comparisons; Similar to 736644bce3b, ignoring some warnings from `Vc` that will not be fixed upstream for the foreseeable time because `Vc` is in maintainance mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13360
https://github.com/root-project/root/issues/13361:644,availability,failur,failures,644,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:755,availability,Error,Error,755,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:955,availability,Error,Error,955,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1175,availability,Error,Error,1175,"from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1375,availability,Error,Error,1375,"t. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2384,availability,Operat,Operating,2384,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:644,deployability,fail,failures,644,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:702,deployability,build,building,702,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2318,deployability,version,version,2318,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2339,deployability,Instal,Installation,2339,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:671,energy efficiency,core,core-execStatusBitsCheck,671,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2226,energy efficiency,Load,LoadAllLibraries,2226,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:604,integrability,pub,public,604,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2318,integrability,version,version,2318,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1909,modifiability,inherit,inherits,1909,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2318,modifiability,version,version,2318,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:644,performance,failur,failures,644,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:755,performance,Error,Error,755,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:955,performance,Error,Error,955,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1175,performance,Error,Error,1175,"from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1375,performance,Error,Error,1375,"t. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2226,performance,Load,LoadAllLibraries,2226,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:644,reliability,fail,failures,644,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:755,safety,Error,Error,755,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:955,safety,Error,Error,955,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1175,safety,Error,Error,1175,"from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1375,safety,Error,Error,1375,"t. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:2424,testability,context,context,2424,"erData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:755,usability,Error,Error,755,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:955,usability,Error,Error,955,"TClass generates dictionary for transient `std::unique_ptr` member when it shouldn't; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. This issue stems from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1175,usability,Error,Error,1175,"from the problems arisen in #13134 . Among the `webgui` classes, there is the following layout:. ```cpp. // RFileDialog.hxx. class RFileDialog {. RBrowserData fBrowsable; ///<! central browsing element. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/issues/13361:1375,usability,Error,Error,1375,"t. };. // RBrowserData.hxx. class RBrowserDataCleanup;. class RBrowserData {. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. };. // RBrowserData.cxx. class RBrowserDataCleanup : public TObject {};. ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 . 2. Run the following macro. ```cpp. void rbrowserdatacleanup(){. gSystem->LoadAllLibraries();. ROOT::Detail::TStatusBitsChecker::CheckAllClasses();. }. ```. ### ROOT version. master. ### Installation method. built from sources",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13361
https://github.com/root-project/root/pull/13362:350,availability,avail,available,350,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:24,deployability,build,build,24,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:253,deployability,depend,dependencies,253,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:253,integrability,depend,dependencies,253,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:253,modifiability,depend,dependencies,253,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:350,reliability,availab,available,350,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:253,safety,depend,dependencies,253,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:350,safety,avail,available,350,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:350,security,availab,available,350,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13362:253,testability,depend,dependencies,253,"Fix and cleanup windows build (in Debug mode); - `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest). - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13362
https://github.com/root-project/root/pull/13363:124,deployability,build,building,124,[rbrowser] Make fCleanupHandle a pointer to TObject; This also fixes the test `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`. Closes https://github.com/root-project/root/issues/13058,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13363
https://github.com/root-project/root/pull/13363:93,energy efficiency,core,core-execStatusBitsCheck,93,[rbrowser] Make fCleanupHandle a pointer to TObject; This also fixes the test `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`. Closes https://github.com/root-project/root/issues/13058,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13363
https://github.com/root-project/root/pull/13363:73,safety,test,test,73,[rbrowser] Make fCleanupHandle a pointer to TObject; This also fixes the test `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`. Closes https://github.com/root-project/root/issues/13058,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13363
https://github.com/root-project/root/pull/13363:73,testability,test,test,73,[rbrowser] Make fCleanupHandle a pointer to TObject; This also fixes the test `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`. Closes https://github.com/root-project/root/issues/13058,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13363
https://github.com/root-project/root/pull/13363:164,usability,Close,Closes,164,[rbrowser] Make fCleanupHandle a pointer to TObject; This also fixes the test `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`. Closes https://github.com/root-project/root/issues/13058,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13363
https://github.com/root-project/root/pull/13364:156,deployability,updat,updated,156,[ci] Remove sonatype-lift: does not work and is deprecated.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13364
https://github.com/root-project/root/pull/13364:27,reliability,doe,does,27,[ci] Remove sonatype-lift: does not work and is deprecated.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13364
https://github.com/root-project/root/pull/13364:126,safety,test,tested,126,[ci] Remove sonatype-lift: does not work and is deprecated.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13364
https://github.com/root-project/root/pull/13364:156,safety,updat,updated,156,[ci] Remove sonatype-lift: does not work and is deprecated.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13364
https://github.com/root-project/root/pull/13364:156,security,updat,updated,156,[ci] Remove sonatype-lift: does not work and is deprecated.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13364
https://github.com/root-project/root/pull/13364:126,testability,test,tested,126,[ci] Remove sonatype-lift: does not work and is deprecated.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13364
https://github.com/root-project/root/pull/13365:152,deployability,updat,updated,152,[ci] Remove sonartype: does not work for out of source.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13365
https://github.com/root-project/root/pull/13365:23,reliability,doe,does,23,[ci] Remove sonartype: does not work for out of source.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13365
https://github.com/root-project/root/pull/13365:122,safety,test,tested,122,[ci] Remove sonartype: does not work for out of source.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13365
https://github.com/root-project/root/pull/13365:152,safety,updat,updated,152,[ci] Remove sonartype: does not work for out of source.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13365
https://github.com/root-project/root/pull/13365:152,security,updat,updated,152,[ci] Remove sonartype: does not work for out of source.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13365
https://github.com/root-project/root/pull/13365:122,testability,test,tested,122,[ci] Remove sonartype: does not work for out of source.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13365
https://github.com/root-project/root/pull/13366:367,deployability,updat,updated,367,"[cmake] Remove usage of --src-root with llvm-config; # This Pull request:. ## Changes or fixes:. Remove usage of `--src-root`, which is removed in LLVM16 (https://github.com/root-project/root/pull/13273). See also https://github.com/hahnjo/root/pull/1. Only relevant for external LLVM and works without this anyway. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13366
https://github.com/root-project/root/pull/13366:337,safety,test,tested,337,"[cmake] Remove usage of --src-root with llvm-config; # This Pull request:. ## Changes or fixes:. Remove usage of `--src-root`, which is removed in LLVM16 (https://github.com/root-project/root/pull/13273). See also https://github.com/hahnjo/root/pull/1. Only relevant for external LLVM and works without this anyway. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13366
https://github.com/root-project/root/pull/13366:367,safety,updat,updated,367,"[cmake] Remove usage of --src-root with llvm-config; # This Pull request:. ## Changes or fixes:. Remove usage of `--src-root`, which is removed in LLVM16 (https://github.com/root-project/root/pull/13273). See also https://github.com/hahnjo/root/pull/1. Only relevant for external LLVM and works without this anyway. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13366
https://github.com/root-project/root/pull/13366:367,security,updat,updated,367,"[cmake] Remove usage of --src-root with llvm-config; # This Pull request:. ## Changes or fixes:. Remove usage of `--src-root`, which is removed in LLVM16 (https://github.com/root-project/root/pull/13273). See also https://github.com/hahnjo/root/pull/1. Only relevant for external LLVM and works without this anyway. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13366
https://github.com/root-project/root/pull/13366:337,testability,test,tested,337,"[cmake] Remove usage of --src-root with llvm-config; # This Pull request:. ## Changes or fixes:. Remove usage of `--src-root`, which is removed in LLVM16 (https://github.com/root-project/root/pull/13273). See also https://github.com/hahnjo/root/pull/1. Only relevant for external LLVM and works without this anyway. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13366
https://github.com/root-project/root/pull/13368:56,deployability,version,versions,56,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:143,deployability,version,version,143,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:191,deployability,releas,releases,191,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:326,deployability,updat,updated,326,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:56,integrability,version,versions,56,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:143,integrability,version,version,143,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:56,modifiability,version,versions,56,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:143,modifiability,version,version,143,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:233,reliability,Diagno,DiagnosticsReference,233,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:296,safety,test,tested,296,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:326,safety,updat,updated,326,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:326,security,updat,updated,326,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:233,testability,Diagno,DiagnosticsReference,233,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:296,testability,test,tested,296,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/pull/13368:216,usability,tool,tools,216,"[dictgen] remove -Wno-noexcept-type quirk for old clang versions; # This Pull request:. ## Changes or fixes:. Removes a -W quirk for old clang version, has since been added to clang: https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wnoexcept-type. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13368
https://github.com/root-project/root/issues/13369:1285,availability,Operat,Operating,1285,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1168,deployability,version,version,1168,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1232,deployability,Instal,Installation,1232,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:45,energy efficiency,Draw,Drawing,45,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:165,energy efficiency,current,currently,165,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:373,energy efficiency,draw,drawn,373,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:489,energy efficiency,Draw,Draw,489,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:548,energy efficiency,draw,drawn,548,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:809,energy efficiency,Draw,Draw,809,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1145,energy efficiency,Draw,Draw,1145,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1168,integrability,version,version,1168,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1168,modifiability,version,version,1168,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:36,safety,Prevent,Prevents,36,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:860,safety,input,inputFile,860,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:927,safety,input,inputFile,927,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1005,safety,input,inputFile,1005,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1177,safety,Test,Tested,1177,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:36,security,Preven,Prevents,36,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1177,testability,Test,Tested,1177,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1332,testability,context,context,1332,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:175,usability,document,documented,175,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:625,usability,document,documentation,625,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:860,usability,input,inputFile,860,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:927,usability,input,inputFile,927,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/issues/13369:1005,usability,input,inputFile,1005,"Recommended Method of Opening TFile Prevents Drawing Histograms from Within The File; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The currently documented method of opening a TFile utilizes unique pointers:. `std::unique_ptr<TFile> myFile( TFile::Open(""file.root"", ""RECREATE"") );`. However, if a histogram is read from this file via and then drawn:. `TH1F* h1 = (TH1F*)file->Get(""Hist"");`. `TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. `c1->cd()`. `h1->Draw()`. The canvas is empty and the histogram will not be drawn. This can be resolved by opening the file as a raw pointer. Either the documentation should consider this, or there is a bug with `unique_ptr` that should be addressed. ### Reproducer. 1) Read a TFile as a unique_ptr. 2) Get a histogram from the file. 3) Draw the histogram. run like root -x myMacro.cxx. [inputFile.zip](https://github.com/root-project/root/files/12231406/inputFile.zip). `void myMacro(){`. ` std::unique_ptr<TFile> file(TFile::Open(""inputFile.root"", ""read""));`. ` TH1F* h1 = (TH1F*)file->Get(""h1"");`. ` TCanvas *c1 = new TCanvas(""c1"",""Fitting Demo"");`. ` c1->cd();`. ` h1->Draw()`. `}`. ### ROOT version. Tested on:. Linux: 6.26. Linux: 6.28. MacOS: 6.26. ### Installation method. pre-built binary, homebrew. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13369
https://github.com/root-project/root/pull/13370:815,availability,state,state,815,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1279,availability,failur,failure,1279,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:17,deployability,patch,patch,17,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:361,deployability,updat,update,361,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:663,deployability,build,builder,663,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:674,deployability,build,build,674,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1051,deployability,fail,failed,1051,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1098,deployability,upgrad,upgrade,1098,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1279,deployability,fail,failure,1279,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1396,deployability,upgrad,upgrade,1396,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:223,energy efficiency,load,load,223,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:299,energy efficiency,load,loaded,299,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:715,energy efficiency,reduc,reduced,715,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:65,integrability,messag,message,65,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:815,integrability,state,state,815,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:829,integrability,sub,subtle,829,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:65,interoperability,messag,message,65,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1098,modifiability,upgrad,upgrade,1098,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1396,modifiability,upgrad,upgrade,1396,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:223,performance,load,load,223,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:299,performance,load,loaded,299,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1279,performance,failur,failure,1279,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1557,performance,time,time,1557,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1051,reliability,fail,failed,1051,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1279,reliability,fail,failure,1279,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:17,safety,patch,patch,17,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:361,safety,updat,update,361,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:723,safety,test,testcase,723,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:17,security,patch,patch,17,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:361,security,updat,update,361,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:723,testability,test,testcase,723,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:896,testability,assert,assertion,896,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:959,testability,Assert,Assertion,959,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1187,testability,assert,assertion,1187,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:1269,testability,assert,assertion,1269,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13370:847,usability,confirm,confirmed,847,"[clang] Backport patch to merge template member parent; Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:. ```. Commit to a primary definition for a class when we load its first. member. Previously, we wouldn't do this if the first member loaded is within a. definition that's added to a class via an update record, which happens. when template instantiation adds a class definition to a declaration. that was imported from an AST file. This would lead to classes having member functions whose getParent. returned a class declaration that wasn't the primary definition, which. in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because. the setup required to get us into the broken state is very subtle, but. have confirmed that this fixes it. ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:. ```. Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed. ```. which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13370
https://github.com/root-project/root/pull/13371:179,deployability,updat,updated,179,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13371:21,interoperability,format,format,21,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13371:89,interoperability,format,format,89,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13371:44,modifiability,pac,package,44,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13371:149,safety,test,tested,149,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13371:179,safety,updat,updated,179,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13371:179,security,updat,updated,179,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13371:149,testability,test,tested,149,[geom] Applied clang-format to the geometry package; # This Pull request:. Applies clang-format to geom/. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13371
https://github.com/root-project/root/pull/13372:338,deployability,build,building,338,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:501,deployability,updat,updated,501,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:570,interoperability,format,format,570,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:608,interoperability,format,format,608,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:687,interoperability,format,format,687,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:471,safety,test,tested,471,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:501,safety,updat,updated,501,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:501,security,updat,updated,501,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:471,testability,test,tested,471,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13372:261,usability,Command,CommandLine,261,"[rootcling] Construct options after resetting parser; # This Pull request:. Construct the `llvm::cl` options in the main function and reset the parser before. This removes any predefined options registered by LLVM (see [llvm::cl docs](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage)). ## Changes or fixes:. Allows building with vanilla LLVM, see also https://github.com/root-project/root/issues/12156#issuecomment-1660957391. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12156. Note on clang-format: the entire file is very clang-format unclean. I tried my best to make it look readable, if you want to clang-format it I would propose to do it separately as it changes almost every line in the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13372
https://github.com/root-project/root/pull/13373:27,deployability,version,version,27,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:276,deployability,version,version,276,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:295,deployability,Updat,Update,295,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:306,deployability,VERSION,VERSION,306,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:431,deployability,version,versions,431,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:487,deployability,version,version,487,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:519,deployability,version,version,519,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:643,deployability,version,version,643,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:732,deployability,updat,updated,732,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:27,integrability,version,version,27,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:276,integrability,version,version,276,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:306,integrability,VERSION,VERSION,306,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:431,integrability,version,versions,431,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:487,integrability,version,version,487,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:519,integrability,version,version,519,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:643,integrability,version,version,643,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:215,interoperability,Compatib,Compatibility,215,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:406,interoperability,compatib,compatibility,406,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:27,modifiability,version,version,27,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:276,modifiability,version,version,276,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:306,modifiability,VERSION,VERSION,306,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:431,modifiability,version,versions,431,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:487,modifiability,version,version,487,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:519,modifiability,version,version,519,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:643,modifiability,version,version,643,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:392,reliability,doe,does,392,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:295,safety,Updat,Update,295,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:702,safety,test,tested,702,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:732,safety,updat,updated,732,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:295,security,Updat,Update,295,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:732,security,updat,updated,732,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:702,testability,test,tested,702,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:13,usability,minim,minimum,13,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13373:464,usability,minim,minimum,464,"[cmake] Bump minimum CMake version; # This Pull request:. ## Changes or fixes:. With CMake `3.27` I get this warning:. ```. CMake Deprecation Warning at interpreter/cling/CMakeLists.txt:1 (cmake_minimum_required):. Compatibility with CMake < 3.5 will be removed from a future version of. CMake. Update the VERSION argument <min> value or use a ...<max> suffix to tell. CMake that the project does not need compatibility with older versions. ```. Thus I bumped the minimum required CMake version to `3.10`, which is the version included in Ubuntu 18.04 LTS. In theory `3.6` would also work, but `3.10` gives a bit of margin for the future. The version in cling is synced with LLVM. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13373
https://github.com/root-project/root/pull/13375:15,availability,fault,faulty,15,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:134,deployability,instal,installed,134,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:144,deployability,version,version,144,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:15,energy efficiency,fault,faulty,15,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:144,integrability,version,version,144,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:144,modifiability,version,version,144,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:15,performance,fault,faulty,15,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:15,reliability,fault,faulty,15,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:15,safety,fault,faulty,15,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13375:296,safety,valid,valid,296,"[cmake] Remove faulty GTEST_INCLUDE_DIRS; If `builtin_gtest` was initially off (since commit 28ddffca94), we first try to look for an installed version of GTest. If not found, this falls back to `builtin_gtest`, but also sets `GTEST_INCLUDE_DIRS` to `GTEST_INCLUDE_DIRS-NOTFOUND`, which is not a valid value to have in `INTERFACE_INCLUDE_DIRECTORIES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13375
https://github.com/root-project/root/pull/13376:195,interoperability,prox,proxy,195,[RF] Add documentation to `RooB*Decay` constructors; This is done to close the following Jira issue:. https://sft.its.cern.ch/jira/browse/ROOT-7994. The parameter explanations are taken from the proxy titles in the constructor initializer lists.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13376
https://github.com/root-project/root/pull/13376:153,modifiability,paramet,parameter,153,[RF] Add documentation to `RooB*Decay` constructors; This is done to close the following Jira issue:. https://sft.its.cern.ch/jira/browse/ROOT-7994. The parameter explanations are taken from the proxy titles in the constructor initializer lists.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13376
https://github.com/root-project/root/pull/13376:9,usability,document,documentation,9,[RF] Add documentation to `RooB*Decay` constructors; This is done to close the following Jira issue:. https://sft.its.cern.ch/jira/browse/ROOT-7994. The parameter explanations are taken from the proxy titles in the constructor initializer lists.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13376
https://github.com/root-project/root/pull/13376:69,usability,close,close,69,[RF] Add documentation to `RooB*Decay` constructors; This is done to close the following Jira issue:. https://sft.its.cern.ch/jira/browse/ROOT-7994. The parameter explanations are taken from the proxy titles in the constructor initializer lists.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13376
https://github.com/root-project/root/pull/13377:146,usability,close,closes,146,"[RF] Add new `RooSpline` class contributed by Ruggero Turra; This commit includes the `RooSpline` class written by Ruggero Turra in RooFit, which closes the following JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-8041",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13377
https://github.com/root-project/root/pull/13378:66,security,stride,strides,66,[tmva] Fix RTensor::ExpandDims(); Fix in ExpandDims the resulting strides. . This PR fixes also #13325 by not using the end() iterator in insert.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13378
https://github.com/root-project/root/pull/13379:109,availability,servic,services,109,"[qt5web] Avoid clang warnings; This commit should fix these compiler warnings seen in the CI: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13379
https://github.com/root-project/root/pull/13379:109,deployability,servic,services,109,"[qt5web] Avoid clang warnings; This commit should fix these compiler warnings seen in the CI: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13379
https://github.com/root-project/root/pull/13379:109,integrability,servic,services,109,"[qt5web] Avoid clang warnings; This commit should fix these compiler warnings seen in the CI: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13379
https://github.com/root-project/root/pull/13379:109,modifiability,servic,services,109,"[qt5web] Avoid clang warnings; This commit should fix these compiler warnings seen in the CI: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13379
https://github.com/root-project/root/pull/13379:9,safety,Avoid,Avoid,9,"[qt5web] Avoid clang warnings; This commit should fix these compiler warnings seen in the CI: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13379
https://github.com/root-project/root/pull/13380:388,deployability,instal,installed,388,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:996,deployability,updat,updated,996,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:694,integrability,sub,substitute,694,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:300,safety,Avoid,Avoid,300,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:511,safety,except,except,511,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:966,safety,test,tested,966,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:996,safety,updat,updated,996,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:996,security,updat,updated,996,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13380:966,testability,test,tested,966,"Replace `#!usr/bin/env @python@` with `#!usr/bin/env python`; # This Pull request:. Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:. Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places. it's `python3` instead of `python`). Avoid having to. deal with the length of the shebang being too long when using a python installed. in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where. ROOT was built with one python and then the first python found in PATH is a. different one, but that is a weird setup (?). Alternatively it may be possible. to substitute only the name of the python executable, like `python3.11`, but. then it has to be in PATH. but I think this is the cleanest way and the cases. where this wouldn't work would be related to issues in the environment rather. than ROOT itself. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13380
https://github.com/root-project/root/pull/13381:36,energy efficiency,Load,LoadClusters,36,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:122,energy efficiency,Load,LoadClusters,122,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:36,performance,Load,LoadClusters,36,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:122,performance,Load,LoadClusters,122,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:365,safety,test,tested,365,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:9,testability,Simpl,Simplify,9,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:71,testability,simpl,simplifies,71,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:365,testability,test,tested,365,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:9,usability,Simpl,Simplify,9,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13381:71,usability,simpl,simplifies,71,[ntuple] Simplify `RPageSourceDaos::LoadClusters()`; This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13381
https://github.com/root-project/root/pull/13382:19,energy efficiency,optim,optimizations,19,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:70,energy efficiency,optim,optimized,70,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:19,performance,optimiz,optimizations,19,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:70,performance,optimiz,optimized,70,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:330,performance,memor,memory,330,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:430,safety,test,tested,430,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:119,testability,simpl,simple,119,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:430,testability,test,tested,430,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:119,usability,simpl,simple,119,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13382:330,usability,memor,memory,330,"[ntuple] Bulk read optimizations for RVec; # This Pull request:. Adds optimized `BulkRead` implementations for RVec of simple types and cardinality fields. Along the way, fixes an issue with RNTuple's handling of adopted RVecs. @eguiraud @vepadulano If RDF relies on the elements of a bulk of RVec<PoD> being all consecutively in memory, we also need to implement `BulkRead` for `RArrayAsRVecField` (#13040). ## Checklist:. - [X] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13382
https://github.com/root-project/root/pull/13383:110,deployability,updat,updated,110,DO NOT MERGE.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13383
https://github.com/root-project/root/pull/13383:80,safety,test,tested,80,DO NOT MERGE.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13383
https://github.com/root-project/root/pull/13383:110,safety,updat,updated,110,DO NOT MERGE.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13383
https://github.com/root-project/root/pull/13383:110,security,updat,updated,110,DO NOT MERGE.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13383
https://github.com/root-project/root/pull/13383:80,testability,test,tested,80,DO NOT MERGE.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13383
https://github.com/root-project/root/pull/13384:142,availability,sli,slight,142,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:79,deployability,integr,integrator,79,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:427,deployability,integr,integration,427,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:524,deployability,integr,integration,524,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2371,deployability,integr,integration,2371,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:367,energy efficiency,reduc,reduces,367,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:567,energy efficiency,GPU,GPU,567,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:79,integrability,integr,integrator,79,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:427,integrability,integr,integration,427,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:524,integrability,integr,integration,524,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2371,integrability,integr,integration,2371,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:79,interoperability,integr,integrator,79,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:427,interoperability,integr,integration,427,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:524,interoperability,integr,integration,524,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2371,interoperability,integr,integration,2371,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2383,interoperability,plug,plugins,2383,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:79,modifiability,integr,integrator,79,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:427,modifiability,integr,integration,427,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:524,modifiability,integr,integration,524,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2371,modifiability,integr,integration,2371,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:567,performance,GPU,GPU,567,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:79,reliability,integr,integrator,79,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:142,reliability,sli,slight,142,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:427,reliability,integr,integration,427,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:524,reliability,integr,integration,524,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2371,reliability,integr,integration,2371,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:601,safety,valid,validated,601,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:761,safety,test,testIntegrationMethod,761,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:1828,safety,test,testIntegrationMethod,1828,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:1904,safety,test,testIntegrationMethod,1904,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2234,safety,test,test,2234,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:79,security,integr,integrator,79,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:427,security,integr,integration,427,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:524,security,integr,integration,524,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:601,security,validat,validated,601,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2371,security,integr,integration,2371,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:79,testability,integr,integrator,79,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:427,testability,integr,integration,427,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:524,testability,integr,integration,524,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:761,testability,test,testIntegrationMethod,761,"[RF] Generalize `RooIntegrator1D` to n dimensions and merge with other Romberg integrator classes; Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:1828,testability,test,testIntegrationMethod,1828,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:1904,testability,test,testIntegrationMethod,1904,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2229,testability,unit,unit,2229,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2234,testability,test,test,2234,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/pull/13384:2371,testability,integr,integration,2371,"fferent numeric integration methods (more detail in the PR description). It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:. ```c++. // runNumIntValidation.C. #include <RooFormulaVar.h>. #include <RooNumIntConfig.h>. #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label). {. RooRealVar x{""x"", ""x"", 0, 10};. RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;. RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {. cfg.method2D().setLabel(label.c_str());. }. if (ndim == 1) {. cfg.method1D().setLabel(label.c_str());. }. RooArgSet iset{x};. if (ndim > 1). iset.add(y);. std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};. double val = integ->getVal();. std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;. }. void runNumIntValidation(). {. RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};. std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {. testIntegrationMethod(1, label);. }. for (auto const &label : methods2d) {. testIntegrationMethod(2, label);. }. }. ```. The output with this PR is the same as with ROOT master:. ```. RooIntegrator1D:. 488.294986988088. RooSegmentedIntegrator1D:. 488.294680086881. RooAdaptiveIntegratorND:. 5029.82213550336. RooIntegrator2D:. 5029.84276464679. RooSegmentedIntegrator2D:. 5029.82506801992. ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13384
https://github.com/root-project/root/issues/13387:7,availability,recov,recover,7,"Please recover `SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""Sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:1012,availability,Error,Error,1012,"`SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"")",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2056,availability,Error,Error,2056,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2305,availability,Operat,Operating,2305,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:7,deployability,recov,recover,7,"Please recover `SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""Sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2236,deployability,version,version,2236,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2261,deployability,Instal,Installation,2261,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2282,deployability,build,build,2282,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:1453,integrability,protocol,protocol,1453,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2236,integrability,version,version,2236,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:1453,interoperability,protocol,protocol,1453,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2236,modifiability,version,version,2236,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:1012,performance,Error,Error,1012,"`SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"")",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2056,performance,Error,Error,2056,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:7,reliability,recov,recover,7,"Please recover `SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""Sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:7,safety,recov,recover,7,"Please recover `SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""Sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:1012,safety,Error,Error,1012,"`SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"")",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2056,safety,Error,Error,2056,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:7,security,recov,recover,7,"Please recover `SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""Sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:264,security,authenticat,authentication,264,"Please recover `SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""Sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:1019,security,Authenticat,Authenticate,1019,"ticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2063,security,Authenticat,Authenticate,2063,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2345,testability,context,context,2345,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:1012,usability,Error,Error,1012,"`SrvAuthenticate` from libSrvAuth library; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"")",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/issues/13387:2056,usability,Error,Error,2056,"I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth ! ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```. $ grep srvauthenticate -i -R ../src. ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);. ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate. ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");. ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");. ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html. https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13387
https://github.com/root-project/root/pull/13388:373,energy efficiency,Load,LoadClusters,373,"[ntuple,daos] RPageSourceDaos: populate the page zero from `kTypePageZero` locators; Per #12676, all storage backends should be able to populate the page zero from `kTypePageZero` locators. This pull request adds the missing pieces in the DAOS backend. ## Changes or fixes:. - Add the `RPageStorage::PrepareLoadCluster()` helper which can be used in the implementation of `LoadClusters()` in derived classes to prepare the read of page ranges. This function takes care of filling zero pages in the given `ROnDiskPageMap`. - Add the missing pieces in `RPageSourceDaos`. ## Checklist:. - [x] tested changes locally. This PR fixes #12960.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13388
https://github.com/root-project/root/pull/13388:373,performance,Load,LoadClusters,373,"[ntuple,daos] RPageSourceDaos: populate the page zero from `kTypePageZero` locators; Per #12676, all storage backends should be able to populate the page zero from `kTypePageZero` locators. This pull request adds the missing pieces in the DAOS backend. ## Changes or fixes:. - Add the `RPageStorage::PrepareLoadCluster()` helper which can be used in the implementation of `LoadClusters()` in derived classes to prepare the read of page ranges. This function takes care of filling zero pages in the given `ROnDiskPageMap`. - Add the missing pieces in `RPageSourceDaos`. ## Checklist:. - [x] tested changes locally. This PR fixes #12960.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13388
https://github.com/root-project/root/pull/13388:590,safety,test,tested,590,"[ntuple,daos] RPageSourceDaos: populate the page zero from `kTypePageZero` locators; Per #12676, all storage backends should be able to populate the page zero from `kTypePageZero` locators. This pull request adds the missing pieces in the DAOS backend. ## Changes or fixes:. - Add the `RPageStorage::PrepareLoadCluster()` helper which can be used in the implementation of `LoadClusters()` in derived classes to prepare the read of page ranges. This function takes care of filling zero pages in the given `ROnDiskPageMap`. - Add the missing pieces in `RPageSourceDaos`. ## Checklist:. - [x] tested changes locally. This PR fixes #12960.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13388
https://github.com/root-project/root/pull/13388:590,testability,test,tested,590,"[ntuple,daos] RPageSourceDaos: populate the page zero from `kTypePageZero` locators; Per #12676, all storage backends should be able to populate the page zero from `kTypePageZero` locators. This pull request adds the missing pieces in the DAOS backend. ## Changes or fixes:. - Add the `RPageStorage::PrepareLoadCluster()` helper which can be used in the implementation of `LoadClusters()` in derived classes to prepare the read of page ranges. This function takes care of filling zero pages in the given `ROnDiskPageMap`. - Add the missing pieces in `RPageSourceDaos`. ## Checklist:. - [x] tested changes locally. This PR fixes #12960.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13388
https://github.com/root-project/root/pull/13388:322,usability,help,helper,322,"[ntuple,daos] RPageSourceDaos: populate the page zero from `kTypePageZero` locators; Per #12676, all storage backends should be able to populate the page zero from `kTypePageZero` locators. This pull request adds the missing pieces in the DAOS backend. ## Changes or fixes:. - Add the `RPageStorage::PrepareLoadCluster()` helper which can be used in the implementation of `LoadClusters()` in derived classes to prepare the read of page ranges. This function takes care of filling zero pages in the given `ROnDiskPageMap`. - Add the missing pieces in `RPageSourceDaos`. ## Checklist:. - [x] tested changes locally. This PR fixes #12960.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13388
https://github.com/root-project/root/pull/13389:92,deployability,integr,integration,92,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:701,deployability,observ,observable,701,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:856,deployability,observ,observable,856,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:54,energy efficiency,GPU,GPU,54,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:145,energy efficiency,GPU,GPU,145,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:428,energy efficiency,model,model,428,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1781,energy efficiency,reduc,reduced,1781,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:2055,energy efficiency,GPU,GPU,2055,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:13,integrability,interfac,interface,13,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:92,integrability,integr,integration,92,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1291,integrability,Batch,BatchModeOption,1291,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1749,integrability,interfac,interface,1749,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1883,integrability,interfac,interface,1883,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1962,integrability,pub,public,1962,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:13,interoperability,interfac,interface,13,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:92,interoperability,integr,integration,92,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1749,interoperability,interfac,interface,1749,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1883,interoperability,interfac,interface,1883,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:13,modifiability,interfac,interface,13,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:92,modifiability,integr,integration,92,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1749,modifiability,interfac,interface,1749,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1883,modifiability,interfac,interface,1883,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:54,performance,GPU,GPU,54,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:145,performance,GPU,GPU,145,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1291,performance,Batch,BatchModeOption,1291,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:2055,performance,GPU,GPU,2055,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:92,reliability,integr,integration,92,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:199,safety,input,input,199,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1214,safety,input,input,1214,"lready on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some ol",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:92,security,integr,integration,92,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:428,security,model,model,428,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1370,security,isO,isOnDevice,1370,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1767,security,sign,significantly,1767,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:92,testability,integr,integration,92,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:701,testability,observ,observable,701,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:856,testability,observ,observable,856,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:199,usability,input,input,199,"[RF] General interface to evaluate RooFit pdfs on the GPU; For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1214,usability,input,input,1214,"lready on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some ol",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13389:1976,usability,user,users,1976,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++. namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model. RooRealVar x{""x"", ""x"", 0, -10, 10};. RooRealVar mu{""mu"", ""mu"", 0, 0, 10};. RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;. x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values. std::vector<double> xValsHost;. for (std::size_t i = 0; i < numBins; ++i) {. x.setBin(i);. xValsHost.push_back(x.getVal());. }. // Copy observable values to the array. CudaInterface::DeviceArray<double> xValsDevice{numBins};. CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver. std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array. ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};. driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate. std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results. std::vector<double> hostOut(deviceOut.size());. CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);. for (int i = 0; i < numBins; ++i) {. std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;. }. ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13389
https://github.com/root-project/root/pull/13390:125,deployability,updat,updated,125,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13390:4,safety,test,test,4,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13390:95,safety,test,tested,95,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13390:125,safety,updat,updated,125,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13390:125,security,updat,updated,125,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13390:4,testability,test,test,4,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13390:9,testability,coverag,coverage,9,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13390:95,testability,test,tested,95,Add test coverage to codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13390
https://github.com/root-project/root/pull/13391:128,deployability,updat,updated,128,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13391:4,safety,test,test,4,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13391:98,safety,test,tested,98,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13391:128,safety,updat,updated,128,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13391:128,security,updat,updated,128,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13391:4,testability,test,test,4,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13391:9,testability,coverag,coverage,9,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13391:98,testability,test,tested,98,Add test coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13391
https://github.com/root-project/root/pull/13392:128,deployability,updat,updated,128,Add code coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13392
https://github.com/root-project/root/pull/13392:98,safety,test,tested,98,Add code coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13392
https://github.com/root-project/root/pull/13392:128,safety,updat,updated,128,Add code coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13392
https://github.com/root-project/root/pull/13392:128,security,updat,updated,128,Add code coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13392
https://github.com/root-project/root/pull/13392:9,testability,coverag,coverage,9,Add code coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13392
https://github.com/root-project/root/pull/13392:98,testability,test,tested,98,Add code coverage using codecov; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13392
https://github.com/root-project/root/pull/13393:62,deployability,version,version,62,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13393
https://github.com/root-project/root/pull/13393:1,energy efficiency,core,core,1,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13393
https://github.com/root-project/root/pull/13393:62,integrability,version,version,62,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13393
https://github.com/root-project/root/pull/13393:62,modifiability,version,version,62,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13393
https://github.com/root-project/root/pull/13394:142,deployability,updat,updated,142,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/pull/13394:8,safety,test,test,8,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/pull/13394:112,safety,test,tested,112,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/pull/13394:142,safety,updat,updated,142,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/pull/13394:142,security,updat,updated,142,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/pull/13394:8,testability,test,test,8,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/pull/13394:13,testability,coverag,coverage,13,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/pull/13394:112,testability,test,tested,112,[ci]Add test coverage using codecov [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13394
https://github.com/root-project/root/issues/13395:2490,availability,Operat,Operating,2490,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:1961,deployability,version,version,1961,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:2448,deployability,Instal,Installation,2448,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:539,energy efficiency,Draw,Draw,539,"TTreePlayer::Scan printing incorrect unsigned long long, ULong64_t values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On (at least) ROOT 6.28.04, `TTree::Scan` does not print `unsigned long long` in the tree correctly, even when specifying the appropriate format `%llx` for `unsigned long long`. Printing incorrect values, in particular for types used for bit patterns, is very confusing. Possibly related prior reports: unresolved https://sft.its.cern.ch/jira/browse/ROOT-8009 reports similar behavior in `Draw` but is listed as affecting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. -------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:1961,integrability,version,version,1961,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:261,interoperability,specif,specifying,261,"TTreePlayer::Scan printing incorrect unsigned long long, ULong64_t values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On (at least) ROOT 6.28.04, `TTree::Scan` does not print `unsigned long long` in the tree correctly, even when specifying the appropriate format `%llx` for `unsigned long long`. Printing incorrect values, in particular for types used for bit patterns, is very confusing. Possibly related prior reports: unresolved https://sft.its.cern.ch/jira/browse/ROOT-8009 reports similar behavior in `Draw` but is listed as affecting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. -------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:288,interoperability,format,format,288,"TTreePlayer::Scan printing incorrect unsigned long long, ULong64_t values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On (at least) ROOT 6.28.04, `TTree::Scan` does not print `unsigned long long` in the tree correctly, even when specifying the appropriate format `%llx` for `unsigned long long`. Printing incorrect values, in particular for types used for bit patterns, is very confusing. Possibly related prior reports: unresolved https://sft.its.cern.ch/jira/browse/ROOT-8009 reports similar behavior in `Draw` but is listed as affecting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. -------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:1770,interoperability,format,format,1770,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:1961,modifiability,version,version,1961,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:192,reliability,doe,does,192,"TTreePlayer::Scan printing incorrect unsigned long long, ULong64_t values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On (at least) ROOT 6.28.04, `TTree::Scan` does not print `unsigned long long` in the tree correctly, even when specifying the appropriate format `%llx` for `unsigned long long`. Printing incorrect values, in particular for types used for bit patterns, is very confusing. Possibly related prior reports: unresolved https://sft.its.cern.ch/jira/browse/ROOT-8009 reports similar behavior in `Draw` but is listed as affecting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. -------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:2116,security,Team,Team,2116,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:2545,testability,context,context,2545,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:526,usability,behavi,behavior,526,"TTreePlayer::Scan printing incorrect unsigned long long, ULong64_t values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. On (at least) ROOT 6.28.04, `TTree::Scan` does not print `unsigned long long` in the tree correctly, even when specifying the appropriate format `%llx` for `unsigned long long`. Printing incorrect values, in particular for types used for bit patterns, is very confusing. Possibly related prior reports: unresolved https://sft.its.cern.ch/jira/browse/ROOT-8009 reports similar behavior in `Draw` but is listed as affecting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. -------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/issues/13395:2310,usability,help,help,2310,"ting only < 5.28. ### Reproducer. ```. TTree t. ULong64_t llu = 0x4ac1500101113bLL. t.Branch(""llu"", &llu). t.Fill(). t.Scan(""llu:llu"","""",""col=22llx:22lx""). printf(""%llx %lx\n"", llu, (unsigned long) llu). sizeof(ULong64_t). sizeof(unsigned long). sizeof(unsigned long long). ```. which produces:. ```. $ root -l. root [0] TTree t. (TTree &) Name: Title: . root [1] ULong64_t llu = 0x4ac1500101113bLL. (unsigned long long) 21041697634980155. root [2] t.Branch(""llu"", &llu). (TBranch *) 0x55a244d5c5b0. root [3] t.Fill(). (int) 8. root [4] t.Scan(""llu:llu"","""",""col=22llx:22lx""). **************************************************************. * Row * llu * llu *. **************************************************************. * 0 * 4ac1500101113b * 4ac1500101113c *. **************************************************************. (long long) 1. root [5] printf(""%llx %lx\n"", llu, (unsigned long) llu). 4ac1500101113b 4ac1500101113b. (int) 30. root [6] sizeof(ULong64_t). (unsigned long) 8. root [7] sizeof(unsigned long). (unsigned long) 8. root [8] sizeof(unsigned long long). (unsigned long) 8. ```. The length of `ULong64_t`, `unsigned long`, and `unsigned long long` are all the same. `printf` with format `%llx` (`unsigned long long`) and `%lx` (`unsigned long`) all print the right value. Nevertheless, `TTree::Scan` prints a different (incorrect) value when printing as `%llx`. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/04 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on May 08 2023, 02:44:07 |. | From tags/v6-28-04@v6-28-04 |. | With g++-12 (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Spack (develop). ### Operating system. Linux (Ubuntu 23.04). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13395
https://github.com/root-project/root/pull/13396:139,modifiability,inherit,inherited,139,[REve] Remove the limit of REveDataCollection table suggestions; In the REveDataTable list of suggestion was limited to 100. The limit was inherited with openui5 input widget. In REveDataCollection::StreamPublicMethods suggestion list is created with TClass::GetListOfAllPublicMethods() where void functions are omitted.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13396
https://github.com/root-project/root/pull/13396:162,safety,input,input,162,[REve] Remove the limit of REveDataCollection table suggestions; In the REveDataTable list of suggestion was limited to 100. The limit was inherited with openui5 input widget. In REveDataCollection::StreamPublicMethods suggestion list is created with TClass::GetListOfAllPublicMethods() where void functions are omitted.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13396
https://github.com/root-project/root/pull/13396:162,usability,input,input,162,[REve] Remove the limit of REveDataCollection table suggestions; In the REveDataTable list of suggestion was limited to 100. The limit was inherited with openui5 input widget. In REveDataCollection::StreamPublicMethods suggestion list is created with TClass::GetListOfAllPublicMethods() where void functions are omitted.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13396
https://github.com/root-project/root/pull/13396:168,usability,widget,widget,168,[REve] Remove the limit of REveDataCollection table suggestions; In the REveDataTable list of suggestion was limited to 100. The limit was inherited with openui5 input widget. In REveDataCollection::StreamPublicMethods suggestion list is created with TClass::GetListOfAllPublicMethods() where void functions are omitted.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13396
https://github.com/root-project/root/pull/13397:4,performance,memor,memory,4,"Fix memory leaks in stressTMVA; Fix a crash with stressTMVA on Windows x86 in debug mode, due to memory exceeding 2 Gb.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13397
https://github.com/root-project/root/pull/13397:97,performance,memor,memory,97,"Fix memory leaks in stressTMVA; Fix a crash with stressTMVA on Windows x86 in debug mode, due to memory exceeding 2 Gb.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13397
https://github.com/root-project/root/pull/13397:4,usability,memor,memory,4,"Fix memory leaks in stressTMVA; Fix a crash with stressTMVA on Windows x86 in debug mode, due to memory exceeding 2 Gb.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13397
https://github.com/root-project/root/pull/13397:97,usability,memor,memory,97,"Fix memory leaks in stressTMVA; Fix a crash with stressTMVA on Windows x86 in debug mode, due to memory exceeding 2 Gb.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13397
https://github.com/root-project/root/pull/13398:114,deployability,updat,updating,114,"[NFC][ntuple] Minor (cosmetic) spec improvements; I noticed some small cosmetic markdown issues in the spec while updating it for STL set fields, and I couldn't help but fix them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13398
https://github.com/root-project/root/pull/13398:114,safety,updat,updating,114,"[NFC][ntuple] Minor (cosmetic) spec improvements; I noticed some small cosmetic markdown issues in the spec while updating it for STL set fields, and I couldn't help but fix them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13398
https://github.com/root-project/root/pull/13398:114,security,updat,updating,114,"[NFC][ntuple] Minor (cosmetic) spec improvements; I noticed some small cosmetic markdown issues in the spec while updating it for STL set fields, and I couldn't help but fix them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13398
https://github.com/root-project/root/pull/13398:161,usability,help,help,161,"[NFC][ntuple] Minor (cosmetic) spec improvements; I noticed some small cosmetic markdown issues in the spec while updating it for STL set fields, and I couldn't help but fix them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13398
https://github.com/root-project/root/pull/13400:70,deployability,version,version,70,"[core] Do not provide our own strlcpy if glibc >= 2.38 (v6.28); Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13400
https://github.com/root-project/root/pull/13400:1,energy efficiency,core,core,1,"[core] Do not provide our own strlcpy if glibc >= 2.38 (v6.28); Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13400
https://github.com/root-project/root/pull/13400:70,integrability,version,version,70,"[core] Do not provide our own strlcpy if glibc >= 2.38 (v6.28); Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13400
https://github.com/root-project/root/pull/13400:70,modifiability,version,version,70,"[core] Do not provide our own strlcpy if glibc >= 2.38 (v6.28); Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13400
https://github.com/root-project/root/pull/13401:233,availability,cluster,clusters,233,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:400,availability,cluster,clusters,400,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:114,deployability,fail,fails,114,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:233,deployability,cluster,clusters,233,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:400,deployability,cluster,clusters,400,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:114,reliability,fail,fails,114,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:130,safety,except,exception,130,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:182,safety,detect,detects,182,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:413,safety,test,tests,413,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:182,security,detect,detects,182,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:413,testability,test,tests,413,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13401:278,usability,document,documentation,278,"[ntuple] Throw when `RNTupleInspector` encounters inconsistent compression; Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13401
https://github.com/root-project/root/pull/13402:616,availability,restor,restored,616,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:821,deployability,updat,updated,821,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:326,energy efficiency,current,current,326,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:616,reliability,restor,restored,616,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:791,safety,test,tested,791,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:821,safety,updat,updated,821,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:821,security,updat,updated,821,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:791,testability,test,tested,791,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:295,usability,behavi,behavior,295,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13402:600,usability,behavi,behavior,600,"Allow geometry transparency at the volume level; # This Pull request:. This Pull request allows to set in TGeo the transparency of objects at the level of individual TGeoVolume instances. ROOT was attributing the volume transparency to the material of the volume. This is not always the desired behavior. The PR preserves the current functionality if the transparency level is not. explicitly set to the volume instance. . Improved functionality: If the transparency level is set directly to the volume instance, the volume transparency . takes precedence over the material transparency. The default behavior can be restored by setting a transparency . level of -1 to the volume. ## Changes or fixes:. Improves the flexibility to set transparency to geometry volumes. ## Checklist:. - [xxx] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13402
https://github.com/root-project/root/pull/13403:130,availability,error,error,130,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:165,availability,error,error,165,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:375,availability,error,error,375,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:466,availability,error,error-or-observed-error-in-,466,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:475,deployability,observ,observed-error-in-,475,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:130,performance,error,error,130,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:165,performance,error,error,165,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:235,performance,perform,perform,235,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:375,performance,error,error,375,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:466,performance,error,error-or-observed-error-in-,466,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:425,reliability,doe,does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-,425,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:130,safety,error,error,130,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:165,safety,error,error,165,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:375,safety,error,error,375,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:466,safety,error,error-or-observed-error-in-,466,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:475,testability,observ,observed-error-in-,475,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:130,usability,error,error,130,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:165,usability,error,error,165,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:230,usability,user,user,230,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:235,usability,perform,perform,235,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:375,usability,error,error,375,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/pull/13403:466,usability,error,error-or-observed-error-in-,466,"[math] Fix Pearson chi2 fit for weighted histograms; In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13403
https://github.com/root-project/root/issues/13404:229,availability,error,error,229,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:409,availability,slo,slope,409,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1888,availability,Operat,Operating,1888,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:185,deployability,contain,contains,185,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:317,deployability,version,version,317,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:696,deployability,version,version,696,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:759,deployability,contain,contain,759,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:769,deployability,version,version,769,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1840,deployability,version,version,1840,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1858,deployability,Instal,Installation,1858,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:284,energy efficiency,current,current,284,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:317,integrability,version,version,317,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:696,integrability,version,version,696,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:769,integrability,version,version,769,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1840,integrability,version,version,1840,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1799,interoperability,exchang,exchanges,1799,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:317,modifiability,version,version,317,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:696,modifiability,version,version,696,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:769,modifiability,version,version,769,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1840,modifiability,version,version,1840,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:229,performance,error,error,229,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:409,reliability,slo,slope,409,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:229,safety,error,error,229,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1437,safety,test,tested,1437,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1437,testability,test,tested,1437,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1928,testability,context,context,1928,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:5,usability,Document,Documentation,5,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:146,usability,document,documentation,146,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:229,usability,error,error,229,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/issues/13404:1415,usability,document,documentation,1415,"[RF] Documentation issue for `RooAbsReal::getPropagatedError`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, the documentation for `getPropagatedError` contains a mistake in the definition of the error propagation formula as far as I can tell. In the current definition of the master version, the calculation uses the covariance matrix, but defines a function `F` to not be a slope to approximate a derivative, but instead the average variation of `f`. When using the covariance matrix, the definition of `F` should include a `da` in the denominator. Alternatively, the definition of the propagation should use the correlation matrix with `F` unchanged. The same version of the formula is used in the 6.24 docs. The 6.22 docs contain a version that uses the correlation matrix (with `F` unchanged), but misses a square on the uncertainty (this was since fixed). I could be wrong in my math of course, so please ensure I am not misunderstanding something here. master: https://root.cern.ch/doc/master/classRooAbsReal.html#a4d7678837410aabcd93e6f0937de525b (uses covariance). 6.24: https://root.cern.ch/doc/v624/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses covariance). 6.22: https://root.cern.ch/doc/v622/classRooAbsReal.html#a8ea9118e0ca9578fee21443e919fa3c0 (uses correlation). In addition to this, the formula rendering is broken for me for this function in 6.22+ documentation (MacOS, tested on Firefox/Safari/Chrome). ![Screenshot 2023-08-04 at 17 20 58](https://github.com/root-project/root/assets/45009355/1f192cd6-1dee-4772-8b63-90b449a33acb). The changes track back to #6387 (https://github.com/root-project/root/pull/6387/files#diff-6933c2fd9e2c651fe82af05b368fd4a0c1bd32d965a24e523973ee6a0846f89d). cc @guitargeek @kratsg for prior related exchanges. ### Reproducer. n/a. ### ROOT version. n/a. ### Installation method. n/a. ### Operating system. MacOS. ### Additional context. n/a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13404
https://github.com/root-project/root/pull/13405:92,usability,document,documentation,92,[RF] Improve docs of RooAbsReal::getPropagatedError(); * Use `Corr` instead of `Cov` in the documentation of. `RooAbsReal::getPropagatedError(). * Add missing backslashes. Closes https://github.com/root-project/root/issues/13404.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13405
https://github.com/root-project/root/pull/13405:172,usability,Close,Closes,172,[RF] Improve docs of RooAbsReal::getPropagatedError(); * Use `Corr` instead of `Cov` in the documentation of. `RooAbsReal::getPropagatedError(). * Add missing backslashes. Closes https://github.com/root-project/root/issues/13404.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13405
https://github.com/root-project/root/pull/13406:137,deployability,updat,updated,137,THird Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13406
https://github.com/root-project/root/pull/13406:107,safety,test,tested,107,THird Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13406
https://github.com/root-project/root/pull/13406:137,safety,updat,updated,137,THird Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13406
https://github.com/root-project/root/pull/13406:137,security,updat,updated,137,THird Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13406
https://github.com/root-project/root/pull/13406:107,testability,test,tested,107,THird Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13406
https://github.com/root-project/root/pull/13407:127,deployability,updat,updated,127,Range overload three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13407
https://github.com/root-project/root/pull/13407:97,safety,test,tested,97,Range overload three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13407
https://github.com/root-project/root/pull/13407:127,safety,updat,updated,127,Range overload three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13407
https://github.com/root-project/root/pull/13407:127,security,updat,updated,127,Range overload three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13407
https://github.com/root-project/root/pull/13407:97,testability,test,tested,97,Range overload three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13407
https://github.com/root-project/root/pull/13408:137,deployability,updat,updated,137,Third Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13408
https://github.com/root-project/root/pull/13408:107,safety,test,tested,107,Third Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13408
https://github.com/root-project/root/pull/13408:137,safety,updat,updated,137,Third Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13408
https://github.com/root-project/root/pull/13408:137,security,updat,updated,137,Third Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13408
https://github.com/root-project/root/pull/13408:107,testability,test,tested,107,Third Range Overload for three arguments; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13408
https://github.com/root-project/root/pull/13409:752,availability,avail,available,752,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:913,availability,error,errors,913,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:270,integrability,interfac,interface,270,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:436,integrability,abstract,abstraction,436,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:602,integrability,batch,batchcompute,602,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:976,integrability,translat,translation,976,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:1023,integrability,wrap,wrap,1023,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:72,interoperability,specif,specific,72,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:222,interoperability,specif,specific,222,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:270,interoperability,interfac,interface,270,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:325,interoperability,specif,specific,325,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:508,interoperability,specif,specifics,508,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:976,interoperability,translat,translation,976,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:1206,interoperability,specif,specific,1206,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:1299,interoperability,specif,specific,1299,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:5,modifiability,Refact,Refactor,5,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:270,modifiability,interfac,interface,270,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:436,modifiability,abstract,abstraction,436,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:1356,modifiability,paramet,parameter,1356,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:5,performance,Refactor,Refactor,5,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:602,performance,batch,batchcompute,602,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
https://github.com/root-project/root/pull/13409:913,performance,error,errors,913,"[RF] Refactor CUDA code in RooFit; This is done to better separate CUDA-specific code from the generic code. in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but. it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,. which where only implemented in the CUDA case. So an abstraction. didn't make much sense there. It's better to move the CUDA specifics. to a new `roofitcuda` library. Then, the functions from this library. are used in `batchcompute` and `roofitcore` behind preprocessor. macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only. available to `nvcc`, and in case gcc is used, these were forward. declared as stucts. This is a hack that should be avoided. In. particular, it can cause linker errors because the types are not the. same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`. pointers into C++ structs that are in the new CUDA support library,. and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function. should not be too backend specific, but it took the `cudaStream_t`. directly. This parameter is removed. Now, the CUDA stream is stored. in a `RooBatchCompute::Config` struct that is passed around in the. `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13409
