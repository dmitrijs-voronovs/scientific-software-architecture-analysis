id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/12156:19779,integrability,translat,translation,19779,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20371,integrability,translat,translation,20371,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20653,integrability,Sub,Subprocess,20653,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:614,interoperability,translat,translation,614,I'm seeing the following on macOS:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../inte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1185,interoperability,translat,translation,1185,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1756,interoperability,translat,translation,1756,ixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2327,interoperability,translat,translation,2327,ixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2917,interoperability,translat,translation,2917,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3488,interoperability,translat,translation,3488,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument(),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4078,interoperability,translat,translation,4078,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4678,interoperability,translat,translation,4678,emplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5259,interoperability,translat,translation,5259,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5840,interoperability,translat,translation,5840,erseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6421,interoperability,translat,translation,6421,erseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7021,interoperability,translat,translation,7021,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7602,interoperability,translat,translation,7602,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefault,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8202,interoperability,translat,translation,8202,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8802,interoperability,translat,translation,8802,mplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9383,interoperability,translat,translation,9383,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9964,interoperability,translat,translation,9964,seTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10545,interoperability,translat,translation,10545,seTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11145,interoperability,translat,translation,11145,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11726,interoperability,translat,translation,11726,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::Non,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12326,interoperability,translat,translation,12326,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12905,interoperability,translat,translation,12905,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13465,interoperability,translat,translation,13465,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14025,interoperability,translat,translation,14025,STVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14585,interoperability,translat,translation,14585,STVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15164,interoperability,translat,translation,15164,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15724,interoperability,translat,translation,15724,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' fr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16303,interoperability,translat,translation,16303,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16895,interoperability,translat,translation,16895,llector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17468,interoperability,translat,translation,17468,Injector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18041,interoperability,translat,translation,18041,pace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18614,interoperability,translat,translation,18614,pace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19206,interoperability,translat,translation,19206,Injector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19779,interoperability,translat,translation,19779,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20371,interoperability,translat,translation,20371,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:364,modifiability,variab,variable,364,I'm seeing the following on macOS:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../inte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2667,modifiability,variab,variable,2667,the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3828,modifiability,variab,variable,3828,the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoading,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4428,modifiability,variab,variable,4428,rridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6771,modifiability,variab,variable,6771,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7952,modifiability,variab,variable,7952,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8552,modifiability,variab,variable,8552, runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10895,modifiability,variab,variable,10895,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12076,modifiability,variab,variable,12076,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVar,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12655,modifiability,variab,variable,12655,nnot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::Travers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14914,modifiability,variab,variable,14914,onReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::Travers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16053,modifiability,variab,variable,16053,onReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::Poi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16645,modifiability,variab,variable,16645,ymbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18956,modifiability,variab,variable,18956,weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20121,modifiability,variab,variable,20121,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20547,performance,Error,Error,20547,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20597,performance,ERROR,ERROR,20597,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20547,safety,Error,Error,20547,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20597,safety,ERROR,ERROR,20597,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:113,security,access,access,113,I'm seeing the following on macOS:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../inte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:703,security,access,access,703,I'm seeing the following on macOS:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../inte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1274,security,access,access,1274,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridde,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1845,security,access,access,1845,../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2416,security,access,access,2416,../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3006,security,access,access,3006,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3577,security,access,access,3577,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4167,security,access,access,4167,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4767,security,access,access,4767,er.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5348,security,access,access,5348,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5929,security,access,access,5929,preter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6510,security,access,access,6510,preter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7110,security,access,access,7110,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7691,security,access,access,7691,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelect,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8291,security,access,access,8291,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8891,security,access,access,8891,r.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9472,security,access,access,9472,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10053,security,access,access,10053,eter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10634,security,access,access,10634,eter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11234,security,access,access,11234,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11815,security,access,access,11815,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' mean,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12415,security,access,access,12415,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12994,security,access,access,12994,/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13554,security,access,access,13554,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14114,security,access,access,14114,)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14674,security,access,access,14674,)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15253,security,access,access,15253,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15813,security,access,access,15813,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the we,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16392,security,access,access,16392,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16984,security,access,access,16984,ngInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17557,security,access,access,17557,ingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18130,security,access,access,18130,/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18703,security,access,access,18703,/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19295,security,access,access,19295,ingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19868,security,access,access,19868,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:626,testability,unit,units,626,I'm seeing the following on macOS:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../inte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1197,testability,unit,units,1197,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1768,testability,unit,units,1768,averseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2339,testability,unit,units,2339,averseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2929,testability,unit,units,2929,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3500,testability,unit,units,3500,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4090,testability,unit,units,4090,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4690,testability,unit,units,4690,mplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5271,testability,unit,units,5271,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5852,testability,unit,units,5852,ateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6433,testability,unit,units,6433,ateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7033,testability,unit,units,7033,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7614,testability,unit,units,7614,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8214,testability,unit,units,8214,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8814,testability,unit,units,8814,plateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9395,testability,unit,units,9395,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9976,testability,unit,units,9976,eTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10557,testability,unit,units,10557,eTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11157,testability,unit,units,11157,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11738,testability,unit,units,11738,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' fro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12338,testability,unit,units,12338,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12917,testability,unit,units,12917,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelection,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13477,testability,unit,units,13477,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelection,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14037,testability,unit,units,14037,<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14597,testability,unit,units,14597,<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15176,testability,unit,units,15176,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15736,testability,unit,units,15736,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16315,testability,unit,units,16315,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16907,testability,unit,units,16907,:TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17480,testability,unit,units,17480,::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18053,testability,unit,units,18053,interCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18626,testability,unit,units,18626,interCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19218,testability,unit,units,19218,::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19791,testability,unit,units,19791,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20383,testability,unit,units,20383,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20535,usability,Command,CommandLine,20535,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20547,usability,Error,Error,20547,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20597,usability,ERROR,ERROR,20597,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20632,usability,Command,CommandLine,20632,"cess in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```. Any thoughts, @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:254,availability,error,error,254,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:53,deployability,fail,failing,53,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:105,energy efficiency,core,core,105,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:206,interoperability,share,share,206,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:254,performance,error,error,254,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:53,reliability,fail,failing,53,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:254,safety,error,error,254,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:254,usability,error,error,254,"Can you. - invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. - take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? I'm especially curious to see whether there are multiple llvm libraries involved, and what those are.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:268,availability,error,error,268,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5724,availability,Error,Error,5724,"m-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5774,availability,ERROR,ERROR,5774,"m-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:61,deployability,fail,failing,61,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:402,deployability,build,building,402,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:811,deployability,build,builddir,811,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1189,deployability,build,builddir,1189,"in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdyn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5352,deployability,fail,fails,5352,"llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5534,deployability,build,builddir,5534,"CodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:113,energy efficiency,core,core,113,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:485,energy efficiency,core,core,485,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:532,energy efficiency,core,core,532,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:576,energy efficiency,core,core,576,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:626,energy efficiency,core,core,626,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:676,energy efficiency,core,core,676,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:720,energy efficiency,core,core,720,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:767,energy efficiency,core,core,767,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:859,energy efficiency,core,core,859,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:906,energy efficiency,core,core,906,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:956,energy efficiency,core,core,956,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1000,energy efficiency,core,core,1000,"Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1750,energy efficiency,core,core,1750,/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o cor,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1815,energy efficiency,core,core,1815,ir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1881,energy efficiency,core,core,1881,/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1973,energy efficiency,core,core,1973,me/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/Cli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2198,energy efficiency,core,core,2198,terpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2245,energy efficiency,core,core,2245, -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Lin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2290,energy efficiency,core,core,2290,ics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2335,energy efficiency,core,core,2335,lthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2385,energy efficiency,core,core,2385,W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2428,energy efficiency,core,core,2428,ad -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2474,energy efficiency,core,core,2474,dden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2518,energy efficiency,core,core,2518,Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMak,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2564,energy efficiency,core,core,2564,ipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2610,energy efficiency,core,core,2610,igned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/X,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2656,energy efficiency,core,core,2656,te-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foun,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2703,energy efficiency,core,core,2703,no-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o cor,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2749,energy efficiency,core,core,2749,ore/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2796,energy efficiency,core,core,2796,g_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2842,energy efficiency,core,core,2842,en.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2888,energy efficiency,core,core,2888,gen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_St,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2945,energy efficiency,core,core,2945,ome/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3009,energy efficiency,core,core,3009,2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMak,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3073,energy efficiency,core,core,3073,o-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_sta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3138,energy efficiency,core,core,3138, -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3204,energy efficiency,core,core,3204,"b/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/ll",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3264,energy efficiency,core,core,3264,"Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3325,energy efficiency,core,core,3325,"ach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3379,energy efficiency,core,core,3379,"c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3440,energy efficiency,core,core,3440,"eFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3503,energy efficiency,core,core,3503,"rc/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpret",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3571,energy efficiency,core,core,3571,"/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3627,energy efficiency,core,core,3627,"s/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-proj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3702,energy efficiency,core,core,3702,"ore/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3783,energy efficiency,core,core,3783,"printf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-projec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3850,energy efficiency,core,core,3850,"CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3921,energy efficiency,core,core,3921,"ls.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3991,energy efficiency,core,core,3991,"lingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-pr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4057,energy efficiency,core,core,4057,"ionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4141,energy efficiency,core,core,4141,"dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5431,energy efficiency,core,core,5431,"reter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_ab",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5543,energy efficiency,core,core,5543,".a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () fr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5913,energy efficiency,optim,optimized,5913,".a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6112,energy efficiency,optim,optimized,6112,"langSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6270,energy efficiency,optim,optimized,6270,"a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6980,energy efficiency,alloc,allocator,6980,"hread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fff",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7084,energy efficiency,alloc,allocator,7084,"lementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7308,energy efficiency,alloc,allocator,7308,". #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7412,energy efficiency,alloc,allocator,7412,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7732,energy efficiency,core,core,7732,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7874,energy efficiency,core,core,7874,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7958,energy efficiency,optim,optimized,7958,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8135,energy efficiency,optim,optimized,8135,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8157,energy efficiency,optim,optimized,8157,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8184,energy efficiency,optim,optimized,8184,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:220,interoperability,share,share,220,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3611,interoperability,XML,XMLReader,3611,"lib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7460,interoperability,Format,FormattingFlags,7460,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1693,modifiability,paramet,parameter,1693,stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3543,modifiability,Variab,VariableSelectionRule,3543,"alloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:268,performance,error,error,268,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5724,performance,Error,Error,5724,"m-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5774,performance,ERROR,ERROR,5774,"m-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5913,performance,optimiz,optimized,5913,".a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6112,performance,optimiz,optimized,6112,"langSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6270,performance,optimiz,optimized,6270,"a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7958,performance,optimiz,optimized,7958,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8135,performance,optimiz,optimized,8135,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8157,performance,optimiz,optimized,8157,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8184,performance,optimiz,optimized,8184,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:61,reliability,fail,failing,61,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5352,reliability,fail,fails,5352,"llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:268,safety,error,error,268,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5724,safety,Error,Error,5724,"m-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5774,safety,ERROR,ERROR,5774,"m-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3365,security,Scanner,Scanner,3365,"getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libcl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5847,security,sign,signal,5847,"bclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5929,security,sign,signo,5929,"/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5935,security,sign,signo,5935,"project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6128,security,sign,signo,6128,"interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6134,security,sign,signo,6134,"reter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <g",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6251,security,sign,signo,6251,"vm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:268,usability,error,error,268,"> Can you. > . > * invoke `make VERBNOSE=1` and see what the failing invocation is? should be something like `cd core; rootcling_stage1 ...`. > . > * take that invocation and add `gdb --args ` in front and run that, and share the backtrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1228,usability,tool,tools,1228,"acktrace of the point where the LLVM error is emitted? > . > . > I'm especially curious to see whether there are multiple llvm libraries involved, and what those are. The building itself works fine:. ```. [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5712,usability,Command,CommandLine,5712,"reter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff187",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5724,usability,Error,Error,5724,"m-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5774,usability,ERROR,ERROR,5774,"m-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5809,usability,Command,CommandLine,5809,"nterpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. ```. However, calling rootcling fails with `Option 'W' registered more than once!`:. ```. Reading symbols from core/rootcling_stage1/src/rootcling_stage1... (gdb) run. Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 . [Thread debugging using libthread_db enabled]. Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"". : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted. __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. 44	./nptl/pthread_kill.c: No such file or directory. (gdb) where. #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Optio",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7178,usability,Support,Support,7178,"pthread_kill.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7186,usability,Command,CommandLine,7186,"ll.c:44. #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78. #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26. #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimize",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7602,usability,Support,Support,7602,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7610,usability,Command,CommandLine,7610,"fff04374b2 in __GI_abort () at ./stdlib/abort.c:79. #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib/llvm-16/lib/libLLVM-16.so.1. #8 0x0000555555ce306a in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::done (. this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1696. #9 0x0000555555cdde17 in llvm::cl::list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, llvm::cl::parser<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::list<char [2], llvm::cl::FormattingFlags, llvm::cl::NumOccurrencesFlag, llvm::cl::desc, llvm::cl::cat> (this=0x55555b5ba6a0 <gOptWDiags>) at /usr/include/llvm-16/llvm/Support/CommandLine.h:1732. #10 0x0000555555cd2003 in __static_initialization_and_destruction_0 () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:3843. #11 0x0000555555cd2448 in _GLOBAL__sub_I_rootcling_impl.cxx(void) () at /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx:6202. #12 0x00007ffff04387f6 in call_init (env=<optimized out>, argv=0x7fffffffddb8, argc=1) at ../csu/libc-start.c:145. #13 __libc_start_main_impl (main=0x555555d76aa9 <main(int, char**)>, argc=1, argv=0x7fffffffddb8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdda8) at ../csu/libc-start.c:347. #14 0x0000555555b89e41 in _start (). ```. Note: I'm using https://github.com/root-project/root/pull/13273 with https://github.com/root-project/root/pull/12153",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:28,energy efficiency,load,loading,28,This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:28,performance,load,loading,28,This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:91,availability,error,error,91,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:184,energy efficiency,core,core,184,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:310,energy efficiency,core,core,310,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:97,integrability,messag,message,97,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:97,interoperability,messag,message,97,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:91,performance,error,error,91,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:91,safety,error,error,91,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:91,usability,error,error,91,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:29,deployability,instal,installation,29,I can now got a minimal ROOT installation with external LLVM16 working on [this branch](https://github.com/stephanlachnit/root/tree/p-external-llvm). So in total:. - [llvm16 branch](https://github.com/root-project/root/pull/13273). - [Removing `-W` option in rootcling](https://github.com/root-project/root/issues/12156#issuecomment-1659010221). - [Adding `libbsd` option](https://github.com/root-project/root/pull/12154). - [Use CLING_BINARY_DIR instead of LLVM_BINARY_DIR](https://github.com/root-project/root/pull/12153). - [Removing `--src-root` option from `llvm-config` call](https://github.com/root-project/root/pull/13366). Tested with `-Dminimal=ON -Dbuiltin_llvm=OFF -Dlibbsd=ON`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:632,safety,Test,Tested,632,I can now got a minimal ROOT installation with external LLVM16 working on [this branch](https://github.com/stephanlachnit/root/tree/p-external-llvm). So in total:. - [llvm16 branch](https://github.com/root-project/root/pull/13273). - [Removing `-W` option in rootcling](https://github.com/root-project/root/issues/12156#issuecomment-1659010221). - [Adding `libbsd` option](https://github.com/root-project/root/pull/12154). - [Use CLING_BINARY_DIR instead of LLVM_BINARY_DIR](https://github.com/root-project/root/pull/12153). - [Removing `--src-root` option from `llvm-config` call](https://github.com/root-project/root/pull/13366). Tested with `-Dminimal=ON -Dbuiltin_llvm=OFF -Dlibbsd=ON`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:632,testability,Test,Tested,632,I can now got a minimal ROOT installation with external LLVM16 working on [this branch](https://github.com/stephanlachnit/root/tree/p-external-llvm). So in total:. - [llvm16 branch](https://github.com/root-project/root/pull/13273). - [Removing `-W` option in rootcling](https://github.com/root-project/root/issues/12156#issuecomment-1659010221). - [Adding `libbsd` option](https://github.com/root-project/root/pull/12154). - [Use CLING_BINARY_DIR instead of LLVM_BINARY_DIR](https://github.com/root-project/root/pull/12153). - [Removing `--src-root` option from `llvm-config` call](https://github.com/root-project/root/pull/13366). Tested with `-Dminimal=ON -Dbuiltin_llvm=OFF -Dlibbsd=ON`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16,usability,minim,minimal,16,I can now got a minimal ROOT installation with external LLVM16 working on [this branch](https://github.com/stephanlachnit/root/tree/p-external-llvm). So in total:. - [llvm16 branch](https://github.com/root-project/root/pull/13273). - [Removing `-W` option in rootcling](https://github.com/root-project/root/issues/12156#issuecomment-1659010221). - [Adding `libbsd` option](https://github.com/root-project/root/pull/12154). - [Use CLING_BINARY_DIR instead of LLVM_BINARY_DIR](https://github.com/root-project/root/pull/12153). - [Removing `--src-root` option from `llvm-config` call](https://github.com/root-project/root/pull/13366). Tested with `-Dminimal=ON -Dbuiltin_llvm=OFF -Dlibbsd=ON`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:94,testability,assert,assert,94,That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:66,usability,stop,stop,66,That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:96,testability,assert,assert,96,"> That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:68,usability,stop,stop,68,"> That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:274,usability,hint,hint,274,"> That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:299,deployability,build,build,299,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:337,deployability,stack,stacktrace,337,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:459,deployability,fail,fails,459,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:459,reliability,fail,fails,459,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:98,testability,assert,assert,98,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:70,usability,stop,stop,70,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:282,usability,hint,hint,282,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:446,usability,command,command,446,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. > . > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint? You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12,deployability,build,building,12,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:425,deployability,build,builddir,425,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:803,deployability,build,builddir,803,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:99,energy efficiency,core,core,99,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:146,energy efficiency,core,core,146,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:190,energy efficiency,core,core,190,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:240,energy efficiency,core,core,240,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:290,energy efficiency,core,core,290,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:334,energy efficiency,core,core,334,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:381,energy efficiency,core,core,381,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:473,energy efficiency,core,core,473,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:520,energy efficiency,core,core,520,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:570,energy efficiency,core,core,570,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:614,energy efficiency,core,core,614,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1364,energy efficiency,core,core,1364,/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1429,energy efficiency,core,core,1429,ir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1495,energy efficiency,core,core,1495,/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1587,energy efficiency,core,core,1587,me/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1814,energy efficiency,core,core,1814,rpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1861,energy efficiency,core,core,1861,isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Lin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1906,energy efficiency,core,core,1906,s-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1951,energy efficiency,core,core,1951,hrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2001,energy efficiency,core,core,2001,-Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2044,energy efficiency,core,core,2044, -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2090,energy efficiency,core,core,2090,en -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2134,energy efficiency,core,core,2134,o-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMak,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2180,energy efficiency,core,core,2180,e -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2226,energy efficiency,core,core,2226,ned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/X,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2272,energy efficiency,core,core,2272,-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foun,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2319,energy efficiency,core,core,2319,-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o cor,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2365,energy efficiency,core,core,2365,e/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2412,energy efficiency,core,core,2412,impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2458,energy efficiency,core,core,2458,.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2504,energy efficiency,core,core,2504,n/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_St,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2561,energy efficiency,core,core,2561,e/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2625,energy efficiency,core,core,2625,2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMak,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2689,energy efficiency,core,core,2689,o-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_sta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2754,energy efficiency,core,core,2754, -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2820,energy efficiency,core,core,2820,"b/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/ll",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2880,energy efficiency,core,core,2880,"Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2941,energy efficiency,core,core,2941,"ach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2995,energy efficiency,core,core,2995,"c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3056,energy efficiency,core,core,3056,"eFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3119,energy efficiency,core,core,3119,"rc/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpret",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3187,energy efficiency,core,core,3187,"/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3243,energy efficiency,core,core,3243,"s/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-proj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3318,energy efficiency,core,core,3318,"ore/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3399,energy efficiency,core,core,3399,"printf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-projec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3466,energy efficiency,core,core,3466,"CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3537,energy efficiency,core,core,3537,"ls.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3607,energy efficiency,core,core,3607,"lingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-pr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3673,energy efficiency,core,core,3673,"ionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3757,energy efficiency,core,core,3757,"dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3227,interoperability,XML,XMLReader,3227,"lib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4972,interoperability,specif,specific,4972,"s/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interpreter/llvm-project/llvm/lib/libclangRewriteFrontend.a interpreter/llvm-project/llvm/lib/libclangFrontend.a interpreter/llvm-project/llvm/lib/libclangDriver.a interpreter/llvm-project/llvm/lib/libclangParse.a interpreter/llvm-project/llvm/lib/libclangRewrite.a interpreter/llvm-project/llvm/lib/libclangSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :. > ```. > . Why is this linking both specific LLVM static libraries and `/usr/lib/llvm-16/lib/libLLVM-16.so.1`? I suspect that to be the cause.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1307,modifiability,paramet,parameter,1307,stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mreall,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3159,modifiability,Variab,VariableSelectionRule,3159,"alloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingUtils.a -ldl interpreter/llvm-project/llvm/lib/libclangCodeGen.a interp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2981,security,Scanner,Scanner,2981,"getpagesize.c.o core/clib/CMakeFiles/Clib.dir/src/keys.c.o core/clib/CMakeFiles/Clib.dir/src/mcalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mfree.c.o core/clib/CMakeFiles/Clib.dir/src/mmalloc.c.o core/clib/CMakeFiles/Clib.dir/src/mmapsup.c.o core/clib/CMakeFiles/Clib.dir/src/mmcheck.c.o core/clib/CMakeFiles/Clib.dir/src/mrealloc.c.o core/clib/CMakeFiles/Clib.dir/src/sbrksup.c.o core/clib/CMakeFiles/Clib.dir/src/snprintf.c.o core/clib/CMakeFiles/Clib.dir/src/strlcat.c.o core/clib/CMakeFiles/Clib.dir/src/strlcpy.c.o core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/FoundationUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/StringUtils.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TClassEdit.cxx.o core/foundation/CMakeFiles/Foundation_Stage1.dir/src/TError.cxx.o core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o -o core/rootcling_stage1/src/rootcling_stage1 -Wl,-rpath,/usr/lib/llvm-16/lib interpreter/llvm-project/llvm/lib/libclingInterpreter.a interpreter/llvm-project/llvm/lib/libclingMetaProcessor.a interpreter/llvm-project/llvm/lib/libcl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:842,usability,tool,tools,842,. > . > The building itself works fine:. > ```. > [1/2] /usr/bin/c++ -I/home/stephan/Projects/ROOT/core/dictgen/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/dictgen/src -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/interpreter/cling/include -isystem /home/stephan/Projects/ROOT/interpreter/llvm-project/clang/include -isystem /home/stephan/Projects/ROOT/builddir/interpreter/llvm-project/llvm/tools/clang/include -isystem /usr/lib/llvm-16/include -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -std=c++17 -fPIC -fvisibility-inlines-hidden -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c /home/stephan/Projects/ROOT/core/dictgen/src/rootcling_impl.cxx. > [2/2] : && /usr/bin/c++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -rdynamic core/clib/CMakeFiles/Clib.dir/src/Demangle.c.o core/clib/CMakeFiles/Clib.dir/src/attach.c.o core/clib/CMakeFiles/Clib.dir/src/detach.c.o core/clib/CMakeFiles/Clib.dir/src/getpagesize.c.o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:220,deployability,automat,automatically,220,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:441,reliability,doe,does,441,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:937,reliability,doe,does,937,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:501,security,access,accessible,501,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:220,testability,automat,automatically,220,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:984,testability,understand,understand,984,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:57,usability,document,documentation,57,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:98,usability,Command,CommandLine,98,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:370,usability,command,command,370,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:515,usability,user,users,515,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:733,usability,Help,HelpStr,733,"Right, I think I found the cause of this. [From the LLVM documentation](https://www.llvm.org/docs/CommandLine.html#exploiting-external-storage):. > Several of the LLVM libraries define static cl::opt instances that will automatically be included in any program that links with that library. This is a feature. However, sometimes it is necessary to know the value of the command line option outside of the library. In these cases the library does or should provide an external storage location that is accessible to users of the library. And, indeed, with this snippet:. ```c++. auto& opts_ = llvm::cl::getRegisteredOptions();. auto it = opts_.find(""W"");. if (it != opts_.end()) {. auto* opt = it->second;. std::cout << ""W: "" << opt->HelpStr.str() << std::endl;. }. else {. std::cout << ""W: notfound"" << std::endl;. }. ```. I got `W: Alias for --no-warn`, i.e. the option is one of those predefined ones. It's quite interesting that this does not happen in the vanilla ROOT case, if I understand the section correctly these should be always defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:462,availability,sla,slap,462,"I since found the exact place where the option is defined: https://github.com/llvm/llvm-project/blob/release/16.x/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp#L99-L102 (it's e.g. also there in `clang-repl`). I suppose in the default setup in ROOT, this is part of the LLVM library is not built and thus this option is never registered. We can remove all previously defined options with `llvm::cl::ResetCommandLineParser()`. However this has two issues if we just slap this line in there:. 1. Since all registered options are global statics, we would also remove all of the intended options. 2. ~~`rootcling` uses the predefined help options~~. Since I don't think it's an option to rename the `-W` option, here's my proposal:. To solve first issue, we need to put these in a function such that the options are constructed at run time. This is a bit unfortunate as it will increase the startup time of `rootcling` a bit, but on the other hand I don't expect it to be much. ~~The second issue is easily fixed by adding those options by hand.~~. Btw: `clang` does also seem to override the `-W` option, but I couldn't find where in the source code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:101,deployability,releas,release,101,"I since found the exact place where the option is defined: https://github.com/llvm/llvm-project/blob/release/16.x/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp#L99-L102 (it's e.g. also there in `clang-repl`). I suppose in the default setup in ROOT, this is part of the LLVM library is not built and thus this option is never registered. We can remove all previously defined options with `llvm::cl::ResetCommandLineParser()`. However this has two issues if we just slap this line in there:. 1. Since all registered options are global statics, we would also remove all of the intended options. 2. ~~`rootcling` uses the predefined help options~~. Since I don't think it's an option to rename the `-W` option, here's my proposal:. To solve first issue, we need to put these in a function such that the options are constructed at run time. This is a bit unfortunate as it will increase the startup time of `rootcling` a bit, but on the other hand I don't expect it to be much. ~~The second issue is easily fixed by adding those options by hand.~~. Btw: `clang` does also seem to override the `-W` option, but I couldn't find where in the source code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:828,performance,time,time,828,"I since found the exact place where the option is defined: https://github.com/llvm/llvm-project/blob/release/16.x/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp#L99-L102 (it's e.g. also there in `clang-repl`). I suppose in the default setup in ROOT, this is part of the LLVM library is not built and thus this option is never registered. We can remove all previously defined options with `llvm::cl::ResetCommandLineParser()`. However this has two issues if we just slap this line in there:. 1. Since all registered options are global statics, we would also remove all of the intended options. 2. ~~`rootcling` uses the predefined help options~~. Since I don't think it's an option to rename the `-W` option, here's my proposal:. To solve first issue, we need to put these in a function such that the options are constructed at run time. This is a bit unfortunate as it will increase the startup time of `rootcling` a bit, but on the other hand I don't expect it to be much. ~~The second issue is easily fixed by adding those options by hand.~~. Btw: `clang` does also seem to override the `-W` option, but I couldn't find where in the source code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:892,performance,time,time,892,"I since found the exact place where the option is defined: https://github.com/llvm/llvm-project/blob/release/16.x/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp#L99-L102 (it's e.g. also there in `clang-repl`). I suppose in the default setup in ROOT, this is part of the LLVM library is not built and thus this option is never registered. We can remove all previously defined options with `llvm::cl::ResetCommandLineParser()`. However this has two issues if we just slap this line in there:. 1. Since all registered options are global statics, we would also remove all of the intended options. 2. ~~`rootcling` uses the predefined help options~~. Since I don't think it's an option to rename the `-W` option, here's my proposal:. To solve first issue, we need to put these in a function such that the options are constructed at run time. This is a bit unfortunate as it will increase the startup time of `rootcling` a bit, but on the other hand I don't expect it to be much. ~~The second issue is easily fixed by adding those options by hand.~~. Btw: `clang` does also seem to override the `-W` option, but I couldn't find where in the source code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:462,reliability,sla,slap,462,"I since found the exact place where the option is defined: https://github.com/llvm/llvm-project/blob/release/16.x/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp#L99-L102 (it's e.g. also there in `clang-repl`). I suppose in the default setup in ROOT, this is part of the LLVM library is not built and thus this option is never registered. We can remove all previously defined options with `llvm::cl::ResetCommandLineParser()`. However this has two issues if we just slap this line in there:. 1. Since all registered options are global statics, we would also remove all of the intended options. 2. ~~`rootcling` uses the predefined help options~~. Since I don't think it's an option to rename the `-W` option, here's my proposal:. To solve first issue, we need to put these in a function such that the options are constructed at run time. This is a bit unfortunate as it will increase the startup time of `rootcling` a bit, but on the other hand I don't expect it to be much. ~~The second issue is easily fixed by adding those options by hand.~~. Btw: `clang` does also seem to override the `-W` option, but I couldn't find where in the source code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1055,reliability,doe,does,1055,"I since found the exact place where the option is defined: https://github.com/llvm/llvm-project/blob/release/16.x/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp#L99-L102 (it's e.g. also there in `clang-repl`). I suppose in the default setup in ROOT, this is part of the LLVM library is not built and thus this option is never registered. We can remove all previously defined options with `llvm::cl::ResetCommandLineParser()`. However this has two issues if we just slap this line in there:. 1. Since all registered options are global statics, we would also remove all of the intended options. 2. ~~`rootcling` uses the predefined help options~~. Since I don't think it's an option to rename the `-W` option, here's my proposal:. To solve first issue, we need to put these in a function such that the options are constructed at run time. This is a bit unfortunate as it will increase the startup time of `rootcling` a bit, but on the other hand I don't expect it to be much. ~~The second issue is easily fixed by adding those options by hand.~~. Btw: `clang` does also seem to override the `-W` option, but I couldn't find where in the source code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:627,usability,help,help,627,"I since found the exact place where the option is defined: https://github.com/llvm/llvm-project/blob/release/16.x/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp#L99-L102 (it's e.g. also there in `clang-repl`). I suppose in the default setup in ROOT, this is part of the LLVM library is not built and thus this option is never registered. We can remove all previously defined options with `llvm::cl::ResetCommandLineParser()`. However this has two issues if we just slap this line in there:. 1. Since all registered options are global statics, we would also remove all of the intended options. 2. ~~`rootcling` uses the predefined help options~~. Since I don't think it's an option to rename the `-W` option, here's my proposal:. To solve first issue, we need to put these in a function such that the options are constructed at run time. This is a bit unfortunate as it will increase the startup time of `rootcling` a bit, but on the other hand I don't expect it to be much. ~~The second issue is easily fixed by adding those options by hand.~~. Btw: `clang` does also seem to override the `-W` option, but I couldn't find where in the source code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,deployability,manag,managed,13,Good news: I managed to fix this issue with the approach described above 🥳 . Relevant commit: https://github.com/stephanlachnit/root/commit/556e4dff169e12f9515b19f3adf709f835bc6f47. I will clean it up and create against a MR against master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,energy efficiency,manag,managed,13,Good news: I managed to fix this issue with the approach described above 🥳 . Relevant commit: https://github.com/stephanlachnit/root/commit/556e4dff169e12f9515b19f3adf709f835bc6f47. I will clean it up and create against a MR against master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,safety,manag,managed,13,Good news: I managed to fix this issue with the approach described above 🥳 . Relevant commit: https://github.com/stephanlachnit/root/commit/556e4dff169e12f9515b19f3adf709f835bc6f47. I will clean it up and create against a MR against master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:308,integrability,sub,subtle,308,I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:237,testability,assert,asserts,237,I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:900,availability,robust,robust,900,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:744,deployability,build,build,744,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:867,deployability,build,building,867,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1377,deployability,build,build,1377,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:575,energy efficiency,core,core,575,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:852,energy efficiency,current,current,852,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:310,integrability,sub,subtle,310,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1131,interoperability,specif,specific,1131,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:900,reliability,robust,robust,900,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:900,safety,robust,robust,900,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:239,testability,assert,asserts,239,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:620,usability,help,help-hidden,620,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1258,usability,command,command,1258,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove. ```. // Hide options from llvm which we got from static initialization of libCling. llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);. ```. and run. ```. core/rootcling_stage1/src/rootcling_stage1 --help-hidden. ```. I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:123,security,modif,modification,123,"I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:83,usability,hint,hints,83,"I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:231,deployability,build,build,231,"> I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? Pull request is in https://github.com/root-project/root/pull/13372",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:174,safety,reme,remember,174,"> I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? Pull request is in https://github.com/root-project/root/pull/13372",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:125,security,modif,modification,125,"> I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? Pull request is in https://github.com/root-project/root/pull/13372",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:85,usability,hint,hints,85,"> I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? Pull request is in https://github.com/root-project/root/pull/13372",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:239,deployability,build,build,239,"> > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > . > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? > . > Pull request is in #13372. Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:182,safety,reme,remember,182,"> > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > . > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? > . > Pull request is in #13372. Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:127,security,modif,modification,127,"> > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > . > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? > . > Pull request is in #13372. Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:87,usability,hint,hints,87,"> > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > . > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? > . > Pull request is in #13372. Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:245,deployability,build,build,245,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1785,deployability,build,build,1785,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1839,deployability,build,build,1839,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1892,integrability,topic,topic,1892,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:824,interoperability,specif,specified,824,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:950,interoperability,share,shared,950,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1562,interoperability,specif,specifying,1562,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1593,performance,time,time,1593,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1384,reliability,doe,does,1384,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1631,reliability,doe,does,1631,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1791,reliability,doe,does,1791,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:188,safety,reme,remember,188,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:129,security,modif,modification,129,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:648,testability,trace,trace,648,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:89,usability,hint,hints,89,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1102,usability,command,command,1102,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1667,usability,experien,experiencing,1667,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1692,usability,behavi,behavior,1692,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1723,usability,document,documentation,1723,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1810,usability,behavi,behavior,1810,"> > > I find it surprising that works in-tree and breaks with `-Dbuiltin_llvm=Off`. That hints it needs something else than code modification in ROOT, right? > > . > > It definitely is. I remember @hahnjo telling me something like that the ROOT build of LLVM takes special care to hide any symbols from the LLVM library, maybe that's the reason why LLVM's predefined static symbols are not registered? > . > I believe we are misunderstanding each other. Could you re-read this comment https://github.com/root-project/root/issues/12156#issuecomment-1660294759 and this https://github.com/root-project/root/issues/12156#issuecomment-1660324761 ? The trace I gave in https://github.com/root-project/root/issues/12156#issuecomment-1658967214 was done by running `rootcling_stage1` with debugging synbols directly - no arguments specified. I also tried to look at library calls with `ltrace` but did not find anything suspiciuous. Almost all calls to the shared LLVM library are related to `llvm::cl` objects. Wrt to the linking I already said I don't see where LLVM should be linked twice from the linking command. Or is it not supposed to be linked at all? > > Pull request is in #13372. > . > Unfortunately, this PR is not fixing the issue and very likely won't make it since that's not what we are looking for. Is there anything wrong with the PR itself? As I already said, even if it does not solve any linking related issues, the PR makes perfect sense and even cleans up some workarounds for setting `llvm::cl` attributes later in the main function instead of specifying the at construction time. But also think it definitely it does fix the underlaying issue. I'm experiencing exactly the behavior described in the LLVM documentation. The question is rather why ROOT's builtin LLVM build does not show this behavior. Whether or not the build with external LLVM works in the end is not the topic of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:237,deployability,artifact,artifact,237,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:380,deployability,depend,dependencies,380,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:30,energy efficiency,load,loading,30,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:380,integrability,depend,dependencies,380,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:380,modifiability,depend,dependencies,380,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:30,performance,load,loading,30,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:380,safety,depend,dependencies,380,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:380,testability,depend,dependencies,380,> This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance. After reading this again - we don't want to link libLLVM then? Then this might be an artifact of https://github.com/root-project/root/pull/12154 where I changed the linking of object to linking of target - I guess this leads to dependencies (i.e. libLLVM) being linked as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:111,interoperability,share,shared,111,"> we don't want to link libLLVM then. Indeed: if we link the static libraries we don[t want to *also* link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). Could you see whether not applying the commit you mention fixes this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:328,interoperability,conflict,conflicts,328,"> we don't want to link libLLVM then. Indeed: if we link the static libraries we don[t want to *also* link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). Could you see whether not applying the commit you mention fixes this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:248,security,expos,exposed,248,"> we don't want to link libLLVM then. Indeed: if we link the static libraries we don[t want to *also* link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). Could you see whether not applying the commit you mention fixes this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:134,usability,prefer,prefer,134,"> we don't want to link libLLVM then. Indeed: if we link the static libraries we don[t want to *also* link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). Could you see whether not applying the commit you mention fixes this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:198,usability,effectiv,effectively,198,"> we don't want to link libLLVM then. Indeed: if we link the static libraries we don[t want to *also* link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). Could you see whether not applying the commit you mention fixes this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:119,interoperability,share,shared,119,"> > we don't want to link libLLVM then. > . > Indeed: if we link the static libraries we don[t want to _also_ link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). > . > Could you see whether not applying the commit you mention fixes this? Unfortunately, it seems like #12154 is unrelated. libLLVM is linked whether or not I add https://github.com/root-project/root/commit/8929db8b390ccd2aaf4ab41d6e28f61ad81510e0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:336,interoperability,conflict,conflicts,336,"> > we don't want to link libLLVM then. > . > Indeed: if we link the static libraries we don[t want to _also_ link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). > . > Could you see whether not applying the commit you mention fixes this? Unfortunately, it seems like #12154 is unrelated. libLLVM is linked whether or not I add https://github.com/root-project/root/commit/8929db8b390ccd2aaf4ab41d6e28f61ad81510e0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:256,security,expos,exposed,256,"> > we don't want to link libLLVM then. > . > Indeed: if we link the static libraries we don[t want to _also_ link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). > . > Could you see whether not applying the commit you mention fixes this? Unfortunately, it seems like #12154 is unrelated. libLLVM is linked whether or not I add https://github.com/root-project/root/commit/8929db8b390ccd2aaf4ab41d6e28f61ad81510e0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:142,usability,prefer,prefer,142,"> > we don't want to link libLLVM then. > . > Indeed: if we link the static libraries we don[t want to _also_ link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). > . > Could you see whether not applying the commit you mention fixes this? Unfortunately, it seems like #12154 is unrelated. libLLVM is linked whether or not I add https://github.com/root-project/root/commit/8929db8b390ccd2aaf4ab41d6e28f61ad81510e0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:206,usability,effectiv,effectively,206,"> > we don't want to link libLLVM then. > . > Indeed: if we link the static libraries we don[t want to _also_ link the shared library. And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Apologies for not being explicit enough on this, caused by me transitioning from vacation to work :-). > . > Could you see whether not applying the commit you mention fixes this? Unfortunately, it seems like #12154 is unrelated. libLLVM is linked whether or not I add https://github.com/root-project/root/commit/8929db8b390ccd2aaf4ab41d6e28f61ad81510e0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:332,availability,avail,available,332,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:203,interoperability,conflict,conflicts,203,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:332,reliability,availab,available,332,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:267,safety,test,tests,267,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:332,safety,avail,available,332,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:123,security,expos,exposed,123,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:332,security,availab,available,332,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:267,testability,test,tests,267,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9,usability,prefer,prefer,9,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:73,usability,effectiv,effectively,73,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:114,security,ssh,ssh,114,It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:118,security,access,access,118,It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,testability,simpl,simple,13,It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,usability,simpl,simple,13,It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:303,deployability,version,version,303,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:191,integrability,pub,public,191,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:303,integrability,version,version,303,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:303,modifiability,version,version,303,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:116,security,ssh,ssh,116,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:120,security,access,access,120,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:221,security,ssh,ssh,221,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15,testability,simpl,simple,15,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:243,testability,simpl,simple,243,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15,usability,simpl,simple,15,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:243,usability,simpl,simple,243,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want? In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:243,interoperability,share,shared,243,"> I noticed that by default everything is linked using the static libraries from LLVM. As I [said](https://github.com/root-project/root/issues/12156#issuecomment-1662255320):. > if we link the static libraries we don't want to *also* link the shared library. And we prefer static libs. And what you suggest:. > In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it... sounds both plausible and simple :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:426,testability,simpl,simple,426,"> I noticed that by default everything is linked using the static libraries from LLVM. As I [said](https://github.com/root-project/root/issues/12156#issuecomment-1662255320):. > if we link the static libraries we don't want to *also* link the shared library. And we prefer static libs. And what you suggest:. > In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it... sounds both plausible and simple :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:266,usability,prefer,prefer,266,"> I noticed that by default everything is linked using the static libraries from LLVM. As I [said](https://github.com/root-project/root/issues/12156#issuecomment-1662255320):. > if we link the static libraries we don't want to *also* link the shared library. And we prefer static libs. And what you suggest:. > In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it... sounds both plausible and simple :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:426,usability,simpl,simple,426,"> I noticed that by default everything is linked using the static libraries from LLVM. As I [said](https://github.com/root-project/root/issues/12156#issuecomment-1662255320):. > if we link the static libraries we don't want to *also* link the shared library. And we prefer static libs. And what you suggest:. > In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it... sounds both plausible and simple :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:149,reliability,doe,doesn,149,"> sounds both plausible and simple :-) Let us know, please! I struggle a bit to find out exactly where CMake gets the LLVM library, unfortunately it doesn't look like it uses `llvm-config --libs`... Will look around though",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:28,testability,simpl,simple,28,"> sounds both plausible and simple :-) Let us know, please! I struggle a bit to find out exactly where CMake gets the LLVM library, unfortunately it doesn't look like it uses `llvm-config --libs`... Will look around though",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:28,usability,simpl,simple,28,"> sounds both plausible and simple :-) Let us know, please! I struggle a bit to find out exactly where CMake gets the LLVM library, unfortunately it doesn't look like it uses `llvm-config --libs`... Will look around though",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:319,deployability,depend,dependencies,319,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:349,deployability,instal,installed,349,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:319,integrability,depend,dependencies,319,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:319,modifiability,depend,dependencies,319,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:319,safety,depend,dependencies,319,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:36,testability,simpl,simple,36,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:319,testability,depend,dependencies,319,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:36,usability,simpl,simple,36,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:208,usability,prefer,prefer,208,"Found it! As it turns out, it is a ""simple"" 2 line fix:. https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:93,deployability,depend,dependency,93,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:130,deployability,build,build,130,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:215,deployability,depend,depend,215,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:829,deployability,depend,dependencies,829,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:330,energy efficiency,core,core,330,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:93,integrability,depend,dependency,93,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:215,integrability,depend,depend,215,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:829,integrability,depend,dependencies,829,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:84,interoperability,specif,specific,84,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:93,modifiability,depend,dependency,93,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:215,modifiability,depend,depend,215,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:829,modifiability,depend,dependencies,829,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:700,performance,CACH,CACHE,700,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:93,safety,depend,dependency,93,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:215,safety,depend,depend,215,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:829,safety,depend,dependencies,829,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:34,testability,understand,understand,34,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:93,testability,depend,dependency,93,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:215,testability,depend,depend,215,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:829,testability,depend,dependencies,829,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? As an example, in `core/rootcling_stage1/CMakeLists.txt` we have. ```CMake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. [...]. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:. ```CMake. set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"). ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. ```CMake. set(LIBS. clingUtils. [...]. ). set(LLVM_LINK_COMPONENTS. analysis. [...]. ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:95,deployability,depend,dependency,95,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:132,deployability,build,build,132,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:217,deployability,depend,depend,217,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:434,deployability,depend,depends,434,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:631,deployability,depend,dependencies,631,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:937,deployability,modul,modules,937,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:95,integrability,depend,dependency,95,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:217,integrability,depend,depend,217,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:434,integrability,depend,depends,434,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:501,integrability,compon,components,501,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:631,integrability,depend,dependencies,631,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:86,interoperability,specif,specific,86,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:501,interoperability,compon,components,501,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:95,modifiability,depend,dependency,95,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:217,modifiability,depend,depend,217,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:434,modifiability,depend,depends,434,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:501,modifiability,compon,components,501,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:631,modifiability,depend,dependencies,631,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:937,modifiability,modul,modules,937,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:482,reliability,doe,doesn,482,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:95,safety,depend,dependency,95,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:217,safety,depend,depend,217,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:434,safety,depend,depends,434,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:631,safety,depend,dependencies,631,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:937,safety,modul,modules,937,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:36,testability,understand,understand,36,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:95,testability,depend,dependency,95,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:217,testability,depend,depend,217,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:434,testability,depend,depends,434,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:631,testability,depend,dependencies,631,"> Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM? I have to investigate a bit more. For builtin clang, I don't know (yet) how or if it selects explicitly which library it depends on. However for rootcling it definitely doesn't select the components correctly. > And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. > . > ```cmake. > set(LIBS. > clingUtils. > [...]. > ). > . > set(LLVM_LINK_COMPONENTS. > analysis. > [...]. > ```. It should do the trick according to [`AddLLVM.cmake`](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake#L458-L459). Maybe it's worth trying to set `LINK_COMPONENTS` in the function `llvm_add_library` call explicitly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:330,deployability,build,build,330,"> Found it! As it turns out, it is a ""simple"" 2 line fix: [stephanlachnit@65ae229](https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4). > . > We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. I'm surprised that this helps. I remember trying using a static-only build of LLVM to fix this with no success.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:294,safety,reme,remember,294,"> Found it! As it turns out, it is a ""simple"" 2 line fix: [stephanlachnit@65ae229](https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4). > . > We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. I'm surprised that this helps. I remember trying using a static-only build of LLVM to fix this with no success.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:38,testability,simpl,simple,38,"> Found it! As it turns out, it is a ""simple"" 2 line fix: [stephanlachnit@65ae229](https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4). > . > We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. I'm surprised that this helps. I remember trying using a static-only build of LLVM to fix this with no success.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:38,usability,simpl,simple,38,"> Found it! As it turns out, it is a ""simple"" 2 line fix: [stephanlachnit@65ae229](https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4). > . > We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. I'm surprised that this helps. I remember trying using a static-only build of LLVM to fix this with no success.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:241,usability,prefer,prefer,241,"> Found it! As it turns out, it is a ""simple"" 2 line fix: [stephanlachnit@65ae229](https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4). > . > We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. I'm surprised that this helps. I remember trying using a static-only build of LLVM to fix this with no success.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:285,usability,help,helps,285,"> Found it! As it turns out, it is a ""simple"" 2 line fix: [stephanlachnit@65ae229](https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4). > . > We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. I'm surprised that this helps. I remember trying using a static-only build of LLVM to fix this with no success.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:108,deployability,depend,dependencies,108,"> And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. After some investigation I found the problem. Let's inspect the `LINK_LIBRARIES` from `clingInterpreter`:. ```. Properties for TARGET clingInterpreter:. clingInterpreter.LINK_LIBRARIES = ""clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMAMDGPUCodeGen;LLVMAMDGPUAsmParser;LLVMAMDGPUDesc;LLVMAMDGPUDisassembler;LLVMAMDGPUInfo;LLVMAMDGPUUtils;LLVMARMCodeGen;LLVMARMAsmParser;LLVMARMDesc;LLVMARMDisassembler;LLVMARMInfo;LLVMARMUtils;LLVMAVRCodeGen;LLVMAVRAsmParser;LLVMAVRDesc;LLVMAVRDisassembler;LLVMAVRInfo;LLVMBPFCodeGen;LLVMBPFAsmParser;LLVMBPFDesc;LLVMBPFDisassembler;LLVMBPFInfo;LLVMHexagonCodeGen;LLVMHexagonAsmParser;LLVMHexagonDesc;LLVMHexagonDisassembler;LLVMHexagonInfo;LLVMLanaiCodeGen;LLVMLanaiAsmParser;LLVMLanaiDesc;LLVMLanaiDisassembler;LLVMLanaiInfo;LLVMLoongArchCodeGen;LLVMLoongArchAsmParser;LLVMLoongArchDesc;LLVMLoongArchDisassembler;LLVMLoongArchInfo;LLVMMipsCodeGen;LLVMMipsAsmParser;LLVMMipsDesc;LLVMMipsDisassembler;LLVMMipsInfo;LLVMMSP430CodeGen;LLVMMSP430AsmParser;LLVMMSP430Desc;LLVMMSP430Disassembler;LLVMMSP430Info;LLVMNVPTXCodeGen;LLVMNVPTXDesc;LLVMNVPTXInfo;LLVMPowerPCCodeGen;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMRISCVCodeGen;LLVMRISCVAsmParser;LLVMRISCVDesc;LLVMRISCVDisassembler;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmParser;LLVMSys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3430,energy efficiency,Power,PowerPC,3430,"fo;LLVMPowerPCCodeGen;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMRISCVCodeGen;LLVMRISCVAsmParser;LLVMRISCVDesc;LLVMRISCVDisassembler;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmParser;LLVMSystemZDesc;LLVMSystemZDisassembler;LLVMSystemZInfo;LLVMVECodeGen;LLVMVEAsmParser;LLVMVEDesc;LLVMVEDisassembler;LLVMVEInfo;LLVMWebAssemblyCodeGen;LLVMWebAssemblyAsmParser;LLVMWebAssemblyDesc;LLVMWebAssemblyDisassembler;LLVMWebAssemblyInfo;LLVMWebAssemblyUtils;LLVMX86CodeGen;LLVMX86AsmParser;LLVMX86Desc;LLVMX86Disassembler;LLVMX86Info;LLVMXCoreCodeGen;LLVMXCoreDesc;LLVMXCoreDisassembler;LLVMXCoreInfo;LLVMM68kCodeGen;LLVMM68kAsmParser;LLVMM68kDesc;LLVMM68kDisassembler;LLVMM68kInfo;LLVMXtensaCodeGen;LLVMXtensaAsmParser;LLVMXtensaDesc;LLVMXtensaDisassembler;LLVMXtensaInfo"". ```. That's too much. Let's remove `${LLVM_TARGETS_TO_BUILD}` from the list (which *should* be `X86;NVPTX`), and look again:. ```. Properties for TARGET clingInterpreter:. clingInterpreter.LINK_LIBRARIES = ""clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat"". ```. Huh, that sounds more reasonable. So what is the value of `LLVM_TARGETS_TO_BUILD`? As it turns out, it's not what it is supposed to be:. ```. LLVM_TARGETS_TO_BUILD=""AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;LoongArch;Mips;MSP430;NVPTX;PowerPC;RISCV;Sparc;SystemZ;VE;WebAssembly;X86;XCore;M68k;Xtensa"". ```. I think the problem here once we include system LLVM, it's possible that all the CMake variables get overwritten. I will investigate further to find out where this happens exactly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:108,integrability,depend,dependencies,108,"> And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. After some investigation I found the problem. Let's inspect the `LINK_LIBRARIES` from `clingInterpreter`:. ```. Properties for TARGET clingInterpreter:. clingInterpreter.LINK_LIBRARIES = ""clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMAMDGPUCodeGen;LLVMAMDGPUAsmParser;LLVMAMDGPUDesc;LLVMAMDGPUDisassembler;LLVMAMDGPUInfo;LLVMAMDGPUUtils;LLVMARMCodeGen;LLVMARMAsmParser;LLVMARMDesc;LLVMARMDisassembler;LLVMARMInfo;LLVMARMUtils;LLVMAVRCodeGen;LLVMAVRAsmParser;LLVMAVRDesc;LLVMAVRDisassembler;LLVMAVRInfo;LLVMBPFCodeGen;LLVMBPFAsmParser;LLVMBPFDesc;LLVMBPFDisassembler;LLVMBPFInfo;LLVMHexagonCodeGen;LLVMHexagonAsmParser;LLVMHexagonDesc;LLVMHexagonDisassembler;LLVMHexagonInfo;LLVMLanaiCodeGen;LLVMLanaiAsmParser;LLVMLanaiDesc;LLVMLanaiDisassembler;LLVMLanaiInfo;LLVMLoongArchCodeGen;LLVMLoongArchAsmParser;LLVMLoongArchDesc;LLVMLoongArchDisassembler;LLVMLoongArchInfo;LLVMMipsCodeGen;LLVMMipsAsmParser;LLVMMipsDesc;LLVMMipsDisassembler;LLVMMipsInfo;LLVMMSP430CodeGen;LLVMMSP430AsmParser;LLVMMSP430Desc;LLVMMSP430Disassembler;LLVMMSP430Info;LLVMNVPTXCodeGen;LLVMNVPTXDesc;LLVMNVPTXInfo;LLVMPowerPCCodeGen;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMRISCVCodeGen;LLVMRISCVAsmParser;LLVMRISCVDesc;LLVMRISCVDisassembler;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmParser;LLVMSys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:108,modifiability,depend,dependencies,108,"> And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. After some investigation I found the problem. Let's inspect the `LINK_LIBRARIES` from `clingInterpreter`:. ```. Properties for TARGET clingInterpreter:. clingInterpreter.LINK_LIBRARIES = ""clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMAMDGPUCodeGen;LLVMAMDGPUAsmParser;LLVMAMDGPUDesc;LLVMAMDGPUDisassembler;LLVMAMDGPUInfo;LLVMAMDGPUUtils;LLVMARMCodeGen;LLVMARMAsmParser;LLVMARMDesc;LLVMARMDisassembler;LLVMARMInfo;LLVMARMUtils;LLVMAVRCodeGen;LLVMAVRAsmParser;LLVMAVRDesc;LLVMAVRDisassembler;LLVMAVRInfo;LLVMBPFCodeGen;LLVMBPFAsmParser;LLVMBPFDesc;LLVMBPFDisassembler;LLVMBPFInfo;LLVMHexagonCodeGen;LLVMHexagonAsmParser;LLVMHexagonDesc;LLVMHexagonDisassembler;LLVMHexagonInfo;LLVMLanaiCodeGen;LLVMLanaiAsmParser;LLVMLanaiDesc;LLVMLanaiDisassembler;LLVMLanaiInfo;LLVMLoongArchCodeGen;LLVMLoongArchAsmParser;LLVMLoongArchDesc;LLVMLoongArchDisassembler;LLVMLoongArchInfo;LLVMMipsCodeGen;LLVMMipsAsmParser;LLVMMipsDesc;LLVMMipsDisassembler;LLVMMipsInfo;LLVMMSP430CodeGen;LLVMMSP430AsmParser;LLVMMSP430Desc;LLVMMSP430Disassembler;LLVMMSP430Info;LLVMNVPTXCodeGen;LLVMNVPTXDesc;LLVMNVPTXInfo;LLVMPowerPCCodeGen;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMRISCVCodeGen;LLVMRISCVAsmParser;LLVMRISCVDesc;LLVMRISCVDisassembler;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmParser;LLVMSys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3589,modifiability,variab,variables,3589,"fo;LLVMPowerPCCodeGen;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMRISCVCodeGen;LLVMRISCVAsmParser;LLVMRISCVDesc;LLVMRISCVDisassembler;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmParser;LLVMSystemZDesc;LLVMSystemZDisassembler;LLVMSystemZInfo;LLVMVECodeGen;LLVMVEAsmParser;LLVMVEDesc;LLVMVEDisassembler;LLVMVEInfo;LLVMWebAssemblyCodeGen;LLVMWebAssemblyAsmParser;LLVMWebAssemblyDesc;LLVMWebAssemblyDisassembler;LLVMWebAssemblyInfo;LLVMWebAssemblyUtils;LLVMX86CodeGen;LLVMX86AsmParser;LLVMX86Desc;LLVMX86Disassembler;LLVMX86Info;LLVMXCoreCodeGen;LLVMXCoreDesc;LLVMXCoreDisassembler;LLVMXCoreInfo;LLVMM68kCodeGen;LLVMM68kAsmParser;LLVMM68kDesc;LLVMM68kDisassembler;LLVMM68kInfo;LLVMXtensaCodeGen;LLVMXtensaAsmParser;LLVMXtensaDesc;LLVMXtensaDisassembler;LLVMXtensaInfo"". ```. That's too much. Let's remove `${LLVM_TARGETS_TO_BUILD}` from the list (which *should* be `X86;NVPTX`), and look again:. ```. Properties for TARGET clingInterpreter:. clingInterpreter.LINK_LIBRARIES = ""clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat"". ```. Huh, that sounds more reasonable. So what is the value of `LLVM_TARGETS_TO_BUILD`? As it turns out, it's not what it is supposed to be:. ```. LLVM_TARGETS_TO_BUILD=""AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;LoongArch;Mips;MSP430;NVPTX;PowerPC;RISCV;Sparc;SystemZ;VE;WebAssembly;X86;XCore;M68k;Xtensa"". ```. I think the problem here once we include system LLVM, it's possible that all the CMake variables get overwritten. I will investigate further to find out where this happens exactly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:108,safety,depend,dependencies,108,"> And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. After some investigation I found the problem. Let's inspect the `LINK_LIBRARIES` from `clingInterpreter`:. ```. Properties for TARGET clingInterpreter:. clingInterpreter.LINK_LIBRARIES = ""clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMAMDGPUCodeGen;LLVMAMDGPUAsmParser;LLVMAMDGPUDesc;LLVMAMDGPUDisassembler;LLVMAMDGPUInfo;LLVMAMDGPUUtils;LLVMARMCodeGen;LLVMARMAsmParser;LLVMARMDesc;LLVMARMDisassembler;LLVMARMInfo;LLVMARMUtils;LLVMAVRCodeGen;LLVMAVRAsmParser;LLVMAVRDesc;LLVMAVRDisassembler;LLVMAVRInfo;LLVMBPFCodeGen;LLVMBPFAsmParser;LLVMBPFDesc;LLVMBPFDisassembler;LLVMBPFInfo;LLVMHexagonCodeGen;LLVMHexagonAsmParser;LLVMHexagonDesc;LLVMHexagonDisassembler;LLVMHexagonInfo;LLVMLanaiCodeGen;LLVMLanaiAsmParser;LLVMLanaiDesc;LLVMLanaiDisassembler;LLVMLanaiInfo;LLVMLoongArchCodeGen;LLVMLoongArchAsmParser;LLVMLoongArchDesc;LLVMLoongArchDisassembler;LLVMLoongArchInfo;LLVMMipsCodeGen;LLVMMipsAsmParser;LLVMMipsDesc;LLVMMipsDisassembler;LLVMMipsInfo;LLVMMSP430CodeGen;LLVMMSP430AsmParser;LLVMMSP430Desc;LLVMMSP430Disassembler;LLVMMSP430Info;LLVMNVPTXCodeGen;LLVMNVPTXDesc;LLVMNVPTXInfo;LLVMPowerPCCodeGen;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMRISCVCodeGen;LLVMRISCVAsmParser;LLVMRISCVDesc;LLVMRISCVDisassembler;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmParser;LLVMSys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:108,testability,depend,dependencies,108,"> And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:. After some investigation I found the problem. Let's inspect the `LINK_LIBRARIES` from `clingInterpreter`:. ```. Properties for TARGET clingInterpreter:. clingInterpreter.LINK_LIBRARIES = ""clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMAMDGPUCodeGen;LLVMAMDGPUAsmParser;LLVMAMDGPUDesc;LLVMAMDGPUDisassembler;LLVMAMDGPUInfo;LLVMAMDGPUUtils;LLVMARMCodeGen;LLVMARMAsmParser;LLVMARMDesc;LLVMARMDisassembler;LLVMARMInfo;LLVMARMUtils;LLVMAVRCodeGen;LLVMAVRAsmParser;LLVMAVRDesc;LLVMAVRDisassembler;LLVMAVRInfo;LLVMBPFCodeGen;LLVMBPFAsmParser;LLVMBPFDesc;LLVMBPFDisassembler;LLVMBPFInfo;LLVMHexagonCodeGen;LLVMHexagonAsmParser;LLVMHexagonDesc;LLVMHexagonDisassembler;LLVMHexagonInfo;LLVMLanaiCodeGen;LLVMLanaiAsmParser;LLVMLanaiDesc;LLVMLanaiDisassembler;LLVMLanaiInfo;LLVMLoongArchCodeGen;LLVMLoongArchAsmParser;LLVMLoongArchDesc;LLVMLoongArchDisassembler;LLVMLoongArchInfo;LLVMMipsCodeGen;LLVMMipsAsmParser;LLVMMipsDesc;LLVMMipsDisassembler;LLVMMipsInfo;LLVMMSP430CodeGen;LLVMMSP430AsmParser;LLVMMSP430Desc;LLVMMSP430Disassembler;LLVMMSP430Info;LLVMNVPTXCodeGen;LLVMNVPTXDesc;LLVMNVPTXInfo;LLVMPowerPCCodeGen;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMRISCVCodeGen;LLVMRISCVAsmParser;LLVMRISCVDesc;LLVMRISCVDisassembler;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmParser;LLVMSys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:526,deployability,build,build,526,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:586,deployability,Build,Building,586,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:348,energy efficiency,load,loading,348,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:409,energy efficiency,load,loaded,409,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:553,integrability,configur,configuring,553,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:553,modifiability,configur,configuring,553,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:348,performance,load,loading,348,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:409,performance,load,loaded,409,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:497,reliability,doe,does,497,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:553,security,configur,configuring,553,"[Here at the problematic lines](https://github.com/stephanlachnit/root/blob/65ae229c6ba458c610f0a41d32b798a132f385e4/interpreter/CMakeLists.txt#L305-L311):. ```cmake. set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""). if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```. By loading `LLVMConfig.cmake`, all setting from system LLVM are loaded as well. This is actually done twice, since `interpreter/cling/CMakeListsts.txt` does not check whether it is build as part of ROOT when configuring LLVM:. ```. else() # Building as part of LLVM. ... if(EXISTS ${LLVMCONFIG_FILE}). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""). include(${LLVMCONFIG_FILE}). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:129,energy efficiency,load,loading,129,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:220,energy efficiency,load,loading,220,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:82,modifiability,variab,variables,82,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:129,performance,load,loading,129,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:220,performance,load,loading,220,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:190,safety,test,test,190,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:190,testability,test,test,190,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:111,interoperability,specif,specifies,111,"After a bit more testing, my previous though does not work. We need to link with everything `LLVMConfig.cmake` specifies, otherwise we get linking issues. Not a big problem anyway. https://github.com/root-project/root/pull/13420 is a minimal PR for master to fix both #12156 and #12152.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:45,reliability,doe,does,45,"After a bit more testing, my previous though does not work. We need to link with everything `LLVMConfig.cmake` specifies, otherwise we get linking issues. Not a big problem anyway. https://github.com/root-project/root/pull/13420 is a minimal PR for master to fix both #12156 and #12152.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17,safety,test,testing,17,"After a bit more testing, my previous though does not work. We need to link with everything `LLVMConfig.cmake` specifies, otherwise we get linking issues. Not a big problem anyway. https://github.com/root-project/root/pull/13420 is a minimal PR for master to fix both #12156 and #12152.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17,testability,test,testing,17,"After a bit more testing, my previous though does not work. We need to link with everything `LLVMConfig.cmake` specifies, otherwise we get linking issues. Not a big problem anyway. https://github.com/root-project/root/pull/13420 is a minimal PR for master to fix both #12156 and #12152.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:234,usability,minim,minimal,234,"After a bit more testing, my previous though does not work. We need to link with everything `LLVMConfig.cmake` specifies, otherwise we get linking issues. Not a big problem anyway. https://github.com/root-project/root/pull/13420 is a minimal PR for master to fix both #12156 and #12152.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20528,availability,Error,Error,20528,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20578,availability,ERROR,ERROR,20578,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:595,integrability,translat,translation,595,Not fixed here:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1166,integrability,translat,translation,1166,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1737,integrability,translat,translation,1737,ixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2308,integrability,translat,translation,2308,ixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2898,integrability,translat,translation,2898,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3469,integrability,translat,translation,3469,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument(),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4059,integrability,translat,translation,4059,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4659,integrability,translat,translation,4659,emplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5240,integrability,translat,translation,5240,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5821,integrability,translat,translation,5821,erseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6402,integrability,translat,translation,6402,erseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7002,integrability,translat,translation,7002,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7583,integrability,translat,translation,7583,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefault,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8183,integrability,translat,translation,8183,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8783,integrability,translat,translation,8783,mplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9364,integrability,translat,translation,9364,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9945,integrability,translat,translation,9945,seTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10526,integrability,translat,translation,10526,seTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11126,integrability,translat,translation,11126,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11707,integrability,translat,translation,11707,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::Non,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12307,integrability,translat,translation,12307,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12886,integrability,translat,translation,12886,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13446,integrability,translat,translation,13446,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14006,integrability,translat,translation,14006,STVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14566,integrability,translat,translation,14566,STVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15145,integrability,translat,translation,15145,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15705,integrability,translat,translation,15705,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' fr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16284,integrability,translat,translation,16284,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16876,integrability,translat,translation,16876,llector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17449,integrability,translat,translation,17449,Injector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18022,integrability,translat,translation,18022,pace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18595,integrability,translat,translation,18595,pace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19187,integrability,translat,translation,19187,Injector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19760,integrability,translat,translation,19760,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20352,integrability,translat,translation,20352,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20634,integrability,Sub,Subprocess,20634,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:595,interoperability,translat,translation,595,Not fixed here:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1166,interoperability,translat,translation,1166,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1737,interoperability,translat,translation,1737,ixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2308,interoperability,translat,translation,2308,ixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2898,interoperability,translat,translation,2898,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3469,interoperability,translat,translation,3469,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument(),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4059,interoperability,translat,translation,4059,lateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4659,interoperability,translat,translation,4659,emplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5240,interoperability,translat,translation,5240,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5821,interoperability,translat,translation,5821,erseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6402,interoperability,translat,translation,6402,erseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7002,interoperability,translat,translation,7002,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7583,interoperability,translat,translation,7583,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefault,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8183,interoperability,translat,translation,8183,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8783,interoperability,translat,translation,8783,mplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9364,interoperability,translat,translation,9364,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9945,interoperability,translat,translation,9945,seTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10526,interoperability,translat,translation,10526,seTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11126,interoperability,translat,translation,11126,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11707,interoperability,translat,translation,11707,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::Non,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12307,interoperability,translat,translation,12307,armDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12886,interoperability,translat,translation,12886,eParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13446,interoperability,translat,translation,13446,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/Dict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14006,interoperability,translat,translation,14006,STVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14566,interoperability,translat,translation,14566,STVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15145,interoperability,translat,translation,15145,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15705,interoperability,translat,translation,15705,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' fr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16284,interoperability,translat,translation,16284,nonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16876,interoperability,translat,translation,16876,llector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17449,interoperability,translat,translation,17449,Injector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18022,interoperability,translat,translation,18022,pace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18595,interoperability,translat,translation,18595,pace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19187,interoperability,translat,translation,19187,Injector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from fil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19760,interoperability,translat,translation,19760,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20352,interoperability,translat,translation,20352,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:345,modifiability,variab,variable,345,Not fixed here:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2648,modifiability,variab,variable,2648,the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3809,modifiability,variab,variable,3809,the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoading,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4409,modifiability,variab,variable,4409,rridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6752,modifiability,variab,variable,6752,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7933,modifiability,variab,variable,7933,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8533,modifiability,variab,variable,8533, runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10876,modifiability,variab,variable,10876,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12057,modifiability,variab,variable,12057,ot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVar,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12636,modifiability,variab,variable,12636,nnot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::Travers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14895,modifiability,variab,variable,14895,onReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::Travers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16034,modifiability,variab,variable,16034,onReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::Poi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16626,modifiability,variab,variable,16626,ymbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18937,modifiability,variab,variable,18937,weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20102,modifiability,variab,variable,20102,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20528,performance,Error,Error,20528,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20578,performance,ERROR,ERROR,20578,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20528,safety,Error,Error,20528,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20578,safety,ERROR,ERROR,20578,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:94,security,access,access,94,Not fixed here:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:684,security,access,access,684,Not fixed here:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1255,security,access,access,1255,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridde,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1826,security,access,access,1826,../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2397,security,access,access,2397,../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2987,security,access,access,2987,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3558,security,access,access,3558,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4148,security,access,access,4148,lvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4748,security,access,access,4748,er.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5329,security,access,access,5329,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5910,security,access,access,5910,preter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6491,security,access,access,6491,preter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7091,security,access,access,7091,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7672,security,access,access,7672,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelect,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8272,security,access,access,8272,/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8872,security,access,access,8872,r.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9453,security,access,access,9453,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10034,security,access,access,10034,eter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10615,security,access,access,10615,eter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11215,security,access,access,11215,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11796,security,access,access,11796,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' mean,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12396,security,access,access,12396,ibclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12975,security,access,access,12975,/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13535,security,access,access,13535,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14095,security,access,access,14095,)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14655,security,access,access,14655,)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15234,security,access,access,15234,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15794,security,access,access,15794,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the we,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16373,security,access,access,16373,/interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16965,security,access,access,16965,ngInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17538,security,access,access,17538,ingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18111,security,access,access,18111,/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18684,security,access,access,18684,/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19276,security,access,access,19276,ingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak sym,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19849,security,access,access,19849,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:607,testability,unit,units,607,Not fixed here:. ```. [ 69%] Linking CXX executable src/rootcling_stage1. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1178,testability,unit,units,1178,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1749,testability,unit,units,1749,averseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2320,testability,unit,units,2320,averseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2910,testability,unit,units,2910,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3481,testability,unit,units,3481,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::N,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4071,testability,unit,units,4071,ateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoFixer>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4671,testability,unit,units,4671,mplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoSynthesizer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5252,testability,unit,units,5252,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5833,testability,unit,units,5833,ateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6414,testability,unit,units,6414,ateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7014,testability,unit,units,7014,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:7595,testability,unit,units,7595,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8195,testability,unit,units,8195,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:8795,testability,unit,units,8795,plateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(AutoloadCallback.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9376,testability,unit,units,9376,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictge,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9957,testability,unit,units,9957,eTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:10538,testability,unit,units,10538,eTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11138,testability,unit,units,11138,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:11719,testability,unit,units,11719,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' fro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12319,testability,unit,units,12319,lang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::DumpLookupTables>::TraverseTemplateTemplateParmDecl(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:12898,testability,unit,units,12898,(clang::TemplateTemplateParmDecl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(ClangInternalState.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelection,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13458,testability,unit,units,13458,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelection,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14018,testability,unit,units,14018,<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:14578,testability,unit,units,14578,<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15157,testability,unit,units,15157,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.di,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:15717,testability,unit,units,15717,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file ',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16296,testability,unit,units,16296,namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16888,testability,unit,units,16888,:TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(DeclUnloader.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:17461,testability,unit,units,17461,::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18034,testability,unit,units,18034,interCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:18607,testability,unit,units,18607,interCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19199,testability,unit,units,19199,::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:19772,testability,unit,units,19772,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20364,testability,unit,units,20364,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20516,usability,Command,CommandLine,20516,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20528,usability,Error,Error,20528,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20578,usability,ERROR,ERROR,20578,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:20613,usability,Command,CommandLine,20613,"tings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. ld: warning: direct access in function 'clang::RecursiveASTVisitor<(anonymous namespace)::PointerCheckInjector>::TraverseDecl(clang::Decl*)' from file '../../interpreter/llvm/src/lib/libclingInterpreter.a(NullDerefProtectionTransformer.cpp.o)' to global weak symbol 'guard variable for clang::TemplateTemplateParmDecl::getDefaultArgument() const::NoneLoc' from file '../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings. [ 69%] Built target rootcling_stage1. [ 69%] Generating G__Core.cxx, ../lib/libCore.rootmap. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:16,deployability,build,building,16,@veprbl you are building the latest `master`? Could you share your system setup and configuration options?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:84,deployability,configurat,configuration,84,@veprbl you are building the latest `master`? Could you share your system setup and configuration options?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:84,integrability,configur,configuration,84,@veprbl you are building the latest `master`? Could you share your system setup and configuration options?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:56,interoperability,share,share,56,@veprbl you are building the latest `master`? Could you share your system setup and configuration options?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:84,modifiability,configur,configuration,84,@veprbl you are building the latest `master`? Could you share your system setup and configuration options?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:84,security,configur,configuration,84,@veprbl you are building the latest `master`? Could you share your system setup and configuration options?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:237,availability,Failur,Failures,237,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:513,availability,error,errors,513,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3978,availability,error,error,3978,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:51,deployability,patch,patches,51,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:142,deployability,build,build,142,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:237,deployability,Fail,Failures,237,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:378,deployability,log,logs,378,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:700,deployability,patch,patches-,700,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1265,deployability,patch,patches-,1265,"or macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6v",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3518,deployability,patch,patches-,3518,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1539,energy efficiency,alloc,allocator,1539,"X executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1563,energy efficiency,alloc,allocator,1563,"ng_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binut",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1635,energy efficiency,alloc,allocator,1635,"/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:237,performance,Failur,Failures,237,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:513,performance,error,errors,513,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3978,performance,error,error,3978,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:237,reliability,Fail,Failures,237,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:845,reliability,Diagno,DiagnosticsEngine,845,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1108,reliability,Diagno,DiagnosticsEngine,1108,"oducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1666,reliability,Diagno,DiagnosticsEngine,1666,"8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2044,reliability,Diagno,DiagnosticsEngine,2044,"::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2483,reliability,Diagno,DiagnosticsEngine,2483,"asic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvq",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2922,reliability,Diagno,DiagnosticsEngine,2922,"ndefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::Diagno",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3361,reliability,Diagno,DiagnosticsEngine,3361,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3925,reliability,Diagno,DiagnosticsEngine,3925,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:51,safety,patch,patches,51,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:378,safety,log,logs,378,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:513,safety,error,errors,513,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:700,safety,patch,patches-,700,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:827,safety,Input,InputKind,827,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1265,safety,patch,patches-,1265,"or macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6v",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1433,safety,Input,InputKind,1433,"f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3518,safety,patch,patches-,3518,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3978,safety,error,error,3978,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:51,security,patch,patches,51,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:378,security,log,logs,378,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:700,security,patch,patches-,700,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1265,security,patch,patches-,1265,"or macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6v",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3518,security,patch,patches-,3518,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:378,testability,log,logs,378,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:845,testability,Diagno,DiagnosticsEngine,845,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1108,testability,Diagno,DiagnosticsEngine,1108,"oducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1666,testability,Diagno,DiagnosticsEngine,1666,"8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2044,testability,Diagno,DiagnosticsEngine,2044,"::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2483,testability,Diagno,DiagnosticsEngine,2483,"asic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvq",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2922,testability,Diagno,DiagnosticsEngine,2922,"ndefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::Diagno",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3361,testability,Diagno,DiagnosticsEngine,3361,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3925,testability,Diagno,DiagnosticsEngine,3925,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:513,usability,error,errors,513,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:827,usability,Input,InputKind,827,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:. ```. nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root. ```. Failures can be found on CI. * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613. * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1433,usability,Input,InputKind,1433,"f-5f43-4913-977c-a8086a7838a5. Latter comes with a different set of linker errors:. ```. [ 70%] Linking CXX executable src/rootcling_stage1. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':. (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':. (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3978,usability,error,error,3978,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:4004,usability,statu,status,4004,"t::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x4118): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x5086): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50a6): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'. /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o):(.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x50c6): more undefined references to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)' follow. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:76,integrability,configur,configure,76,"I see you are also using `-Dbuiltin_clang=OFF`, I suspect you would need to configure it to not link against the shared library. That said, I also commented on the PR that it will be hard to find the corresponding sources, so for the time being I think you are better of staying with `builtin_clang=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:113,interoperability,share,shared,113,"I see you are also using `-Dbuiltin_clang=OFF`, I suspect you would need to configure it to not link against the shared library. That said, I also commented on the PR that it will be hard to find the corresponding sources, so for the time being I think you are better of staying with `builtin_clang=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:76,modifiability,configur,configure,76,"I see you are also using `-Dbuiltin_clang=OFF`, I suspect you would need to configure it to not link against the shared library. That said, I also commented on the PR that it will be hard to find the corresponding sources, so for the time being I think you are better of staying with `builtin_clang=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:234,performance,time,time,234,"I see you are also using `-Dbuiltin_clang=OFF`, I suspect you would need to configure it to not link against the shared library. That said, I also commented on the PR that it will be hard to find the corresponding sources, so for the time being I think you are better of staying with `builtin_clang=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:76,security,configur,configure,76,"I see you are also using `-Dbuiltin_clang=OFF`, I suspect you would need to configure it to not link against the shared library. That said, I also commented on the PR that it will be hard to find the corresponding sources, so for the time being I think you are better of staying with `builtin_clang=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:48,availability,error,errors,48,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:156,availability,Error,Error,156,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:206,availability,ERROR,ERROR,206,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:358,availability,Error,Error,358,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:442,availability,Error,Error,442,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:324,deployability,build,build,324,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:132,energy efficiency,Core,Core,132,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:296,energy efficiency,core,core,296,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:340,energy efficiency,core,core,340,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:409,energy efficiency,core,core,409,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:262,integrability,Sub,Subprocess,262,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:48,performance,error,errors,48,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:156,performance,Error,Error,156,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:206,performance,ERROR,ERROR,206,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:358,performance,Error,Error,358,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:442,performance,Error,Error,442,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:48,safety,error,errors,48,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:156,safety,Error,Error,156,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:206,safety,ERROR,ERROR,206,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:358,safety,Error,Error,358,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:442,safety,Error,Error,442,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:27,usability,help,help,27,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:48,usability,error,errors,48,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:144,usability,Command,CommandLine,144,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:156,usability,Error,Error,156,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:206,usability,ERROR,ERROR,206,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:241,usability,Command,CommandLine,241,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:358,usability,Error,Error,358,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:442,usability,Error,Error,442,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar. ```. [ 72%] Generating G__Core.cxx, ../lib/Core.pcm. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. Subprocess aborted. make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1. make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs.... [ 72%] Built target Cling. ```. on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:69,deployability,build,build,69,Interesting. Can you do `ldd path/to/rootcling_stage1`? And show the build output for the `rootcling_stage1` target?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,deployability,log,logs,13,"from https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=2a74088f-4e86-4706-b32c-0320f5039d99:. ```. ldd: ./core/rootcling_stage1: $not regular file. linux-vdso.so.1 (0x00007ffff7fc8000). libdl.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libdl.so.2 (0x00007ffff7fbd000). libLLVM-13.so => /nix/store/rrgipk915pxcfjrs4galkkil277m6i3r-llvm-13.0.1-lib/lib/libLLVM-13.so (0x00007ffff15dc000). libstdc++.so.6 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libstdc++.so.6 (0x00007ffff13b4000). libm.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libm.so.6 (0x00007ffff12d4000). libgcc_s.so.1 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libgcc_s.so.1 (0x00007ffff12b3000). libpthread.so.0 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libpthread.so.0 (0x00007ffff12ac000). libc.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libc.so.6 (0x00007ffff10c6000). /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/ld-linux-x86-64.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fca000). libffi.so.8 => /nix/store/bg6dzgvw2wpg61v8a7f0x6fkm31k26hh-libffi-3.4.4/lib/libffi.so.8 (0x00007ffff10b9000). librt.so.1 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/librt.so.1 (0x00007ffff10b4000). libz.so.1 => /nix/store/p9a2nhhpa2dwyw1sy5gr4482ddqmwpkx-zlib-1.2.13/lib/libz.so.1 (0x00007ffff1094000). libncursesw.so.6 => /nix/store/1ql93amj3rmq5yg7qry7ky6gwpbvdgxp-ncurses-6.4/lib/libncursesw.so.6 (0x00007ffff1020000). libxml2.so.2 => /nix/store/s9fs1xciw3m79d9qhg0zdglb4qji5i8l-libxml2-2.11.4/lib/libxml2.so.2 (0x00007ffff0ebf000). ```. As far as I understand, we don't want to see `libLLVM-13.so` in there, right? Because that means we have both the static libraries and the shared dylib register options?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:117,energy efficiency,core,core,117,"from https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=2a74088f-4e86-4706-b32c-0320f5039d99:. ```. ldd: ./core/rootcling_stage1: $not regular file. linux-vdso.so.1 (0x00007ffff7fc8000). libdl.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libdl.so.2 (0x00007ffff7fbd000). libLLVM-13.so => /nix/store/rrgipk915pxcfjrs4galkkil277m6i3r-llvm-13.0.1-lib/lib/libLLVM-13.so (0x00007ffff15dc000). libstdc++.so.6 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libstdc++.so.6 (0x00007ffff13b4000). libm.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libm.so.6 (0x00007ffff12d4000). libgcc_s.so.1 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libgcc_s.so.1 (0x00007ffff12b3000). libpthread.so.0 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libpthread.so.0 (0x00007ffff12ac000). libc.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libc.so.6 (0x00007ffff10c6000). /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/ld-linux-x86-64.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fca000). libffi.so.8 => /nix/store/bg6dzgvw2wpg61v8a7f0x6fkm31k26hh-libffi-3.4.4/lib/libffi.so.8 (0x00007ffff10b9000). librt.so.1 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/librt.so.1 (0x00007ffff10b4000). libz.so.1 => /nix/store/p9a2nhhpa2dwyw1sy5gr4482ddqmwpkx-zlib-1.2.13/lib/libz.so.1 (0x00007ffff1094000). libncursesw.so.6 => /nix/store/1ql93amj3rmq5yg7qry7ky6gwpbvdgxp-ncurses-6.4/lib/libncursesw.so.6 (0x00007ffff1020000). libxml2.so.2 => /nix/store/s9fs1xciw3m79d9qhg0zdglb4qji5i8l-libxml2-2.11.4/lib/libxml2.so.2 (0x00007ffff0ebf000). ```. As far as I understand, we don't want to see `libLLVM-13.so` in there, right? Because that means we have both the static libraries and the shared dylib register options?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1877,interoperability,share,shared,1877,"from https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=2a74088f-4e86-4706-b32c-0320f5039d99:. ```. ldd: ./core/rootcling_stage1: $not regular file. linux-vdso.so.1 (0x00007ffff7fc8000). libdl.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libdl.so.2 (0x00007ffff7fbd000). libLLVM-13.so => /nix/store/rrgipk915pxcfjrs4galkkil277m6i3r-llvm-13.0.1-lib/lib/libLLVM-13.so (0x00007ffff15dc000). libstdc++.so.6 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libstdc++.so.6 (0x00007ffff13b4000). libm.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libm.so.6 (0x00007ffff12d4000). libgcc_s.so.1 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libgcc_s.so.1 (0x00007ffff12b3000). libpthread.so.0 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libpthread.so.0 (0x00007ffff12ac000). libc.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libc.so.6 (0x00007ffff10c6000). /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/ld-linux-x86-64.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fca000). libffi.so.8 => /nix/store/bg6dzgvw2wpg61v8a7f0x6fkm31k26hh-libffi-3.4.4/lib/libffi.so.8 (0x00007ffff10b9000). librt.so.1 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/librt.so.1 (0x00007ffff10b4000). libz.so.1 => /nix/store/p9a2nhhpa2dwyw1sy5gr4482ddqmwpkx-zlib-1.2.13/lib/libz.so.1 (0x00007ffff1094000). libncursesw.so.6 => /nix/store/1ql93amj3rmq5yg7qry7ky6gwpbvdgxp-ncurses-6.4/lib/libncursesw.so.6 (0x00007ffff1020000). libxml2.so.2 => /nix/store/s9fs1xciw3m79d9qhg0zdglb4qji5i8l-libxml2-2.11.4/lib/libxml2.so.2 (0x00007ffff0ebf000). ```. As far as I understand, we don't want to see `libLLVM-13.so` in there, right? Because that means we have both the static libraries and the shared dylib register options?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,safety,log,logs,13,"from https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=2a74088f-4e86-4706-b32c-0320f5039d99:. ```. ldd: ./core/rootcling_stage1: $not regular file. linux-vdso.so.1 (0x00007ffff7fc8000). libdl.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libdl.so.2 (0x00007ffff7fbd000). libLLVM-13.so => /nix/store/rrgipk915pxcfjrs4galkkil277m6i3r-llvm-13.0.1-lib/lib/libLLVM-13.so (0x00007ffff15dc000). libstdc++.so.6 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libstdc++.so.6 (0x00007ffff13b4000). libm.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libm.so.6 (0x00007ffff12d4000). libgcc_s.so.1 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libgcc_s.so.1 (0x00007ffff12b3000). libpthread.so.0 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libpthread.so.0 (0x00007ffff12ac000). libc.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libc.so.6 (0x00007ffff10c6000). /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/ld-linux-x86-64.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fca000). libffi.so.8 => /nix/store/bg6dzgvw2wpg61v8a7f0x6fkm31k26hh-libffi-3.4.4/lib/libffi.so.8 (0x00007ffff10b9000). librt.so.1 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/librt.so.1 (0x00007ffff10b4000). libz.so.1 => /nix/store/p9a2nhhpa2dwyw1sy5gr4482ddqmwpkx-zlib-1.2.13/lib/libz.so.1 (0x00007ffff1094000). libncursesw.so.6 => /nix/store/1ql93amj3rmq5yg7qry7ky6gwpbvdgxp-ncurses-6.4/lib/libncursesw.so.6 (0x00007ffff1020000). libxml2.so.2 => /nix/store/s9fs1xciw3m79d9qhg0zdglb4qji5i8l-libxml2-2.11.4/lib/libxml2.so.2 (0x00007ffff0ebf000). ```. As far as I understand, we don't want to see `libLLVM-13.so` in there, right? Because that means we have both the static libraries and the shared dylib register options?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,security,log,logs,13,"from https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=2a74088f-4e86-4706-b32c-0320f5039d99:. ```. ldd: ./core/rootcling_stage1: $not regular file. linux-vdso.so.1 (0x00007ffff7fc8000). libdl.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libdl.so.2 (0x00007ffff7fbd000). libLLVM-13.so => /nix/store/rrgipk915pxcfjrs4galkkil277m6i3r-llvm-13.0.1-lib/lib/libLLVM-13.so (0x00007ffff15dc000). libstdc++.so.6 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libstdc++.so.6 (0x00007ffff13b4000). libm.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libm.so.6 (0x00007ffff12d4000). libgcc_s.so.1 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libgcc_s.so.1 (0x00007ffff12b3000). libpthread.so.0 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libpthread.so.0 (0x00007ffff12ac000). libc.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libc.so.6 (0x00007ffff10c6000). /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/ld-linux-x86-64.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fca000). libffi.so.8 => /nix/store/bg6dzgvw2wpg61v8a7f0x6fkm31k26hh-libffi-3.4.4/lib/libffi.so.8 (0x00007ffff10b9000). librt.so.1 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/librt.so.1 (0x00007ffff10b4000). libz.so.1 => /nix/store/p9a2nhhpa2dwyw1sy5gr4482ddqmwpkx-zlib-1.2.13/lib/libz.so.1 (0x00007ffff1094000). libncursesw.so.6 => /nix/store/1ql93amj3rmq5yg7qry7ky6gwpbvdgxp-ncurses-6.4/lib/libncursesw.so.6 (0x00007ffff1020000). libxml2.so.2 => /nix/store/s9fs1xciw3m79d9qhg0zdglb4qji5i8l-libxml2-2.11.4/lib/libxml2.so.2 (0x00007ffff0ebf000). ```. As far as I understand, we don't want to see `libLLVM-13.so` in there, right? Because that means we have both the static libraries and the shared dylib register options?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:13,testability,log,logs,13,"from https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=2a74088f-4e86-4706-b32c-0320f5039d99:. ```. ldd: ./core/rootcling_stage1: $not regular file. linux-vdso.so.1 (0x00007ffff7fc8000). libdl.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libdl.so.2 (0x00007ffff7fbd000). libLLVM-13.so => /nix/store/rrgipk915pxcfjrs4galkkil277m6i3r-llvm-13.0.1-lib/lib/libLLVM-13.so (0x00007ffff15dc000). libstdc++.so.6 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libstdc++.so.6 (0x00007ffff13b4000). libm.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libm.so.6 (0x00007ffff12d4000). libgcc_s.so.1 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libgcc_s.so.1 (0x00007ffff12b3000). libpthread.so.0 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libpthread.so.0 (0x00007ffff12ac000). libc.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libc.so.6 (0x00007ffff10c6000). /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/ld-linux-x86-64.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fca000). libffi.so.8 => /nix/store/bg6dzgvw2wpg61v8a7f0x6fkm31k26hh-libffi-3.4.4/lib/libffi.so.8 (0x00007ffff10b9000). librt.so.1 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/librt.so.1 (0x00007ffff10b4000). libz.so.1 => /nix/store/p9a2nhhpa2dwyw1sy5gr4482ddqmwpkx-zlib-1.2.13/lib/libz.so.1 (0x00007ffff1094000). libncursesw.so.6 => /nix/store/1ql93amj3rmq5yg7qry7ky6gwpbvdgxp-ncurses-6.4/lib/libncursesw.so.6 (0x00007ffff1020000). libxml2.so.2 => /nix/store/s9fs1xciw3m79d9qhg0zdglb4qji5i8l-libxml2-2.11.4/lib/libxml2.so.2 (0x00007ffff0ebf000). ```. As far as I understand, we don't want to see `libLLVM-13.so` in there, right? Because that means we have both the static libraries and the shared dylib register options?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1750,testability,understand,understand,1750,"from https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=2a74088f-4e86-4706-b32c-0320f5039d99:. ```. ldd: ./core/rootcling_stage1: $not regular file. linux-vdso.so.1 (0x00007ffff7fc8000). libdl.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libdl.so.2 (0x00007ffff7fbd000). libLLVM-13.so => /nix/store/rrgipk915pxcfjrs4galkkil277m6i3r-llvm-13.0.1-lib/lib/libLLVM-13.so (0x00007ffff15dc000). libstdc++.so.6 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libstdc++.so.6 (0x00007ffff13b4000). libm.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libm.so.6 (0x00007ffff12d4000). libgcc_s.so.1 => /nix/store/4igdc32rmnijcra8y3r1h42987ghzag2-gcc-12.3.0-lib/lib/libgcc_s.so.1 (0x00007ffff12b3000). libpthread.so.0 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libpthread.so.0 (0x00007ffff12ac000). libc.so.6 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/libc.so.6 (0x00007ffff10c6000). /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/ld-linux-x86-64.so.2 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fca000). libffi.so.8 => /nix/store/bg6dzgvw2wpg61v8a7f0x6fkm31k26hh-libffi-3.4.4/lib/libffi.so.8 (0x00007ffff10b9000). librt.so.1 => /nix/store/ibp4camsx1mlllwzh32yyqcq2r2xsy1a-glibc-2.37-8/lib/librt.so.1 (0x00007ffff10b4000). libz.so.1 => /nix/store/p9a2nhhpa2dwyw1sy5gr4482ddqmwpkx-zlib-1.2.13/lib/libz.so.1 (0x00007ffff1094000). libncursesw.so.6 => /nix/store/1ql93amj3rmq5yg7qry7ky6gwpbvdgxp-ncurses-6.4/lib/libncursesw.so.6 (0x00007ffff1020000). libxml2.so.2 => /nix/store/s9fs1xciw3m79d9qhg0zdglb4qji5i8l-libxml2-2.11.4/lib/libxml2.so.2 (0x00007ffff0ebf000). ```. As far as I understand, we don't want to see `libLLVM-13.so` in there, right? Because that means we have both the static libraries and the shared dylib register options?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:65,deployability,build,build,65,It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:94,deployability,build,build,94,It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:143,security,trust,trust,143,It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:67,deployability,build,build,67,"> It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution. That's why https://github.com/root-project/root/pull/13420 in commit https://github.com/root-project/root/commit/96ad64a9089ec6bb893a2ee59c0e057220572d7e added an explicit `LLVM_LINK_LLVM_DYLIB=OFF` / `DISABLE_LLVM_LINK_LLVM_DYLIB`, so that it's not necessary to modify the LLVM build but all is handled from the ROOT side. And fair enough, it seems you only pick up the second commit from the PR. Sorry for not checking earlier, I thought you got the backporting right... Please also apply that commit and I'm 90% confident that it will solve your problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:96,deployability,build,build,96,"> It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution. That's why https://github.com/root-project/root/pull/13420 in commit https://github.com/root-project/root/commit/96ad64a9089ec6bb893a2ee59c0e057220572d7e added an explicit `LLVM_LINK_LLVM_DYLIB=OFF` / `DISABLE_LLVM_LINK_LLVM_DYLIB`, so that it's not necessary to modify the LLVM build but all is handled from the ROOT side. And fair enough, it seems you only pick up the second commit from the PR. Sorry for not checking earlier, I thought you got the backporting right... Please also apply that commit and I'm 90% confident that it will solve your problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:447,deployability,build,build,447,"> It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution. That's why https://github.com/root-project/root/pull/13420 in commit https://github.com/root-project/root/commit/96ad64a9089ec6bb893a2ee59c0e057220572d7e added an explicit `LLVM_LINK_LLVM_DYLIB=OFF` / `DISABLE_LLVM_LINK_LLVM_DYLIB`, so that it's not necessary to modify the LLVM build but all is handled from the ROOT side. And fair enough, it seems you only pick up the second commit from the PR. Sorry for not checking earlier, I thought you got the backporting right... Please also apply that commit and I'm 90% confident that it will solve your problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:145,security,trust,trust,145,"> It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution. That's why https://github.com/root-project/root/pull/13420 in commit https://github.com/root-project/root/commit/96ad64a9089ec6bb893a2ee59c0e057220572d7e added an explicit `LLVM_LINK_LLVM_DYLIB=OFF` / `DISABLE_LLVM_LINK_LLVM_DYLIB`, so that it's not necessary to modify the LLVM build but all is handled from the ROOT side. And fair enough, it seems you only pick up the second commit from the PR. Sorry for not checking earlier, I thought you got the backporting right... Please also apply that commit and I'm 90% confident that it will solve your problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:431,security,modif,modify,431,"> It would seem like dropping `-DLLVM_LINK_LLVM_DYLIB=ON` from the build of LLVM makes the ROOT build successfully. I'm not sure how much we can trust such a solution. That's why https://github.com/root-project/root/pull/13420 in commit https://github.com/root-project/root/commit/96ad64a9089ec6bb893a2ee59c0e057220572d7e added an explicit `LLVM_LINK_LLVM_DYLIB=OFF` / `DISABLE_LLVM_LINK_LLVM_DYLIB`, so that it's not necessary to modify the LLVM build but all is handled from the ROOT side. And fair enough, it seems you only pick up the second commit from the PR. Sorry for not checking earlier, I thought you got the backporting right... Please also apply that commit and I'm 90% confident that it will solve your problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12158:99,deployability,releas,release,99,"Hi @Fesfandi ,. I am not completely sure what you mean by ""ROOT VM"" and I don't think there is any release package shipped via cernbox. To install ROOT, please follow the installation instructions at https://root.cern/install",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:139,deployability,instal,install,139,"Hi @Fesfandi ,. I am not completely sure what you mean by ""ROOT VM"" and I don't think there is any release package shipped via cernbox. To install ROOT, please follow the installation instructions at https://root.cern/install",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:171,deployability,instal,installation,171,"Hi @Fesfandi ,. I am not completely sure what you mean by ""ROOT VM"" and I don't think there is any release package shipped via cernbox. To install ROOT, please follow the installation instructions at https://root.cern/install",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:218,deployability,instal,install,218,"Hi @Fesfandi ,. I am not completely sure what you mean by ""ROOT VM"" and I don't think there is any release package shipped via cernbox. To install ROOT, please follow the installation instructions at https://root.cern/install",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:107,modifiability,pac,package,107,"Hi @Fesfandi ,. I am not completely sure what you mean by ""ROOT VM"" and I don't think there is any release package shipped via cernbox. To install ROOT, please follow the installation instructions at https://root.cern/install",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:25,safety,compl,completely,25,"Hi @Fesfandi ,. I am not completely sure what you mean by ""ROOT VM"" and I don't think there is any release package shipped via cernbox. To install ROOT, please follow the installation instructions at https://root.cern/install",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:25,security,compl,completely,25,"Hi @Fesfandi ,. I am not completely sure what you mean by ""ROOT VM"" and I don't think there is any release package shipped via cernbox. To install ROOT, please follow the installation instructions at https://root.cern/install",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:410,deployability,releas,release,410,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:450,deployability,instal,install,450,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:485,deployability,instal,installation,485,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:532,deployability,instal,install,532,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:860,integrability,Messag,Message,860,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:860,interoperability,Messag,Message,860,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:418,modifiability,pac,package,418,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:333,safety,compl,completely,333,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:333,security,compl,completely,333,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:746,security,auth,auth,746,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It. is suggested in. https://github.com/root-project/training/tree/master/BasicCourse. Best,. Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <. ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,. >. > I am not completely sure what you mean by ""ROOT VM"" and I don't think. > there is any release package shipped via cernbox. To install ROOT, please. > follow the installation instructions at https://root.cern/install. >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>. > . > You are receiving this because you were mentioned.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:324,deployability,instal,install,324,"This is just my guess, but by reading the README at the link you mention it looks like that VM was made for the purpose of that particular training (5 years ago) and not with a wider scope in mind. You can surely create your own VM with the Linux flavor of your choice (probably a Fedora image would be easier to use), then install ROOT normally when you launch that VM. Otherwise, you can take a look at ROOT Docker containers for a possibly even easier experience at https://hub.docker.com/r/rootproject/root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:417,deployability,contain,containers,417,"This is just my guess, but by reading the README at the link you mention it looks like that VM was made for the purpose of that particular training (5 years ago) and not with a wider scope in mind. You can surely create your own VM with the Linux flavor of your choice (probably a Fedora image would be easier to use), then install ROOT normally when you launch that VM. Otherwise, you can take a look at ROOT Docker containers for a possibly even easier experience at https://hub.docker.com/r/rootproject/root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:455,usability,experien,experience,455,"This is just my guess, but by reading the README at the link you mention it looks like that VM was made for the purpose of that particular training (5 years ago) and not with a wider scope in mind. You can surely create your own VM with the Linux flavor of your choice (probably a Fedora image would be easier to use), then install ROOT normally when you launch that VM. Otherwise, you can take a look at ROOT Docker containers for a possibly even easier experience at https://hub.docker.com/r/rootproject/root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:123,availability,error,errors,123,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:32,deployability,updat,updates,32,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:135,deployability,instal,installing,135,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:85,integrability,coupl,couple,85,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:85,modifiability,coupl,couple,85,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:123,performance,error,errors,123,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:32,safety,updat,updates,32,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:123,safety,error,errors,123,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:32,security,updat,updates,32,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:85,testability,coupl,couple,85,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:64,usability,close,close,64,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:123,usability,error,errors,123,"Hi @Fesfandi ,. Do you have any updates on this? If not, I will close the issue in a couple of days. If you find different errors when installing ROOT through one of the official ways, please open another issue or ask about it on the [forum](root-forum.cern.ch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:144,deployability,instal,installations,144,Closing the issue given the explanation given by @vepadulano . Feel free to look for help on the forum in case issues are encountered with ROOT installations!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:85,usability,help,help,85,Closing the issue given the explanation given by @vepadulano . Feel free to look for help on the forum in case issues are encountered with ROOT installations!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/pull/12159:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12159
https://github.com/root-project/root/issues/12162:73,safety,test,test,73,"I gave this the ""not applicable"" tag, because it was only a problem in a test and not in the actual ROOT code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:73,testability,test,test,73,"I gave this the ""not applicable"" tag, because it was only a problem in a test and not in the actual ROOT code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/pull/12163:0,availability,Failur,Failures,0,Failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:0,deployability,Fail,Failures,0,Failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:0,performance,Failur,Failures,0,Failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:0,reliability,Fail,Failures,0,Failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/issues/12164:280,deployability,modul,modules,280,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:269,integrability,sub,subsequent,269,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:280,modifiability,modul,modules,280,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:383,modifiability,variab,variable,383,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:280,safety,modul,modules,280,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:345,testability,simpl,simple,345,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:345,usability,simpl,simple,345,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:16,testability,simpl,simple,16,"This is another simple reproducible example: . ```. #include <iostream>. #include <vector>. void Dummy(const std::vector<size_t> & targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. struct Test1 {. Test1() {. Dummy({ 1 , 2 , 3, 4 });. }. };. struct Test2 {. Test2() {. Dummy({ 5 , 6 , 7});. }. };.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:16,usability,simpl,simple,16,"This is another simple reproducible example: . ```. #include <iostream>. #include <vector>. void Dummy(const std::vector<size_t> & targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. struct Test1 {. Test1() {. Dummy({ 1 , 2 , 3, 4 });. }. };. struct Test2 {. Test2() {. Dummy({ 5 , 6 , 7});. }. };.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:42,safety,test,testDummy,42,And the result of doing. ```. root [1] .L testDummy.hxx. root [2] Test1 t1;. target shape 1 2 3 4 . root [3] Test2 t2;. target shape 1 2 3 . ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:42,testability,test,testDummy,42,And the result of doing. ```. root [1] .L testDummy.hxx. root [2] Test1 t1;. target shape 1 2 3 4 . root [3] Test2 t2;. target shape 1 2 3 . ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/pull/12166:0,availability,Failur,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:0,deployability,Fail,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:0,performance,Failur,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:0,reliability,Fail,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12167:0,availability,Failur,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12167:0,deployability,Fail,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12167:0,performance,Failur,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12167:0,reliability,Fail,Failure,0,Failure is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12168:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/cxx17, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12169:0,availability,Failur,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:0,deployability,Fail,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:0,performance,Failur,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:0,reliability,Fail,Failure,0,Failure is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12171:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/cxx17, ROOT-ubuntu2004/default, ROOT-ubuntu18.04/nortcxxmod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/cxx17, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/default, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:9,deployability,build,build,9,"Starting build on ROOT-ubuntu2204/default, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12172:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12172
https://github.com/root-project/root/pull/12173:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12173
https://github.com/root-project/root/pull/12173:79,deployability,build,build,79,Added rootest PR https://github.com/root-project/roottest/pull/935. @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12173
https://github.com/root-project/root/pull/12173:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12173
https://github.com/root-project/root/pull/12173:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12173
https://github.com/root-project/root/pull/12173:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12173
https://github.com/root-project/root/pull/12174:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:47,testability,verif,verify,47,"Looks good enough - let me merge it, I need to verify the benchmarks before backporting...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12175:0,availability,failur,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:0,deployability,fail,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:0,performance,failur,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:0,reliability,fail,failures,0,failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12176:0,availability,Failur,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12176
https://github.com/root-project/root/pull/12176:0,deployability,Fail,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12176
https://github.com/root-project/root/pull/12176:0,performance,Failur,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12176
https://github.com/root-project/root/pull/12176:0,reliability,Fail,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12176
https://github.com/root-project/root/pull/12178:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:50,testability,context,context,50,"Apologies, I copied the function from another gen context and did not notice that `RooEffGenContext` was already in the 3 spaces convention. Should I fix this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:516,integrability,messag,message,516,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:166,interoperability,format,format,166,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:247,interoperability,format,format,247,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:379,interoperability,format,format,379,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:461,interoperability,format,format,461,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:516,interoperability,messag,message,516,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:804,interoperability,format,format,804,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:297,reliability,doe,doesn,297,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:819,reliability,Doe,Does,819,"Hi, thanks for the PR first of all! Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:. https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:159,interoperability,format,format,159,"Hello, I can do that. Just to be clear, that applies only to RooEffGenContex.h and cxx, right? Not RooRealIntegral.cxx, which would change a lot with the ROOT format",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:33,usability,clear,clear,33,"Hello, I can do that. Just to be clear, that applies only to RooEffGenContex.h and cxx, right? Not RooRealIntegral.cxx, which would change a lot with the ROOT format",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:35,interoperability,format,format,35,"Yes, exactly. I'd prefer not to re-format the older more complicated sources, because that makes it harder to understand where things are coming from via `git blame`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:57,safety,compl,complicated,57,"Yes, exactly. I'd prefer not to re-format the older more complicated sources, because that makes it harder to understand where things are coming from via `git blame`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:57,security,compl,complicated,57,"Yes, exactly. I'd prefer not to re-format the older more complicated sources, because that makes it harder to understand where things are coming from via `git blame`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:110,testability,understand,understand,110,"Yes, exactly. I'd prefer not to re-format the older more complicated sources, because that makes it harder to understand where things are coming from via `git blame`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:18,usability,prefer,prefer,18,"Yes, exactly. I'd prefer not to re-format the older more complicated sources, because that makes it harder to understand where things are coming from via `git blame`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12179:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12179
https://github.com/root-project/root/pull/12180:59,deployability,updat,updated,59,"Sorry, I made a typo in the tutorials myself now... I have updated the PR one more time, it should work now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12180
https://github.com/root-project/root/pull/12180:83,performance,time,time,83,"Sorry, I made a typo in the tutorials myself now... I have updated the PR one more time, it should work now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12180
https://github.com/root-project/root/pull/12180:59,safety,updat,updated,59,"Sorry, I made a typo in the tutorials myself now... I have updated the PR one more time, it should work now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12180
https://github.com/root-project/root/pull/12180:59,security,updat,updated,59,"Sorry, I made a typo in the tutorials myself now... I have updated the PR one more time, it should work now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12180
https://github.com/root-project/root/issues/12182:47,availability,error,error,47,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:82,availability,error,error,82,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:117,availability,error,error,117,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:170,availability,error,error,170,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:47,performance,error,error,47,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:82,performance,error,error,82,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:117,performance,error,error,117,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:170,performance,error,error,170,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:47,safety,error,error,47,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:82,safety,error,error,82,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:117,safety,error,error,117,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:170,safety,error,error,170,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:47,usability,error,error,47,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:82,usability,error,error,82,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:117,usability,error,error,117,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:170,usability,error,error,170,A few data points:. - ROOT 6.26.8 + python3.9: error. - ROOT 6.26.10 + python3.9: error. - ROOT 6.26.8 + python3.10: error. - macOS homebrew ROOT 6.26.6 + python3.10: no error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:938,availability,error,error,938,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1844,availability,error,error,1844,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:380,deployability,version,version,380,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1286,deployability,version,version,1286,"/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2229,deployability,releas,releases,2229,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2333,deployability,releas,releases,2333,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:380,integrability,version,version,380,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1286,integrability,version,version,1286,"/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:223,interoperability,platform,platform,223,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:991,interoperability,specif,specifiers,991,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1897,interoperability,specif,specifiers,1897,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:380,modifiability,version,version,380,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1286,modifiability,version,version,1286,"/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:938,performance,error,error,938,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1844,performance,error,error,1844,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2145,reliability,doe,does,2145,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:938,safety,error,error,938,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1844,safety,error,error,1844,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:575,security,Team,Team,575,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1481,security,Team,Team,1481,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:107,usability,command,command,107,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:741,usability,help,help,741,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:938,usability,error,error,938,":confused: I'm getting very confused by this. No setup that I've tried just now would allow the reproducer command to succeed. ```. [bash][lxplus773]:~ > asetup AnalysisBase,22.2.80. Using AnalysisBase/22.2.80 [cmake] with platform x86_64-centos7-gcc11-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/22.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1647,usability,help,help,1647,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1844,usability,error,error,1844,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2062,usability,command,command,2062,"bash][lxplus773]:~ > python --version. Python 3.9.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 02 2021, 14:20:23 |. | From tags/v6-24-06@v6-24-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. ```. [bash][lxplus773]:~ > source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.sh . [bash][lxplus773]:~ > python --version. Python 3.8.6. [bash][lxplus773]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.24/00 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |. | From tags/v6-24-00@v6-24-00 |. | With g++ (GCC) 10.1.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). input_line_27:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. ```. Is that command really supposed to work? :confused: What exact setup (let's say on lxplus) does it even work with? :thinking: The claim is that things only broke in the ATLAS releases relatively recently. But this reproducer expression seems to kill our older (seemingly ""good"") releases as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:23,safety,compl,completely,23,Hi @krasznaa It worked completely with python2 (so rel21 of AB) and locally it worked for me with python3.6 (I think first rel22 had already python3.7),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:23,security,compl,completely,23,Hi @krasznaa It worked completely with python2 (so rel21 of AB) and locally it worked for me with python3.6 (I think first rel22 had already python3.7),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:54,deployability,releas,releases,54,"Ahh, I see. I didn't appreciate that none of the 22.2 releases worked. ```. [bash][lxplus762]:~ > asetup AnalysisBase,21.2.242. Using AnalysisBase/21.2.242 [cmake] with platform x86_64-centos7-gcc8-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/21.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus762]:~ > python --version. Python 2.7.16. [bash][lxplus762]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.20/06 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jun 10 2020, 06:10:57 |. | From tags/v6-20-06@v6-20-06 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". root [1]. ```. Yeah, unfortunately this makes things all the more difficult. I was still holding out hope that this could be made to work with a relatively small fix on the ROOT side... Let's see on our own ATLAS internal ticket then what we could do to work around this in the short term.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:325,deployability,version,version,325,"Ahh, I see. I didn't appreciate that none of the 22.2 releases worked. ```. [bash][lxplus762]:~ > asetup AnalysisBase,21.2.242. Using AnalysisBase/21.2.242 [cmake] with platform x86_64-centos7-gcc8-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/21.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus762]:~ > python --version. Python 2.7.16. [bash][lxplus762]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.20/06 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jun 10 2020, 06:10:57 |. | From tags/v6-20-06@v6-20-06 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". root [1]. ```. Yeah, unfortunately this makes things all the more difficult. I was still holding out hope that this could be made to work with a relatively small fix on the ROOT side... Let's see on our own ATLAS internal ticket then what we could do to work around this in the short term.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:325,integrability,version,version,325,"Ahh, I see. I didn't appreciate that none of the 22.2 releases worked. ```. [bash][lxplus762]:~ > asetup AnalysisBase,21.2.242. Using AnalysisBase/21.2.242 [cmake] with platform x86_64-centos7-gcc8-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/21.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus762]:~ > python --version. Python 2.7.16. [bash][lxplus762]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.20/06 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jun 10 2020, 06:10:57 |. | From tags/v6-20-06@v6-20-06 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". root [1]. ```. Yeah, unfortunately this makes things all the more difficult. I was still holding out hope that this could be made to work with a relatively small fix on the ROOT side... Let's see on our own ATLAS internal ticket then what we could do to work around this in the short term.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:169,interoperability,platform,platform,169,"Ahh, I see. I didn't appreciate that none of the 22.2 releases worked. ```. [bash][lxplus762]:~ > asetup AnalysisBase,21.2.242. Using AnalysisBase/21.2.242 [cmake] with platform x86_64-centos7-gcc8-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/21.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus762]:~ > python --version. Python 2.7.16. [bash][lxplus762]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.20/06 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jun 10 2020, 06:10:57 |. | From tags/v6-20-06@v6-20-06 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". root [1]. ```. Yeah, unfortunately this makes things all the more difficult. I was still holding out hope that this could be made to work with a relatively small fix on the ROOT side... Let's see on our own ATLAS internal ticket then what we could do to work around this in the short term.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:325,modifiability,version,version,325,"Ahh, I see. I didn't appreciate that none of the 22.2 releases worked. ```. [bash][lxplus762]:~ > asetup AnalysisBase,21.2.242. Using AnalysisBase/21.2.242 [cmake] with platform x86_64-centos7-gcc8-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/21.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus762]:~ > python --version. Python 2.7.16. [bash][lxplus762]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.20/06 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jun 10 2020, 06:10:57 |. | From tags/v6-20-06@v6-20-06 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". root [1]. ```. Yeah, unfortunately this makes things all the more difficult. I was still holding out hope that this could be made to work with a relatively small fix on the ROOT side... Let's see on our own ATLAS internal ticket then what we could do to work around this in the short term.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:521,security,Team,Team,521,"Ahh, I see. I didn't appreciate that none of the 22.2 releases worked. ```. [bash][lxplus762]:~ > asetup AnalysisBase,21.2.242. Using AnalysisBase/21.2.242 [cmake] with platform x86_64-centos7-gcc8-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/21.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus762]:~ > python --version. Python 2.7.16. [bash][lxplus762]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.20/06 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jun 10 2020, 06:10:57 |. | From tags/v6-20-06@v6-20-06 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". root [1]. ```. Yeah, unfortunately this makes things all the more difficult. I was still holding out hope that this could be made to work with a relatively small fix on the ROOT side... Let's see on our own ATLAS internal ticket then what we could do to work around this in the short term.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:660,usability,help,help,660,"Ahh, I see. I didn't appreciate that none of the 22.2 releases worked. ```. [bash][lxplus762]:~ > asetup AnalysisBase,21.2.242. Using AnalysisBase/21.2.242 [cmake] with platform x86_64-centos7-gcc8-opt. 	at /cvmfs/atlas.cern.ch/repo/sw/software/21.2. Unchanged: COOL_ORA_ENABLE_ADAPTIVE_OPT=Y. [bash][lxplus762]:~ > python --version. Python 2.7.16. [bash][lxplus762]:~ > root -b. ------------------------------------------------------------------. | Welcome to ROOT 6.20/06 https://root.cern |. | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jun 10 2020, 06:10:57 |. | From tags/v6-20-06@v6-20-06 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". root [1]. ```. Yeah, unfortunately this makes things all the more difficult. I was still holding out hope that this could be made to work with a relatively small fix on the ROOT side... Let's see on our own ATLAS internal ticket then what we could do to work around this in the short term.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:282,safety,test,tested,282,"> Seems that this is more on an ATLAS internal issue. @fnechans and @krasznaa, please reopen this issue or open a new one, should you see this problem again and you conclude that it can be fixed on the ROOT side! @guitargeek No this issue is independent of ATLAS (both me and Tadej tested this completely independent of ATLAS ecosystem. Can you please reopen the issue, I don't seem to have the permission.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:294,safety,compl,completely,294,"> Seems that this is more on an ATLAS internal issue. @fnechans and @krasznaa, please reopen this issue or open a new one, should you see this problem again and you conclude that it can be fixed on the ROOT side! @guitargeek No this issue is independent of ATLAS (both me and Tadej tested this completely independent of ATLAS ecosystem. Can you please reopen the issue, I don't seem to have the permission.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:395,safety,permiss,permission,395,"> Seems that this is more on an ATLAS internal issue. @fnechans and @krasznaa, please reopen this issue or open a new one, should you see this problem again and you conclude that it can be fixed on the ROOT side! @guitargeek No this issue is independent of ATLAS (both me and Tadej tested this completely independent of ATLAS ecosystem. Can you please reopen the issue, I don't seem to have the permission.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:294,security,compl,completely,294,"> Seems that this is more on an ATLAS internal issue. @fnechans and @krasznaa, please reopen this issue or open a new one, should you see this problem again and you conclude that it can be fixed on the ROOT side! @guitargeek No this issue is independent of ATLAS (both me and Tadej tested this completely independent of ATLAS ecosystem. Can you please reopen the issue, I don't seem to have the permission.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:282,testability,test,tested,282,"> Seems that this is more on an ATLAS internal issue. @fnechans and @krasznaa, please reopen this issue or open a new one, should you see this problem again and you conclude that it can be fixed on the ROOT side! @guitargeek No this issue is independent of ATLAS (both me and Tadej tested this completely independent of ATLAS ecosystem. Can you please reopen the issue, I don't seem to have the permission.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:137,usability,close,closed,137,"I didn't know that the creator of the issue can't re-open it! Maybe we can change these settings? If I would have known, I wouldn't have closed it so quickly. Sorry!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:159,modifiability,variab,variable,159,"I can't identify the problem either. But there is a simple workaround: you can just use `TPython::Exec()` and bring the string to the C++ world with an output variable. In the interest of a more stable ROOT, I would suggest to promote this way of doing things and to to deprecate `TPython::Eval()`:. * https://github.com/root-project/root/pull/16175. Would this be a good way forward also for ATLAS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:8,security,ident,identify,8,"I can't identify the problem either. But there is a simple workaround: you can just use `TPython::Exec()` and bring the string to the C++ world with an output variable. In the interest of a more stable ROOT, I would suggest to promote this way of doing things and to to deprecate `TPython::Eval()`:. * https://github.com/root-project/root/pull/16175. Would this be a good way forward also for ATLAS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:52,testability,simpl,simple,52,"I can't identify the problem either. But there is a simple workaround: you can just use `TPython::Exec()` and bring the string to the C++ world with an output variable. In the interest of a more stable ROOT, I would suggest to promote this way of doing things and to to deprecate `TPython::Eval()`:. * https://github.com/root-project/root/pull/16175. Would this be a good way forward also for ATLAS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:52,usability,simpl,simple,52,"I can't identify the problem either. But there is a simple workaround: you can just use `TPython::Exec()` and bring the string to the C++ world with an output variable. In the interest of a more stable ROOT, I would suggest to promote this way of doing things and to to deprecate `TPython::Eval()`:. * https://github.com/root-project/root/pull/16175. Would this be a good way forward also for ATLAS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/pull/12183:665,performance,time,time,665,"> llvm IR naming of private constants (CodeGenModule::createUnnamedGlobalFrom(), line 1136) will name private symbols without caring about possible name clashes. We will create these name clashes by marking such private symbols as weak ones, re-using previously emitted symbols (e.g. in JITDylib::defineImpl() where they get added to MUDefsOverridden and thus re-used instead of re-emitted). > . > Let me see what happens when we keep private symbols private. In principle, the interpreter should have no means fo accessing them from another transaction - private symbols seem to be function-local ones. Not only, private linkage is also used to emit other compile-time constants, e.g. string literals, but the change looks more than reasonable to me: private symbols should not end up in the symbol table.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/pull/12183:514,security,access,accessing,514,"> llvm IR naming of private constants (CodeGenModule::createUnnamedGlobalFrom(), line 1136) will name private symbols without caring about possible name clashes. We will create these name clashes by marking such private symbols as weak ones, re-using previously emitted symbols (e.g. in JITDylib::defineImpl() where they get added to MUDefsOverridden and thus re-used instead of re-emitted). > . > Let me see what happens when we keep private symbols private. In principle, the interpreter should have no means fo accessing them from another transaction - private symbols seem to be function-local ones. Not only, private linkage is also used to emit other compile-time constants, e.g. string literals, but the change looks more than reasonable to me: private symbols should not end up in the symbol table.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/pull/12183:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/pull/12183:22,deployability,fail,failing,22,Windows seems to have failing tests (?!) but these are `The process cannot access the file because it is being used by another process.` i.e. seemingly unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/pull/12183:22,reliability,fail,failing,22,Windows seems to have failing tests (?!) but these are `The process cannot access the file because it is being used by another process.` i.e. seemingly unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/pull/12183:30,safety,test,tests,30,Windows seems to have failing tests (?!) but these are `The process cannot access the file because it is being used by another process.` i.e. seemingly unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/pull/12183:75,security,access,access,75,Windows seems to have failing tests (?!) but these are `The process cannot access the file because it is being used by another process.` i.e. seemingly unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/pull/12183:30,testability,test,tests,30,Windows seems to have failing tests (?!) but these are `The process cannot access the file because it is being used by another process.` i.e. seemingly unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/issues/12185:9,deployability,log,log,9,Links to log files are wrong (line numbers are those of the source files having the warning). Possibly it just doesn't find the source file; see https://github.com/microsoft/vscode-cpptools/blob/a8285cbc0efb5b09c2d2229b0e0772dcb3b602df/Extension/package.json#L76-L94,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:236,modifiability,Extens,Extension,236,Links to log files are wrong (line numbers are those of the source files having the warning). Possibly it just doesn't find the source file; see https://github.com/microsoft/vscode-cpptools/blob/a8285cbc0efb5b09c2d2229b0e0772dcb3b602df/Extension/package.json#L76-L94,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:246,modifiability,pac,package,246,Links to log files are wrong (line numbers are those of the source files having the warning). Possibly it just doesn't find the source file; see https://github.com/microsoft/vscode-cpptools/blob/a8285cbc0efb5b09c2d2229b0e0772dcb3b602df/Extension/package.json#L76-L94,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:111,reliability,doe,doesn,111,Links to log files are wrong (line numbers are those of the source files having the warning). Possibly it just doesn't find the source file; see https://github.com/microsoft/vscode-cpptools/blob/a8285cbc0efb5b09c2d2229b0e0772dcb3b602df/Extension/package.json#L76-L94,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:9,safety,log,log,9,Links to log files are wrong (line numbers are those of the source files having the warning). Possibly it just doesn't find the source file; see https://github.com/microsoft/vscode-cpptools/blob/a8285cbc0efb5b09c2d2229b0e0772dcb3b602df/Extension/package.json#L76-L94,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:9,security,log,log,9,Links to log files are wrong (line numbers are those of the source files having the warning). Possibly it just doesn't find the source file; see https://github.com/microsoft/vscode-cpptools/blob/a8285cbc0efb5b09c2d2229b0e0772dcb3b602df/Extension/package.json#L76-L94,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:9,testability,log,log,9,Links to log files are wrong (line numbers are those of the source files having the warning). Possibly it just doesn't find the source file; see https://github.com/microsoft/vscode-cpptools/blob/a8285cbc0efb5b09c2d2229b0e0772dcb3b602df/Extension/package.json#L76-L94,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:183,availability,error,errors,183,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:0,deployability,Manag,Managed,0,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:168,deployability,build,build,168,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:0,energy efficiency,Manag,Managed,0,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:74,interoperability,platform,platform,74,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:183,performance,error,errors,183,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:0,safety,Manag,Managed,0,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:183,safety,error,errors,183,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:183,usability,error,errors,183,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:249,usability,user,user-images,249,"Managed to fix the file path thing, however it creates one annotation per platform. Will add an additional matrix option to enable/disable annotations so that only one build displays errors (probably the image with the latest gcc). ![image](https://user-images.githubusercontent.com/82065181/225619699-2781b334-7287-4660-95c4-9ddb63afd479.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:32,interoperability,platform,platform,32,"Please leave it as is with each platform reporting even if duplicate, that's totally fine. Congrats for fixing it!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/pull/12187:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/cxx17, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12187:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/cxx17, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12187:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/cxx17, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12187:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/cxx17, ROOT-ubuntu2004/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/issues/12190:46,performance,synch,synchronization,46,"I suppose the proposed can work but require a synchronization step of sort. The thread handling file number n, must wait until the file number [0,n-1] have been open before starting to process entries ; the file opening can be in parallel (somewhat) but still if an arbitrary file inside the chain is much smaller than the other, the thread processing it will have to wait a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:230,performance,parallel,parallel,230,"I suppose the proposed can work but require a synchronization step of sort. The thread handling file number n, must wait until the file number [0,n-1] have been open before starting to process entries ; the file opening can be in parallel (somewhat) but still if an arbitrary file inside the chain is much smaller than the other, the thread processing it will have to wait a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:111,integrability,sub,subsequent,111,In the proposed solution if a task needs an entry number that's not there yet it goes and retrieves it itself (subsequent tasks that need that entry number will then find it in the shared list).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:181,interoperability,share,shared,181,In the proposed solution if a task needs an entry number that's not there yet it goes and retrieves it itself (subsequent tasks that need that entry number will then find it in the shared list).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:78,energy efficiency,core,core,78,"If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:199,performance,time,times,199,"If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:257,deployability,contain,contains,257,"> we could do nothing: rdfentry_ would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" . Indeed, the global number is needed to load the proper friend. For example we could have a friend which is a chain which contains files that have different lengths (number of entries)( (but same total lengths) than the files in the main chain (consequently a single file in the main chain maybe have to use/open 2 or more files from the friend chain). I.e. we would also need to keep a running total for the friends.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:175,energy efficiency,load,load,175,"> we could do nothing: rdfentry_ would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" . Indeed, the global number is needed to load the proper friend. For example we could have a friend which is a chain which contains files that have different lengths (number of entries)( (but same total lengths) than the files in the main chain (consequently a single file in the main chain maybe have to use/open 2 or more files from the friend chain). I.e. we would also need to keep a running total for the friends.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:175,performance,load,load,175,"> we could do nothing: rdfentry_ would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" . Indeed, the global number is needed to load the proper friend. For example we could have a friend which is a chain which contains files that have different lengths (number of entries)( (but same total lengths) than the files in the main chain (consequently a single file in the main chain maybe have to use/open 2 or more files from the friend chain). I.e. we would also need to keep a running total for the friends.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:333,performance,parallel,parallelize,333,"Sounds good! What might help - esp during startup where I agree with @pcanal things can get a bit wild - is to tell the workers: ""and report your tree's entries back, and I will then - at some point in the near future - let you know your global offset, once I know it"". I.e. the sync step @pcanal was referring to. It makes sense to parallelize that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:24,usability,help,help,24,"Sounds good! What might help - esp during startup where I agree with @pcanal things can get a bit wild - is to tell the workers: ""and report your tree's entries back, and I will then - at some point in the near future - let you know your global offset, once I know it"". I.e. the sync step @pcanal was referring to. It makes sense to parallelize that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:485,availability,recov,recover,485,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:485,deployability,recov,recover,485,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:531,deployability,build,builds,531,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:80,energy efficiency,core,core,80,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:288,energy efficiency,load,load,288,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:417,energy efficiency,current,currently,417,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:201,performance,time,times,201,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:288,performance,load,load,288,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:485,reliability,recov,recover,485,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:485,safety,recov,recover,485,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:485,security,recov,recover,485,"> If you are not carefully, this might lead to the case where at start up for n-core/n-tasks, we might issue (n(n+1) / 2) files opens (eg. at the very least the first file being requested to be open n times). Mmmh that's right...we'll have to be careful. > the global number is needed to load the proper friend. What I'm saying only applies when there are no friends. In case there are friend trees (or a TEntryList) currently TTreeProcessorMT opens all files once at the beginning to recover all tree entry numbers, and each task builds the full chain (and then processes a certain range of global entry numbers).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:210,availability,recov,recover,210,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:210,deployability,recov,recover,210,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:270,performance,time,time,270,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:210,reliability,recov,recover,210,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:141,safety,avoid,avoids,141,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:210,safety,recov,recover,210,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:210,security,recov,recover,210,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. Ah, good idea, this avoids the problem Philippe mentioned above with all tasks trying to recover the number of entries of the first file at the same time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:514,deployability,log,logic,514,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:167,safety,compl,complicated,167,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:514,safety,log,logic,514,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:167,security,compl,complicated,167,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:514,security,log,logic,514,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:514,testability,log,logic,514,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:181,availability,cluster,cluster,181,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:242,availability,cluster,cluster,242,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:181,deployability,cluster,cluster,181,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:242,deployability,cluster,cluster,242,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:224,energy efficiency,optim,optimized,224,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:31,integrability,sub,submission,31,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:268,integrability,sub,submission,268,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:328,integrability,sub,submit,328,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:127,performance,parallel,parallel,127,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:224,performance,optimiz,optimized,224,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:517,deployability,depend,depending,517,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:444,energy efficiency,schedul,schedule,444,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:21,integrability,sub,submission,21,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:158,integrability,sub,submitting,158,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:517,integrability,depend,depending,517,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:67,interoperability,Distribut,Distributed,67,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:398,interoperability,distribut,distributed,398,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:517,modifiability,depend,depending,517,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:302,performance,perform,performance,302,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:341,performance,multi-thread,multi-thread,341,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:444,performance,schedul,schedule,444,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:117,reliability,doe,doesn,117,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:414,reliability,doe,does,414,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:517,safety,depend,depending,517,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:517,testability,depend,depending,517,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:302,usability,perform,performance,302,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:473,usability,efficien,efficiently,473,"> I just dislike the submission computer having to open all files. Distributed RDF employs yet another strategy that doesn't require opening all files before submitting data processing tasks but potentially produces more unbalanced tasks or some empty tasks (it's unclear to me if that has any visible performance impact or not). For local, multi-thread RDF, I guess we can either do the same that distributed RDF does or come up with a way to schedule this graph of tasks efficiently (with data processing task `#N` depending on ttree-entry-retrieval tasks `#1`, `#2`, ..., `#N`), e.g. via TBB task graphs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:316,deployability,log,log,316,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:541,deployability,automat,automatically,541,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:567,deployability,patch,patched,567,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:579,deployability,version,version,579,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:638,deployability,contain,contains,638,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:388,integrability,event,event,388,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:579,integrability,version,version,579,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:579,modifiability,version,version,579,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:240,safety,input,input,240,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:280,safety,input,input,280,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:316,safety,log,log,316,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:567,safety,patch,patched,567,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:316,security,log,log,316,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:567,security,patch,patched,567,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:316,testability,log,log,316,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:541,testability,automat,automatically,541,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:240,usability,input,input,240,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:280,usability,input,input,280,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:687,usability,user,users,687,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph. - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees. - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/pull/12192:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/python3, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12192
https://github.com/root-project/root/pull/12193:4,availability,failur,failures,4,The failures are not related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12193
https://github.com/root-project/root/pull/12193:4,deployability,fail,failures,4,The failures are not related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12193
https://github.com/root-project/root/pull/12193:4,performance,failur,failures,4,The failures are not related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12193
https://github.com/root-project/root/pull/12193:4,reliability,fail,failures,4,The failures are not related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12193
https://github.com/root-project/root/issues/12194:59,usability,user,user-images,59,Did you read this part of the screenshot? ![image](https://user-images.githubusercontent.com/10653970/216037764-b54b0fdb-4ebf-40b0-b76d-e205753d5585.png).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12194
https://github.com/root-project/root/pull/12199:178,availability,state,statement,178,> Is this better than invoking `python .../build_root.py`? Sometimes when you want to pass flags to the python interpreter it's easier to edit the shebang than to edit every run statement.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12199
https://github.com/root-project/root/pull/12199:178,integrability,state,statement,178,> Is this better than invoking `python .../build_root.py`? Sometimes when you want to pass flags to the python interpreter it's easier to edit the shebang than to edit every run statement.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12199
https://github.com/root-project/root/pull/12201:71,deployability,build,build,71,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:144,deployability,build,build,144,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:175,deployability,build,build,175,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:385,deployability,build,build,385,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:57,performance,time,time,57,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:191,testability,understand,understand,191,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:322,testability,simpl,simple,322,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:214,usability,workflow,workflow,214,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:275,usability,workflow,workflow,275,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:322,usability,simpl,simple,322,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:34,safety,review,review,34,I'd really like to see @hahnjo 's review as he is the one who found it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:34,testability,review,review,34,I'd really like to see @hahnjo 's review as he is the one who found it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:438,availability,avail,available,438,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:567,availability,unavail,unavailable,567,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:73,deployability,build,build,73,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:146,deployability,build,build,146,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:177,deployability,build,build,177,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:387,deployability,build,build,387,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:530,deployability,manag,managable,530,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:530,energy efficiency,manag,managable,530,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:59,performance,time,time,59,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:438,reliability,availab,available,438,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:438,safety,avail,available,438,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:530,safety,manag,managable,530,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:438,security,availab,available,438,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:193,testability,understand,understand,193,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:324,testability,simpl,simple,324,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:216,usability,workflow,workflow,216,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:277,usability,workflow,workflow,277,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:324,usability,simpl,simple,324,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:480,usability,workflow,workflow,480,"> Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system... You're saying that having the file available at certain steps such as in the workflow definition and right before uploading is managable but that that it should be unavailable while e.g. cmake is running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:54,security,attack,attacker,54,"Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:77,security,modif,modify,77,"Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:88,usability,workflow,workflow,88,"Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:240,availability,restor,restored,240,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:281,availability,restor,restored,281,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:311,deployability,contain,container,311,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:204,modifiability,variab,variable,204,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:240,reliability,restor,restored,240,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:281,reliability,restor,restored,281,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:56,security,attack,attacker,56,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:79,security,modif,modify,79,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:90,usability,workflow,workflow,90,"> Yes. That would be an improvement IMO because then an attacker would need to modify the workflow, which is more visible. Can't think of an elegant solution right now but I guess it could be stored as a variable in python and then deleted/restored at the right moments. (or never restored at all, it runs in a container)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1102,availability,state,state,1102,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:734,deployability,artifact,artifacts,734,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:818,deployability,build,builds,818,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1006,deployability,build,builds,1006,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1043,deployability,build,builds,1043,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:918,energy efficiency,current,currently,918,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1102,integrability,state,state,1102,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:319,modifiability,maintain,maintainer,319,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:75,performance,time,time,75,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:522,performance,time,time,522,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:838,performance,time,time,838,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:338,reliability,doe,does,338,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:319,safety,maintain,maintainer,319,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:409,safety,prevent,preventing-pwn-requests,409,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:672,safety,safe,safer,672,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:773,safety,test,tests,773,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:362,security,secur,securitylab,362,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:409,security,preven,preventing-pwn-requests,409,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:465,testability,understand,understand,465,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:773,testability,test,tests,773,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:268,usability,workflow,workflow,268,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:192,security,hash,hashes,192,"@olemorud the last rebase seems to have gone wrong... You need to rebase your branch on `master`, not the other way around. There should never be commits from `master` with a different commit hashes in a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:194,security,hash,hashes,194,"> @olemorud the last rebase seems to have gone wrong... You need to rebase your branch on `master`, not the other way around. There should never be commits from `master` with a different commit hashes in a PR. Yeah I will fix it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1114,availability,state,state,1114,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:746,deployability,artifact,artifacts,746,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:830,deployability,build,builds,830,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1018,deployability,build,builds,1018,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1055,deployability,build,builds,1055,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1365,deployability,build,builds,1365,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1378,deployability,build,builds,1378,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1465,deployability,build,build,1465,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1511,deployability,releas,release,1511,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1570,deployability,artifact,artifacts,1570,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:930,energy efficiency,current,currently,930,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1189,energy efficiency,Current,Current,1189,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1114,integrability,state,state,1114,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:329,modifiability,maintain,maintainer,329,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:77,performance,time,time,77,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:532,performance,time,time,532,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:850,performance,time,time,850,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1229,performance,time,time,1229,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:348,reliability,doe,does,348,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:329,safety,maintain,maintainer,329,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:419,safety,prevent,preventing-pwn-requests,419,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:684,safety,safe,safer,684,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:785,safety,test,tests,785,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1583,safety,test,test,1583,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:372,security,secur,securitylab,372,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:419,security,preven,preventing-pwn-requests,419,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:475,testability,understand,understand,475,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:785,testability,test,tests,785,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1583,testability,test,test,1583,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:278,usability,workflow,workflow,278,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1263,usability,user,user-images,1263,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):. > . > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup. > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no? > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no? 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time. ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:294,availability,down,downloaded,294,"ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:223,deployability,build,build,223,"ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:288,deployability,build,build,288,"ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:124,safety,compl,complicated,124,"ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:124,security,compl,complicated,124,"ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:296,availability,down,downloaded,296,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:341,availability,down,downloaded,341,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:437,availability,down,downloading,437,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:225,deployability,build,build,225,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:290,deployability,build,build,290,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:335,deployability,build,build,335,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:378,deployability,build,build,378,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:470,deployability,build,building,470,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:496,deployability,artifact,artifact,496,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:559,deployability,build,builds,559,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:614,deployability,version,version,614,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:632,deployability,continu,continues,632,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:748,deployability,artifact,artifacts,748,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:807,deployability,build,builds,807,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:895,deployability,build,build,895,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:901,deployability,artifact,artifact,901,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1180,deployability,artifact,artifacts,1180,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:614,integrability,version,version,614,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:614,modifiability,version,version,614,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:530,reliability,doe,doesn,530,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:930,reliability,doe,doesn,930,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:126,safety,compl,complicated,126,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1119,safety,compl,complete,1119,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:126,security,compl,complicated,126,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1119,security,compl,complete,1119,"> ad 2: Ok, I didn't know this setting existed. Sounds reasonable then (at least not worse than right now). ad 3: This sounds complicated, but I'm probably missing the rationale behind. Can you remind me why we need to first build the target branch and not entirely rely on the incremental build downloaded from S3? If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:27,availability,down,downloaded,27,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:123,availability,down,downloading,123,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1116,availability,down,downloads,1116,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:21,deployability,build,build,21,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:64,deployability,build,build,64,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:156,deployability,build,building,156,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:188,deployability,artifact,artifact,188,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:251,deployability,build,builds,251,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:306,deployability,version,version,306,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:324,deployability,continu,continues,324,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:440,deployability,artifact,artifacts,440,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:512,deployability,build,build,512,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:624,deployability,build,build,624,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:653,deployability,build,build,653,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:685,deployability,build,builds,685,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:773,deployability,build,build,773,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:779,deployability,artifact,artifact,779,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1058,deployability,artifact,artifacts,1058,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1140,deployability,build,build,1140,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1365,deployability,build,building,1365,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1420,deployability,build,build,1420,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1442,deployability,build,build,1442,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1497,deployability,build,builds,1497,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:306,integrability,version,version,306,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1272,integrability,sub,subsequent,1272,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:306,modifiability,version,version,306,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:1351,performance,time,time,1351,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:222,reliability,doe,doesn,222,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:567,reliability,pra,practice,567,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:808,reliability,doe,doesn,808,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:997,safety,compl,complete,997,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:997,security,compl,complete,997,"> If the incremental build downloaded from S3 is up to date the build purely relies on it. It then behaves as if it's just downloading, rebasing the PR and building. > . > If the existing artifact is not up to date, or it doesn't exist, the job first builds the target branch to populate S3 with the newer version, and then continues as usual. This only adds a few minutes to that run and then proceeding runs will behave like usual as the artifacts are now up to date again. We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. > Consider a CI where PR builds don't upload, and you have a PR where the CMake options are changed. An existing build artifact for the new options doesn't exist so the first run will be from scratch and take ~40 minutes. An issue arises and the PR is gets a new commit, and a new job starts. This job will then also take ~40 minutes to complete because the previous commit didn't upload any clean artifacts to use. I'm probably missing the place where it downloads a previous PR build, I only see `download_latest`. And in any case, I would argue it is ok for a PR changing CMake options to take ~40 minutes on subsequent pushes (the initial push will take that long anyway, and even spend time on first building the base, see above). You really want that to build cleanly, ROOT's build system is not always the greatest on incremental builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:94,deployability,build,builds,94,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:132,deployability,updat,update,132,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:143,deployability,artifact,artifacts,143,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:177,deployability,artifact,artifacts,177,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:234,deployability,build,builds,234,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:116,integrability,asynchron,asynchronously,116,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:116,performance,asynch,asynchronously,116,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:132,safety,updat,update,132,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:132,security,updat,update,132,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:213,security,secur,security,213,"As another alternative (not sure that was mentioned or considered): we could have incremental builds on merge that ""asynchronously"" update the artifacts. That way we get newest artifacts to start from without the security issue of PR builds pushing. What do yous @hahnjo @olemorud think? And yes, let's get this PR in and iterate afterwards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:66,deployability,build,build,66,"This is what I meant with:. > We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. Ole's argument is that we may want incremental builds in PRs (between pushes), but I currently don't see this implemented and I'm not sure if this is actually a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:178,deployability,build,build,178,"This is what I meant with:. > We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. Ole's argument is that we may want incremental builds in PRs (between pushes), but I currently don't see this implemented and I'm not sure if this is actually a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:207,deployability,build,build,207,"This is what I meant with:. > We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. Ole's argument is that we may want incremental builds in PRs (between pushes), but I currently don't see this implemented and I'm not sure if this is actually a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:261,deployability,build,builds,261,"This is what I meant with:. > We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. Ole's argument is that we may want incremental builds in PRs (between pushes), but I currently don't see this implemented and I'm not sure if this is actually a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:299,energy efficiency,current,currently,299,"This is what I meant with:. > We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. Ole's argument is that we may want incremental builds in PRs (between pushes), but I currently don't see this implemented and I'm not sure if this is actually a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12201:121,reliability,pra,practice,121,"This is what I meant with:. > We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. Ole's argument is that we may want incremental builds in PRs (between pushes), but I currently don't see this implemented and I'm not sure if this is actually a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12201
https://github.com/root-project/root/pull/12202:65,deployability,updat,update,65,"Hi @egpbos, thanks for the PR! It looks good, but can you please update such that is passes on all CI nodes? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:65,safety,updat,update,65,"Hi @egpbos, thanks for the PR! It looks good, but can you please update such that is passes on all CI nodes? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:65,security,updat,update,65,"Hi @egpbos, thanks for the PR! It looks good, but can you please update such that is passes on all CI nodes? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:153,safety,review,review,153,I have rebased this commit on master of last Friday. Let's see whether it now passes CI. @guitargeek is it ok with you to postpone the changes from your review comment to a separate issue? It seems like a cleanup task not directly related to the purpose of this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:153,testability,review,review,153,I have rebased this commit on master of last Friday. Let's see whether it now passes CI. @guitargeek is it ok with you to postpone the changes from your review comment to a separate issue? It seems like a cleanup task not directly related to the purpose of this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:74,deployability,build,build,74,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:203,deployability,automat,automatically,203,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:439,deployability,fail,fail,439,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:289,interoperability,platform,platforms,289,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:453,interoperability,platform,platform,453,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:439,reliability,fail,fail,439,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:433,safety,test,tests,433,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:203,testability,automat,automatically,203,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:433,testability,test,tests,433,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:81,usability,command,command,81,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:241,usability,statu,status,241,"Hi @egpbos, thank you so much for picking this up again! Your `@phsft-bot build` command will not do anything though :slightly_smiling_face: We have retired the Jenkins CI and the bot. Our new CI is ran automatically, and you can check it's status at the bottom of the PR thread. Once are platforms are finished running, the GitHub actions bot will also post a comment with a link to a summary, where you can see at one glance which tests fail on which platform and how.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:28,safety,review,reviewed,28,"I think this can finally be reviewed, CI was passing (just removed a stray printf in the last force push).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:28,testability,review,reviewed,28,"I think this can finally be reviewed, CI was passing (just removed a stray printf in the last force push).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:31,interoperability,format,formatting,31,The latest commit changes only formatting and now all CI checks pass (see the CI checks of the previous commit).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:20,availability,failur,failure,20,The ROOT CI / mac14 failure is not due to this PR (see the successful build in the previous commit).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:20,deployability,fail,failure,20,The ROOT CI / mac14 failure is not due to this PR (see the successful build in the previous commit).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:70,deployability,build,build,70,The ROOT CI / mac14 failure is not due to this PR (see the successful build in the previous commit).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:20,performance,failur,failure,20,The ROOT CI / mac14 failure is not due to this PR (see the successful build in the previous commit).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:20,reliability,fail,failure,20,The ROOT CI / mac14 failure is not due to this PR (see the successful build in the previous commit).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:513,deployability,manag,management,513,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:570,deployability,log,logic,570,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:852,deployability,contain,contained,852,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:220,energy efficiency,current,current,220,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:513,energy efficiency,manag,management,513,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:554,energy efficiency,core,core,554,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:618,integrability,wrap,wrapper,618,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:300,interoperability,share,share,300,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:381,interoperability,share,shared,381,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:618,interoperability,wrapper,wrapper,618,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:143,modifiability,paramet,parameter,143,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:195,modifiability,paramet,parameters,195,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:694,reliability,doe,does,694,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:421,safety,test,tests,421,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:513,safety,manag,management,513,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:570,safety,log,logic,570,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:570,security,log,logic,570,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:416,testability,unit,unit,416,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:421,testability,test,tests,421,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:570,testability,log,logic,570,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:611,testability,simpl,simple,611,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:611,usability,simpl,simple,611,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector. 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:92,deployability,fail,fails,92,"Rebased on master to make the CI pass on clang-format (✅) and mac14 which also mysteriously fails (I think it's not due to this PR, but still).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:47,interoperability,format,format,47,"Rebased on master to make the CI pass on clang-format (✅) and mac14 which also mysteriously fails (I think it's not due to this PR, but still).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:92,reliability,fail,fails,92,"Rebased on master to make the CI pass on clang-format (✅) and mac14 which also mysteriously fails (I think it's not due to this PR, but still).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:149,availability,failur,failure,149,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:235,availability,failur,failure,235,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:0,deployability,Fail,Failing,0,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:107,deployability,fail,fails,107,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:116,deployability,configurat,configuration,116,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:149,deployability,fail,failure,149,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:235,deployability,fail,failure,235,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:116,integrability,configur,configuration,116,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:116,modifiability,configur,configuration,116,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:149,performance,failur,failure,149,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:235,performance,failur,failure,235,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:0,reliability,Fail,Failing,0,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:107,reliability,fail,fails,107,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:149,reliability,fail,failure,149,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:235,reliability,fail,failure,235,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:243,reliability,doe,doesn,243,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:8,safety,test,test,8,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:116,security,configur,configuration,116,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:8,testability,test,test,8,"Failing test on ubuntu20 (1697:roottest-python-numba-numba) is unrelated to this PR. The mac14 run already fails on configuration (some LibXml2 path failure). I don't see how this could be caused by this PR, but it's strange that this failure doesn't seem to be present in other PRs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:90,availability,failur,failure,90,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:213,availability,failur,failures,213,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:90,deployability,fail,failure,90,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:213,deployability,fail,failures,213,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:90,performance,failur,failure,90,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:213,performance,failur,failures,213,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:90,reliability,fail,failure,90,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:213,reliability,fail,failures,213,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:111,usability,workflow,workflow,111,"Ah, I see [this PR](https://github.com/root-project/root/pull/15404) also had the LibXml2 failure in the mac14 workflow: https://github.com/root-project/root/actions/runs/8956800442/job/24599041512. So indeed, CI failures unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:17,safety,review,review,17,"I overlooked the review comment of Feb last year above. I accidentally almost already addressed it by removing all cloning and copying support. The only thing left was to remove the comments, which I now did as well. I amended the previous commit with that. The only difference with before is the removed comments, so behaviorally no change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:58,safety,accid,accidentally,58,"I overlooked the review comment of Feb last year above. I accidentally almost already addressed it by removing all cloning and copying support. The only thing left was to remove the comments, which I now did as well. I amended the previous commit with that. The only difference with before is the removed comments, so behaviorally no change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:17,testability,review,review,17,"I overlooked the review comment of Feb last year above. I accidentally almost already addressed it by removing all cloning and copying support. The only thing left was to remove the comments, which I now did as well. I amended the previous commit with that. The only difference with before is the removed comments, so behaviorally no change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:135,usability,support,support,135,"I overlooked the review comment of Feb last year above. I accidentally almost already addressed it by removing all cloning and copying support. The only thing left was to remove the comments, which I now did as well. I amended the previous commit with that. The only difference with before is the removed comments, so behaviorally no change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12202:318,usability,behavi,behaviorally,318,"I overlooked the review comment of Feb last year above. I accidentally almost already addressed it by removing all cloning and copying support. The only thing left was to remove the comments, which I now did as well. I amended the previous commit with that. The only difference with before is the removed comments, so behaviorally no change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12202
https://github.com/root-project/root/pull/12203:27,deployability,instal,install,27,Related: https://root.cern/install/build_from_source/#all-build-options which will eventually need an update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12203
https://github.com/root-project/root/pull/12203:58,deployability,build,build-options,58,Related: https://root.cern/install/build_from_source/#all-build-options which will eventually need an update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12203
https://github.com/root-project/root/pull/12203:102,deployability,updat,update,102,Related: https://root.cern/install/build_from_source/#all-build-options which will eventually need an update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12203
https://github.com/root-project/root/pull/12203:83,integrability,event,eventually,83,Related: https://root.cern/install/build_from_source/#all-build-options which will eventually need an update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12203
https://github.com/root-project/root/pull/12203:102,safety,updat,update,102,Related: https://root.cern/install/build_from_source/#all-build-options which will eventually need an update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12203
https://github.com/root-project/root/pull/12203:102,security,updat,update,102,Related: https://root.cern/install/build_from_source/#all-build-options which will eventually need an update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12203
https://github.com/root-project/root/issues/12208:569,deployability,roll,rolling,569,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:322,interoperability,standard,standard,322,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:115,testability,simpl,simply,115,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:91,usability,user,users,91,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:115,usability,simpl,simply,115,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:116,interoperability,standard,standard,116,"> Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. > . > I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I agree with this strategy :). What I maybe think it's worth is to add the ""deprecated warnings"" suggested by @klenze to the Doxygen documentation. This way, it does not bother anyone compiling, but gives useful instructions to people developing new scripts. For example:. ` typedef int Int_t; //Signed integer 4 bytes (int) \deprecated For new designs, use instead std::int32_t`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:404,reliability,doe,does,404,"> Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. > . > I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I agree with this strategy :). What I maybe think it's worth is to add the ""deprecated warnings"" suggested by @klenze to the Doxygen documentation. This way, it does not bother anyone compiling, but gives useful instructions to people developing new scripts. For example:. ` typedef int Int_t; //Signed integer 4 bytes (int) \deprecated For new designs, use instead std::int32_t`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:539,security,Sign,Signed,539,"> Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. > . > I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I agree with this strategy :). What I maybe think it's worth is to add the ""deprecated warnings"" suggested by @klenze to the Doxygen documentation. This way, it does not bother anyone compiling, but gives useful instructions to people developing new scripts. For example:. ` typedef int Int_t; //Signed integer 4 bytes (int) \deprecated For new designs, use instead std::int32_t`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:376,usability,document,documentation,376,"> Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. > . > I don't know whether anything but this will be constructive / productive enough. What are your thoughts? I agree with this strategy :). What I maybe think it's worth is to add the ""deprecated warnings"" suggested by @klenze to the Doxygen documentation. This way, it does not bother anyone compiling, but gives useful instructions to people developing new scripts. For example:. ` typedef int Int_t; //Signed integer 4 bytes (int) \deprecated For new designs, use instead std::int32_t`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:95,reliability,pra,practical,95,"On further reflection, I agree that using [[deprecated]] on Int_t would annoy many users to no practical purpose. . Deprecating it in the comments sounds reasonable enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:83,usability,user,users,83,"On further reflection, I agree that using [[deprecated]] on Int_t would annoy many users to no practical purpose. . Deprecating it in the comments sounds reasonable enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:25,energy efficiency,current,currently,25,"And as a reminder we are currently not yet setup to properly handle 'nicely' some of those types in the I/O. `std::int32_t` and `std::int64_t` are implemented in the C++ library as typedef/using-alias and thus appear to us after parsing as the underlying type. And not all platforms agree on what that type is (We have seen `int`, `long` for the 1st one and `long` and `long long` for the 2nd one). Because of long standing choices and backward compatibility, those can lead to different on-file layout (which must be platform independent). This is of course fixable but is not completed yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:273,interoperability,platform,platforms,273,"And as a reminder we are currently not yet setup to properly handle 'nicely' some of those types in the I/O. `std::int32_t` and `std::int64_t` are implemented in the C++ library as typedef/using-alias and thus appear to us after parsing as the underlying type. And not all platforms agree on what that type is (We have seen `int`, `long` for the 1st one and `long` and `long long` for the 2nd one). Because of long standing choices and backward compatibility, those can lead to different on-file layout (which must be platform independent). This is of course fixable but is not completed yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:445,interoperability,compatib,compatibility,445,"And as a reminder we are currently not yet setup to properly handle 'nicely' some of those types in the I/O. `std::int32_t` and `std::int64_t` are implemented in the C++ library as typedef/using-alias and thus appear to us after parsing as the underlying type. And not all platforms agree on what that type is (We have seen `int`, `long` for the 1st one and `long` and `long long` for the 2nd one). Because of long standing choices and backward compatibility, those can lead to different on-file layout (which must be platform independent). This is of course fixable but is not completed yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:518,interoperability,platform,platform,518,"And as a reminder we are currently not yet setup to properly handle 'nicely' some of those types in the I/O. `std::int32_t` and `std::int64_t` are implemented in the C++ library as typedef/using-alias and thus appear to us after parsing as the underlying type. And not all platforms agree on what that type is (We have seen `int`, `long` for the 1st one and `long` and `long long` for the 2nd one). Because of long standing choices and backward compatibility, those can lead to different on-file layout (which must be platform independent). This is of course fixable but is not completed yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:104,performance,I/O,I/O,104,"And as a reminder we are currently not yet setup to properly handle 'nicely' some of those types in the I/O. `std::int32_t` and `std::int64_t` are implemented in the C++ library as typedef/using-alias and thus appear to us after parsing as the underlying type. And not all platforms agree on what that type is (We have seen `int`, `long` for the 1st one and `long` and `long long` for the 2nd one). Because of long standing choices and backward compatibility, those can lead to different on-file layout (which must be platform independent). This is of course fixable but is not completed yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:578,safety,compl,completed,578,"And as a reminder we are currently not yet setup to properly handle 'nicely' some of those types in the I/O. `std::int32_t` and `std::int64_t` are implemented in the C++ library as typedef/using-alias and thus appear to us after parsing as the underlying type. And not all platforms agree on what that type is (We have seen `int`, `long` for the 1st one and `long` and `long long` for the 2nd one). Because of long standing choices and backward compatibility, those can lead to different on-file layout (which must be platform independent). This is of course fixable but is not completed yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12208:578,security,compl,completed,578,"And as a reminder we are currently not yet setup to properly handle 'nicely' some of those types in the I/O. `std::int32_t` and `std::int64_t` are implemented in the C++ library as typedef/using-alias and thus appear to us after parsing as the underlying type. And not all platforms agree on what that type is (We have seen `int`, `long` for the 1st one and `long` and `long long` for the 2nd one). Because of long standing choices and backward compatibility, those can lead to different on-file layout (which must be platform independent). This is of course fixable but is not completed yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12208
https://github.com/root-project/root/issues/12209:18,interoperability,share,share,18,"Thanks! Could you share the linker invocation, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12209
https://github.com/root-project/root/issues/12209:77,deployability,build,build,77,"I cannot reproduce it anymore actually, most likely because I cleaned up the build area and did a build from scratch. Not sure if incremental builds are supported, though, so I close this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12209
https://github.com/root-project/root/issues/12209:98,deployability,build,build,98,"I cannot reproduce it anymore actually, most likely because I cleaned up the build area and did a build from scratch. Not sure if incremental builds are supported, though, so I close this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12209
https://github.com/root-project/root/issues/12209:142,deployability,build,builds,142,"I cannot reproduce it anymore actually, most likely because I cleaned up the build area and did a build from scratch. Not sure if incremental builds are supported, though, so I close this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12209
https://github.com/root-project/root/issues/12209:153,usability,support,supported,153,"I cannot reproduce it anymore actually, most likely because I cleaned up the build area and did a build from scratch. Not sure if incremental builds are supported, though, so I close this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12209
https://github.com/root-project/root/issues/12209:177,usability,close,close,177,"I cannot reproduce it anymore actually, most likely because I cleaned up the build area and did a build from scratch. Not sure if incremental builds are supported, though, so I close this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12209
https://github.com/root-project/root/pull/12211:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, on ROOT-ubuntu2204/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12211
https://github.com/root-project/root/pull/12211:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu2204/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12211
https://github.com/root-project/root/pull/12211:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu2204/cxx17",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12211
https://github.com/root-project/root/pull/12212:5,availability,failur,failure,5,Test failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12212
https://github.com/root-project/root/pull/12212:5,deployability,fail,failure,5,Test failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12212
https://github.com/root-project/root/pull/12212:5,performance,failur,failure,5,Test failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12212
https://github.com/root-project/root/pull/12212:5,reliability,fail,failure,5,Test failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12212
https://github.com/root-project/root/pull/12212:0,safety,Test,Test,0,Test failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12212
https://github.com/root-project/root/pull/12212:0,testability,Test,Test,0,Test failure seems unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12212
https://github.com/root-project/root/pull/12213:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2004/default, ROOT-ubuntu2204/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12213
https://github.com/root-project/root/pull/12218:110,availability,failur,failures,110,"FWIW, it's possible to run the full tests with `CLING_JITLINK=1` on Linux x86_64 with this, and get ""only"" 48 failures :tada:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:110,deployability,fail,failures,110,"FWIW, it's possible to run the full tests with `CLING_JITLINK=1` on Linux x86_64 with this, and get ""only"" 48 failures :tada:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:110,performance,failur,failures,110,"FWIW, it's possible to run the full tests with `CLING_JITLINK=1` on Linux x86_64 with this, and get ""only"" 48 failures :tada:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:110,reliability,fail,failures,110,"FWIW, it's possible to run the full tests with `CLING_JITLINK=1` on Linux x86_64 with this, and get ""only"" 48 failures :tada:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:36,safety,test,tests,36,"FWIW, it's possible to run the full tests with `CLING_JITLINK=1` on Linux x86_64 with this, and get ""only"" 48 failures :tada:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:36,testability,test,tests,36,"FWIW, it's possible to run the full tests with `CLING_JITLINK=1` on Linux x86_64 with this, and get ""only"" 48 failures :tada:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:13,availability,state,state,13,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:103,availability,servic,services,103,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:56,deployability,fail,failing,56,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:103,deployability,servic,services,103,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:162,deployability,build,build,162,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:13,integrability,state,state,13,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:103,integrability,servic,services,103,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:103,modifiability,servic,services,103,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:56,reliability,fail,failing,56,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:30,safety,test,test,30,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:30,testability,test,test,30,"> What’s the state of cling’s test suite? I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/pull/12218:17,usability,confirm,confirm,17,"Yes, and just to confirm, it's not getting worse with this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12218
https://github.com/root-project/root/issues/12226:30,usability,user,users,30,"> is the main entry point for users to use RNTuple. I think that's the goal, but we are not there yet. We nevertheless need docs of course :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12226
https://github.com/root-project/root/issues/12226:37,security,ident,identical,37,The main entry point is now actually identical for RNTuple and TTree. Fixed by #13090,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12226
https://github.com/root-project/root/issues/12230:193,deployability,updat,update,193,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:50,integrability,buffer,buffer,50,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:57,integrability,interfac,interface,57,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:359,integrability,sub,subscripted,359,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:57,interoperability,interfac,interface,57,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:286,interoperability,incompatib,incompatibility,286,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:57,modifiability,interfac,interface,57,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:213,performance,perform,perform,213,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:193,safety,updat,update,193,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:193,security,updat,update,193,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12230:213,usability,perform,perform,213,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp. if (PyObject_CheckBuffer(pyobject)) {. Py_buffer bufinfo;. memset(&bufinfo, 0, sizeof(Py_buffer));. ```. . Where we update the check to perform . ```cpp. if (check && bufinfo.itemsize != size). ```. determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12230
https://github.com/root-project/root/issues/12231:31,usability,help,help,31,@amadio do you think you could help us here with the right questions to ask?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:184,availability,error,error,184,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:5,deployability,version,version,5,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:71,deployability,instal,installed,71,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:264,deployability,instal,installed,264,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:5,integrability,version,version,5,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:190,integrability,messag,message,190,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:190,interoperability,messag,message,190,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:5,modifiability,version,version,5,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:184,performance,error,error,184,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:184,safety,error,error,184,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:331,safety,test,test,331,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:90,security,SSL,SSL,90,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:94,security,certif,certificates,94,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:164,security,certif,certificate,164,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:224,security,certif,certificate,224,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:150,testability,verif,verify,150,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:331,testability,test,test,331,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:184,usability,error,error,184,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:214,usability,user,user,214,"What version of OpenSSL is being used, is it the builtin one? Have you installed the CERN SSL certificates? (note `ErrParseBuffer: unknown CA: cannot verify server certificate` in the error message). Do you have a user grid certificate setup? Is Kerberos actually installed? Do you have an active Kerberos ticket while running the test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:176,deployability,continu,continue,176,"No, this is fully standard Debian Unstable without anything CERN specific. And as far as I can tell, the problem is not that `krb5` and `gsi` but that XRootD should gracefully continue other authentication methods - or none at all, it's `eospublic` after all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:18,interoperability,standard,standard,18,"No, this is fully standard Debian Unstable without anything CERN specific. And as far as I can tell, the problem is not that `krb5` and `gsi` but that XRootD should gracefully continue other authentication methods - or none at all, it's `eospublic` after all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:65,interoperability,specif,specific,65,"No, this is fully standard Debian Unstable without anything CERN specific. And as far as I can tell, the problem is not that `krb5` and `gsi` but that XRootD should gracefully continue other authentication methods - or none at all, it's `eospublic` after all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:191,security,authenticat,authentication,191,"No, this is fully standard Debian Unstable without anything CERN specific. And as far as I can tell, the problem is not that `krb5` and `gsi` but that XRootD should gracefully continue other authentication methods - or none at all, it's `eospublic` after all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:39,deployability,build,build,39,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:45,deployability,configurat,configuration,45,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:45,integrability,configur,configuration,45,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:111,interoperability,plug,plugin,111,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:45,modifiability,configur,configuration,45,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:45,security,configur,configuration,45,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:96,security,authenticat,authentication,96,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:346,security,authenticat,authentication,346,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:3,testability,understand,understand,3,"To understand why it's not trying, the build configuration is important. For instance, the unix authentication plugin won't be built if `XRDCL_LIB_ONLY` is true, which the builtin XRootD might be setting internally. I don't think this is a bug in XRootD, just a misconfiguration on the ROOT side. When I try from my machine, it goes via Kerberos authentication when I have a ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:4,deployability,build,build,4,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:10,deployability,configurat,configuration,10,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:89,deployability,instal,installing,89,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:10,integrability,configur,configuration,10,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:10,modifiability,configur,configuration,10,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:127,modifiability,pac,package,127,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:10,security,configur,configuration,10,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:53,usability,document,documented,53,"The build configuration is the one from Debian; as I documented in the summary, I'm just installing the `libxrootd-client-dev` package. And as also mentioned, `xrdcp` works perfectly fine falling back to `unix`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:658,availability,error,error,658,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:23,deployability,configurat,configuration,23,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:68,deployability,instal,install,68,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:112,deployability,configurat,configuration,112,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:574,deployability,configurat,configuration,574,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:715,deployability,automat,automatic,715,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:23,integrability,configur,configuration,23,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:112,integrability,configur,configuration,112,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:574,integrability,configur,configuration,574,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:426,interoperability,share,shared,426,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:23,modifiability,configur,configuration,23,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:93,modifiability,pac,package,93,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:112,modifiability,configur,configuration,112,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:574,modifiability,configur,configuration,574,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:658,performance,error,error,658,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:488,reliability,doe,doesn,488,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:244,safety,Test,Testing,244,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:562,safety,detect,detect,562,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:658,safety,error,error,658,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:23,security,configur,configuration,23,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:112,security,configur,configuration,112,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:166,security,ssl,ssl,166,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:562,security,detect,detect,562,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:574,security,configur,configuration,574,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:244,testability,Test,Testing,244,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:715,testability,automat,automatic,715,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:299,usability,effectiv,effectively,299,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:658,usability,error,error,658,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:146,availability,error,error,146,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:62,deployability,configurat,configuration,62,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:203,deployability,automat,automatic,203,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:62,integrability,configur,configuration,62,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:62,modifiability,configur,configuration,62,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:146,performance,error,error,146,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:50,safety,detect,detect,50,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:146,safety,error,error,146,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:50,security,detect,detect,50,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:62,security,configur,configuration,62,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:203,testability,automat,automatic,203,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:146,usability,error,error,146,"> @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed... As you wish, feel free to create a PR for this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:111,deployability,build,build,111,"> As you wish, feel free to create a PR for this. The question is, how do we handle the default case where the build system tries to enable `ssl` and `xrootd` and then doesn't find OpenSSL, so it turns on `builtin_openssl`? We could silently disable either of `ssl` or `xrootd`, or force `builtin_xrootd` (which builds against `builtin_openssl`)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:312,deployability,build,builds,312,"> As you wish, feel free to create a PR for this. The question is, how do we handle the default case where the build system tries to enable `ssl` and `xrootd` and then doesn't find OpenSSL, so it turns on `builtin_openssl`? We could silently disable either of `ssl` or `xrootd`, or force `builtin_xrootd` (which builds against `builtin_openssl`)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:168,reliability,doe,doesn,168,"> As you wish, feel free to create a PR for this. The question is, how do we handle the default case where the build system tries to enable `ssl` and `xrootd` and then doesn't find OpenSSL, so it turns on `builtin_openssl`? We could silently disable either of `ssl` or `xrootd`, or force `builtin_xrootd` (which builds against `builtin_openssl`)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:141,security,ssl,ssl,141,"> As you wish, feel free to create a PR for this. The question is, how do we handle the default case where the build system tries to enable `ssl` and `xrootd` and then doesn't find OpenSSL, so it turns on `builtin_openssl`? We could silently disable either of `ssl` or `xrootd`, or force `builtin_xrootd` (which builds against `builtin_openssl`)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:261,security,ssl,ssl,261,"> As you wish, feel free to create a PR for this. The question is, how do we handle the default case where the build system tries to enable `ssl` and `xrootd` and then doesn't find OpenSSL, so it turns on `builtin_openssl`? We could silently disable either of `ssl` or `xrootd`, or force `builtin_xrootd` (which builds against `builtin_openssl`)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:77,reliability,doe,does,77,"Looks like my first guess was correct (builtin OpenSSL was being used). This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:188,usability,close,closed,188,"Looks like my first guess was correct (builtin OpenSSL was being used). This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:474,deployability,configurat,configuration,474,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:474,integrability,configur,configuration,474,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:474,modifiability,configur,configuration,474,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:222,reliability,doe,does,222,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:400,safety,prevent,prevent,400,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:400,security,preven,prevent,400,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:474,security,configur,configuration,474,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:92,testability,understand,understand,92,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:333,usability,close,closed,333,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:408,usability,user,users,408,"> Looks like my first guess was correct (builtin OpenSSL was being used). Well ok, I didn't understand your comment to say that using both `builtin_ssl` and an XRootD linked against a system OpenSSL is a problem... > This does not look like a problem with XRootD, but with ROOT and the way it's handling builtins. Can this ticket be closed? No, it's not a problem of XRootD, but I do think we should prevent users from shooting themselves into the foot with a ""broken"" ROOT configuration, see above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:118,safety,detect,detects,118,"> Can you maybe try it and let me know if that fixes the issue? Using the setup described above, I can confirm the PR detects the situation and switches off `xrootd` :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:118,security,detect,detects,118,"> Can you maybe try it and let me know if that fixes the issue? Using the setup described above, I can confirm the PR detects the situation and switches off `xrootd` :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12231:103,usability,confirm,confirm,103,"> Can you maybe try it and let me know if that fixes the issue? Using the setup described above, I can confirm the PR detects the situation and switches off `xrootd` :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12231
https://github.com/root-project/root/issues/12234:512,integrability,event,event,512,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:589,integrability,wrap,wrapped,589,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:640,integrability,wrap,wrapped,640,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:685,integrability,sub,subset,685,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:102,reliability,doe,does,102,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:287,safety,review,review,287,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:60,security,sign,signature,60,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:287,testability,review,review,287,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:571,testability,understand,understand,571,"Hi @toicca , thank you for the report! About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:99,energy efficiency,current,currently,99,"Hi @eguiraud, thanks for the response! Since the `RVecF` is being addressed and `numba` just isn't currently built to work with PyROOT stuff I think this issue can be closed. Lastly, just to clarify, there isn't a way for me to use `numba` with `RDF` to return an array that I define inside the function? For example, if I had the code below there isn't any type `'array'` that I could use? ```. @ROOT.Numba.Declare(['int', 'float'], 'array'). def pyfillarray(N, x):. array = ... for i in range(N):. array[i] = x. return array. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/issues/12234:167,usability,close,closed,167,"Hi @eguiraud, thanks for the response! Since the `RVecF` is being addressed and `numba` just isn't currently built to work with PyROOT stuff I think this issue can be closed. Lastly, just to clarify, there isn't a way for me to use `numba` with `RDF` to return an array that I define inside the function? For example, if I had the code below there isn't any type `'array'` that I could use? ```. @ROOT.Numba.Declare(['int', 'float'], 'array'). def pyfillarray(N, x):. array = ... for i in range(N):. array[i] = x. return array. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12234
https://github.com/root-project/root/pull/12235:57,deployability,fail,failing,57,"My PR https://github.com/root-project/root/pull/12335 is failing `test_stressgraphics` and I can reproduce this locally after rebasing to `origin/master` including this change. Jenkins also reported it here for nearly all platforms, @couet could you please take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12235
https://github.com/root-project/root/pull/12235:222,interoperability,platform,platforms,222,"My PR https://github.com/root-project/root/pull/12335 is failing `test_stressgraphics` and I can reproduce this locally after rebasing to `origin/master` including this change. Jenkins also reported it here for nearly all platforms, @couet could you please take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12235
https://github.com/root-project/root/pull/12235:57,reliability,fail,failing,57,"My PR https://github.com/root-project/root/pull/12335 is failing `test_stressgraphics` and I can reproduce this locally after rebasing to `origin/master` including this change. Jenkins also reported it here for nearly all platforms, @couet could you please take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12235
https://github.com/root-project/root/pull/12237:11,deployability,build,build,11,"@phsft-bot build just on mac12/default, mac11arm/default, mac12arm/default, mac13arm/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12237
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx17, mac13arm/cxx17",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac12/cxx17, mac13/cxx17",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx17, mac13arm/cxx17",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx17, mac13arm/cxx17",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx17, mac13arm/cxx17",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx17, mac13arm/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,@phsft-bot build just on mac13arm/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx17, mac13arm/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12238:159,integrability,topic,topic,159,"https://github.com/root-project/root/pull/13046 fixed https://github.com/root-project/root/issues/12003 so I'm closing this for now. I'm not done yet with the topic since the application of D41416 is still wrong, but I first want to land https://github.com/root-project/root/pull/13049 and then re-evaluate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12238
https://github.com/root-project/root/pull/12239:83,availability,consist,consistent,83,@gganis I'd appreciate your review here - is the removal of `TDataSetManagerAliEn` consistent with the removal of alien?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:28,safety,review,review,28,@gganis I'd appreciate your review here - is the removal of `TDataSetManagerAliEn` consistent with the removal of alien?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:28,testability,review,review,28,@gganis I'd appreciate your review here - is the removal of `TDataSetManagerAliEn` consistent with the removal of alien?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:83,usability,consist,consistent,83,@gganis I'd appreciate your review here - is the removal of `TDataSetManagerAliEn` consistent with the removal of alien?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:197,safety,reme,remember,197,"Thanks @gganis ! > TGrid and related classes (TGrid...) can be removed as well. I see `net/monalisa/src/TMonaLisaWriter.cxx` `#include`s `TGrid.h`; we're deprecating that only here, so I'll try to remember to remove this once monalisa gets removed! That said, `TDataSetManagerAliEn` seems to be something we can remove in this PR, too? Let me try :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:0,availability,Error,Errors,0,"Errors seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:0,performance,Error,Errors,0,"Errors seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:0,safety,Error,Errors,0,"Errors seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/pull/12239:0,usability,Error,Errors,0,"Errors seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12239
https://github.com/root-project/root/issues/12240:72,availability,error,error,72,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:197,availability,error,error,197,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:127,deployability,modul,modulemap,127,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:127,modifiability,modul,modulemap,127,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:72,performance,error,error,72,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:197,performance,error,error,197,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:72,safety,error,error,72,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:127,safety,modul,modulemap,127,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:186,safety,avoid,avoid,186,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:197,safety,error,error,197,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:72,usability,error,error,72,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:197,usability,error,error,197,"https://github.com/root-project/root/pull/11874 . (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:45,availability,error,error,45,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,availability,operat,operator,126,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:6,deployability,updat,updating,6,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:92,deployability,fail,fails,92,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:137,deployability,Build,Build,137,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:143,deployability,log,log,143,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:190,deployability,artifact,artifacts,190,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,deployability,integr,integration,213,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:241,deployability,build,build,241,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:247,deployability,log,log,247,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,integrability,integr,integration,213,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,interoperability,integr,integration,213,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,modifiability,integr,integration,213,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:45,performance,error,error,45,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:92,reliability,fail,fails,92,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,reliability,integr,integration,213,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:6,safety,updat,updating,6,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:45,safety,error,error,45,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:143,safety,log,log,143,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:247,safety,log,log,247,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:6,security,updat,updating,6,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:143,security,log,log,143,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,security,integr,integration,213,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:247,security,log,log,247,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:143,testability,log,log,143,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,testability,integr,integration,213,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:247,testability,log,log,247,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:45,usability,error,error,45,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:132,availability,error,error,132,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:213,availability,operat,operator,213,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:362,availability,error,error,362,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:8,deployability,updat,updating,8,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:179,deployability,fail,fails,179,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:224,deployability,Build,Build,224,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:230,deployability,log,log,230,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:277,deployability,artifact,artifacts,277,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:300,deployability,integr,integration,300,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:328,deployability,build,build,328,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:334,deployability,log,log,334,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:300,integrability,integr,integration,300,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:300,interoperability,integr,integration,300,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:300,modifiability,integr,integration,300,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:132,performance,error,error,132,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:362,performance,error,error,362,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:179,reliability,fail,fails,179,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:300,reliability,integr,integration,300,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:8,safety,updat,updating,8,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:132,safety,error,error,132,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:230,safety,log,log,230,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:334,safety,log,log,334,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:362,safety,error,error,362,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:8,security,updat,updating,8,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:230,security,log,log,230,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:300,security,integr,integration,300,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:334,security,log,log,334,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:230,testability,log,log,230,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:300,testability,integr,integration,300,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:334,testability,log,log,334,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:132,usability,error,error,132,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:362,usability,error,error,362,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:21,availability,ping,ping,21,@Axel-Naumann gentle ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:34,usability,help,helps,34,"@iarspider, can you check if that helps: https://github.com/root-project/root/pull/12276",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:38,availability,error,errors,38,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:50,deployability,build,build,50,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:56,deployability,log,log,56,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:103,deployability,artifact,artifacts,103,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,deployability,integr,integration,126,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:154,deployability,build,build,154,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:160,deployability,log,log,160,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:253,deployability,instal,install,253,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,integrability,integr,integration,126,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,interoperability,integr,integration,126,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,modifiability,integr,integration,126,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:38,performance,error,errors,38,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,reliability,integr,integration,126,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:38,safety,error,errors,38,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:56,safety,log,log,56,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:160,safety,log,log,160,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:178,safety,test,testing,178,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:56,security,log,log,56,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,security,integr,integration,126,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:160,security,log,log,160,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:56,testability,log,log,56,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:126,testability,integr,integration,126,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:160,testability,log,log,160,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:178,testability,test,testing,178,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:38,usability,error,errors,38,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:366,availability,error,error,366,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:57,deployability,build,build,57,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:348,deployability,modul,modulemap,348,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:373,deployability,modul,module,373,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:137,energy efficiency,current,current,137,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:348,modifiability,modul,modulemap,348,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:373,modifiability,modul,module,373,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:366,performance,error,error,366,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:348,safety,modul,modulemap,348,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:366,safety,error,error,366,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:373,safety,modul,module,373,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:366,usability,error,error,366,"Let me add ATLAS reproducer based on the LCG dev3 Athena build:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena . % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. *** Break *** segmentation violation. Marcin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:35,deployability,patch,patch,35,"Hi @vgvassilev! We were wrong, the patch works. Thanks for the fix! :). (I commented before, but I cannot see the comment anymore...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:35,safety,patch,patch,35,"Hi @vgvassilev! We were wrong, the patch works. Thanks for the fix! :). (I commented before, but I cannot see the comment anymore...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:35,security,patch,patch,35,"Hi @vgvassilev! We were wrong, the patch works. Thanks for the fix! :). (I commented before, but I cannot see the comment anymore...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:37,deployability,patch,patch,37,"> Hi @vgvassilev! We were wrong, the patch works. Thanks for the fix! :) (I commented before, but I cannot see the comment anymore...). Oh, great - I was wondering what was wrong... I will revert my recent changes to the PR and merge it in...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:37,safety,patch,patch,37,"> Hi @vgvassilev! We were wrong, the patch works. Thanks for the fix! :) (I commented before, but I cannot see the comment anymore...). Oh, great - I was wondering what was wrong... I will revert my recent changes to the PR and merge it in...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:37,security,patch,patch,37,"> Hi @vgvassilev! We were wrong, the patch works. Thanks for the fix! :) (I commented before, but I cannot see the comment anymore...). Oh, great - I was wondering what was wrong... I will revert my recent changes to the PR and merge it in...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:179,deployability,updat,updated,179,"@vgvassilev just to clarify things: [this](https://github.com/root-project/root/pull/12276/commits/f945434a97c345a7a26ba5cc55db836441c53ed1) did not work, but after you (and we) [updated](https://github.com/root-project/root/pull/12276/commits/0f4862851e42a1221183608476a341b39c18587a) the patch, it worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:290,deployability,patch,patch,290,"@vgvassilev just to clarify things: [this](https://github.com/root-project/root/pull/12276/commits/f945434a97c345a7a26ba5cc55db836441c53ed1) did not work, but after you (and we) [updated](https://github.com/root-project/root/pull/12276/commits/0f4862851e42a1221183608476a341b39c18587a) the patch, it worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:179,safety,updat,updated,179,"@vgvassilev just to clarify things: [this](https://github.com/root-project/root/pull/12276/commits/f945434a97c345a7a26ba5cc55db836441c53ed1) did not work, but after you (and we) [updated](https://github.com/root-project/root/pull/12276/commits/0f4862851e42a1221183608476a341b39c18587a) the patch, it worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:290,safety,patch,patch,290,"@vgvassilev just to clarify things: [this](https://github.com/root-project/root/pull/12276/commits/f945434a97c345a7a26ba5cc55db836441c53ed1) did not work, but after you (and we) [updated](https://github.com/root-project/root/pull/12276/commits/0f4862851e42a1221183608476a341b39c18587a) the patch, it worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:179,security,updat,updated,179,"@vgvassilev just to clarify things: [this](https://github.com/root-project/root/pull/12276/commits/f945434a97c345a7a26ba5cc55db836441c53ed1) did not work, but after you (and we) [updated](https://github.com/root-project/root/pull/12276/commits/0f4862851e42a1221183608476a341b39c18587a) the patch, it worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:290,security,patch,patch,290,"@vgvassilev just to clarify things: [this](https://github.com/root-project/root/pull/12276/commits/f945434a97c345a7a26ba5cc55db836441c53ed1) did not work, but after you (and we) [updated](https://github.com/root-project/root/pull/12276/commits/0f4862851e42a1221183608476a341b39c18587a) the patch, it worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:139,energy efficiency,clock,clock,139,"is what fixed it (not obvious to me how @iarspider picked up the commit before it seems to have gotten to this pr, but ok.. maybe someones clock is wrong?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:0,safety,Test,Testing,0,Testing at https://github.com/cms-sw/cmsdist/pull/8320,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:0,testability,Test,Testing,0,Testing at https://github.com/cms-sw/cmsdist/pull/8320,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:0,safety,Test,Tests,0,Tests just finished successfully. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:0,testability,Test,Tests,0,Tests just finished successfully. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:31,deployability,build,builds,31,Sounds great. I assume the lcg builds are fixed too. Let’s close this issue now. Feel free to reopen if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:59,usability,close,close,59,Sounds great. I assume the lcg builds are fixed too. Let’s close this issue now. Feel free to reopen if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:50,deployability,patch,patches,50,"@vgvassilev could you backport this into v6-28-00-patches, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:50,safety,patch,patches,50,"@vgvassilev could you backport this into v6-28-00-patches, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:50,security,patch,patches,50,"@vgvassilev could you backport this into v6-28-00-patches, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:500,availability,error,error,500,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:69,deployability,build,build,69,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:134,deployability,patch,patches,134,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:482,deployability,modul,modulemap,482,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:507,deployability,modul,module,507,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:579,deployability,modul,module,579,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:655,deployability,releas,releases,655,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:767,deployability,modul,module,767,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:272,energy efficiency,current,current,272,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:744,integrability,sub,submodule,744,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:482,modifiability,modul,modulemap,482,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:507,modifiability,modul,module,507,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:579,modifiability,modul,module,579,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:767,modifiability,modul,module,767,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:500,performance,error,error,500,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:134,safety,patch,patches,134,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:482,safety,modul,modulemap,482,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:500,safety,error,error,500,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:507,safety,modul,module,507,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:579,safety,modul,module,579,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:767,safety,modul,module,767,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:134,security,patch,patches,134,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:500,usability,error,error,500,"Hi @vgvassilev , . This problem crept back into both dev3 (since Mon build) and dev4 LCG nightlies. So it's both ROOT master and 6.28-patches. It can be reproduced the same way as I reported before:. % source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/current/AtlasSetup/scripts/asetup.sh master--dev3LCG,latest,Athena. % root. root [0] new xAOD::IParticle();. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Tue/ROOT/HEAD/x86_64-centos7-gcc11-opt/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'. module ""bits/uses_allocator_args.h"" [optional] {. ^. /cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/include/c++/11.3.0/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc. *** Break *** segmentation violation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:97,deployability,patch,patches,97,"C++20 is taking a toll on us... Thanks for the fix, @vgvassilev - merged into master an v6-28-00-patches. @Nowakus could you confirm that the next nightlies look good, so I can tag v6.28/04 tomorrow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:97,safety,patch,patches,97,"C++20 is taking a toll on us... Thanks for the fix, @vgvassilev - merged into master an v6-28-00-patches. @Nowakus could you confirm that the next nightlies look good, so I can tag v6.28/04 tomorrow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:97,security,patch,patches,97,"C++20 is taking a toll on us... Thanks for the fix, @vgvassilev - merged into master an v6-28-00-patches. @Nowakus could you confirm that the next nightlies look good, so I can tag v6.28/04 tomorrow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:125,usability,confirm,confirm,125,"C++20 is taking a toll on us... Thanks for the fix, @vgvassilev - merged into master an v6-28-00-patches. @Nowakus could you confirm that the next nightlies look good, so I can tag v6.28/04 tomorrow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12240:0,usability,Confirm,Confirmed,0,"Confirmed fixed, thanks, @Nowakus @elmsheus",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12240
https://github.com/root-project/root/issues/12242:30,deployability,provis,provision,30,"Looking into this. There is a provision for recomputing the bounding boxes and voxel structures for hierarchies of assemblies affected by TGeoPhysicalNode::Align, I have to check what gets wrong there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:466,availability,operat,operation,466,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1312,availability,recov,recover,1312,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1328,availability,consist,consistency,1328,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:150,deployability,log,logic,150,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1201,deployability,automat,automatically,1201,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1312,deployability,recov,recover,1312,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1312,reliability,recov,recover,1312,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1399,reliability,doe,does,1399,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:150,safety,log,logic,150,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:495,safety,compl,complex,495,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1312,safety,recov,recover,1312,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:150,security,log,logic,150,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:495,security,compl,complex,495,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1312,security,recov,recover,1312,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:150,testability,log,logic,150,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1201,testability,automat,automatically,1201,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:555,usability,navigat,navigation,555,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:674,usability,behavi,behavior,674,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1304,usability,user,user,1304,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:1328,usability,consist,consistency,1328,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:. ```. TIter nextv(gGeoManager->GetListOfVolumes());. TGeoVolume *vol;. while ((vol = (TGeoVolume*)nextv())) {. if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();. auto finder = vol->GetVoxels();. if (finder && finder->NeedRebuild()) {. finder->Voxelize();. vol->FindOverlaps();. }. }. ```. I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:554,availability,error,error,554,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:554,performance,error,error,554,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:279,reliability,doe,does,279,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:23,safety,test,tested,23,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:84,safety,Test,Test,84,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:230,safety,test,test-suite,230,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:304,safety,test,tested,304,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:531,safety,test,test,531,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:554,safety,error,error,554,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:98,security,ident,identical,98,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:23,testability,test,tested,23,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:84,testability,Test,Test,84,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:230,testability,test,test-suite,230,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:304,testability,test,tested,304,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:531,testability,test,test,531,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:15,usability,hint,hint,15,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:311,usability,behavi,behavior,311,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:554,usability,error,error,554,"Thanks for the hint, I tested the following two cases and did not see a problem:. - Test example, identical outcome as our quick and dirty fix, as I expected. - Replacing the fix in the FairRoot class by this and re-running their test-suite, this ran through successfully (so it does not break any other tested behavior of them). So I would think that your proposal would be perfect for us, as I had anyway introduced a `RefreshPhysicalNodes` just before adding the call to our fix. @fuhlig1 Do you think I should also do the full test with the original error report? (= removing the fix in FairRoot + replacing the fix in Cbmroot by this block + re-running the mCBM macro) . Or would what I already checked be enough from our side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:174,availability,ping,pinged,174,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:253,availability,slo,slow,253,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:4,deployability,patch,patch,4,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:225,deployability,releas,releases,225,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:321,deployability,automat,automatically,321,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:253,reliability,slo,slow,253,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:4,safety,patch,patch,4,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:365,safety,test,test,365,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:4,security,patch,patch,4,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:321,testability,automat,automatically,321,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:365,testability,test,test,365,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/issues/12242:55,usability,user,users,55,"The patch is in fact working quite well and one of our users just found a case where it is needed because our original solution was too coarse. We covered it on our side (cf pinged PR on FairRoot) as our adoption of new ROOT releases is typically quite slow, but I think it would indeed be a nice feature to have it done automatically on refresh (as far as I could test it will not hurt even if for some transition period in the future we have it executed once both in ROOT and FairRoot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12242
https://github.com/root-project/root/pull/12243:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12243
https://github.com/root-project/root/pull/12247:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_xrootd=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12247
https://github.com/root-project/root/pull/12247:8,deployability,fail,failed,8,"Windows failed (openssl not found), but xrootd doesn't support Windows, so this should be fine to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12247
https://github.com/root-project/root/pull/12247:8,reliability,fail,failed,8,"Windows failed (openssl not found), but xrootd doesn't support Windows, so this should be fine to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12247
https://github.com/root-project/root/pull/12247:47,reliability,doe,doesn,47,"Windows failed (openssl not found), but xrootd doesn't support Windows, so this should be fine to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12247
https://github.com/root-project/root/pull/12247:55,usability,support,support,55,"Windows failed (openssl not found), but xrootd doesn't support Windows, so this should be fine to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12247
https://github.com/root-project/root/pull/12249:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12249
https://github.com/root-project/root/pull/12252:12,availability,ping,ping,12,@vgvassilev ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12252
https://github.com/root-project/root/pull/12252:4,availability,failur,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12252
https://github.com/root-project/root/pull/12252:4,deployability,fail,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12252
https://github.com/root-project/root/pull/12252:4,performance,failur,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12252
https://github.com/root-project/root/pull/12252:4,reliability,fail,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12252
https://github.com/root-project/root/pull/12256:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12256:5,availability,failur,failures,5,Test failures do not seem related at first glance. Might need a separate investigation. Rerunning the CI for now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12256:5,deployability,fail,failures,5,Test failures do not seem related at first glance. Might need a separate investigation. Rerunning the CI for now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12256:5,performance,failur,failures,5,Test failures do not seem related at first glance. Might need a separate investigation. Rerunning the CI for now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12256:5,reliability,fail,failures,5,Test failures do not seem related at first glance. Might need a separate investigation. Rerunning the CI for now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12256:0,safety,Test,Test,0,Test failures do not seem related at first glance. Might need a separate investigation. Rerunning the CI for now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12256:0,testability,Test,Test,0,Test failures do not seem related at first glance. Might need a separate investigation. Rerunning the CI for now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12256:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12256
https://github.com/root-project/root/pull/12257:74,modifiability,inherit,inheritance,74,Thanks! That's good we know now the reason why there was this complicated inheritance structure to begin with,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:62,safety,compl,complicated,62,Thanks! That's good we know now the reason why there was this complicated inheritance structure to begin with,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:62,security,compl,complicated,62,Thanks! That's good we know now the reason why there was this complicated inheritance structure to begin with,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:65,deployability,fail,failing,65,I locally see `minuit2_testMinimizer` and `test-fit-testFitPerf` failing after this PR; Jenkins seems to agree across various platforms (see above). @guitargeek could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:126,interoperability,platform,platforms,126,I locally see `minuit2_testMinimizer` and `test-fit-testFitPerf` failing after this PR; Jenkins seems to agree across various platforms (see above). @guitargeek could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:65,reliability,fail,failing,65,I locally see `minuit2_testMinimizer` and `test-fit-testFitPerf` failing after this PR; Jenkins seems to agree across various platforms (see above). @guitargeek could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:43,safety,test,test-fit-testFitPerf,43,I locally see `minuit2_testMinimizer` and `test-fit-testFitPerf` failing after this PR; Jenkins seems to agree across various platforms (see above). @guitargeek could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:43,testability,test,test-fit-testFitPerf,43,I locally see `minuit2_testMinimizer` and `test-fit-testFitPerf` failing after this PR; Jenkins seems to agree across various platforms (see above). @guitargeek could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:61,deployability,manag,managed,61,"Yes, thanks, I have opened a fixup commit. Sorry for this, I managed my commit history badly and thought I only changed something trivial after the last successful test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:61,energy efficiency,manag,managed,61,"Yes, thanks, I have opened a fixup commit. Sorry for this, I managed my commit history badly and thought I only changed something trivial after the last successful test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:61,safety,manag,managed,61,"Yes, thanks, I have opened a fixup commit. Sorry for this, I managed my commit history badly and thought I only changed something trivial after the last successful test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:164,safety,test,test,164,"Yes, thanks, I have opened a fixup commit. Sorry for this, I managed my commit history badly and thought I only changed something trivial after the last successful test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12257:164,testability,test,test,164,"Yes, thanks, I have opened a fixup commit. Sorry for this, I managed my commit history badly and thought I only changed something trivial after the last successful test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12257
https://github.com/root-project/root/pull/12258:11,deployability,build,build,11,@phsft-bot build just on mac12/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12258
https://github.com/root-project/root/pull/12259:75,deployability,updat,updated,75,> The handling `!defined( __CINT__) || defined (__MAKECINT__)` needs to be updated. (and handling of main unhiding needs to be confirmed). I can do that in a separate commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:75,safety,updat,updated,75,> The handling `!defined( __CINT__) || defined (__MAKECINT__)` needs to be updated. (and handling of main unhiding needs to be confirmed). I can do that in a separate commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:75,security,updat,updated,75,> The handling `!defined( __CINT__) || defined (__MAKECINT__)` needs to be updated. (and handling of main unhiding needs to be confirmed). I can do that in a separate commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:127,usability,confirm,confirmed,127,> The handling `!defined( __CINT__) || defined (__MAKECINT__)` needs to be updated. (and handling of main unhiding needs to be confirmed). I can do that in a separate commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:129,energy efficiency,current,current,129,"> I can do that in a separate commit. If you mean commit that sounds good. If you mean PR, this is not a good option as the code current in the PR is 'wrong' (change code used in ways that are not intended). Namely the changes:. ```. < #if !defined( __CINT__) || defined (__MAKECINT__)"". > #if defined (__MAKECINT__). ``` . changes from ""use during compilation and dictionary generation"" to ""use ONLY during dictionary generation (and NOT during regular compilation)""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:4,integrability,coupl,couple,4,> A couple of stray file have been inadvertently introduced. Nice catch. git did something I did not expect it to do when rebasing. Should be fixed now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:4,modifiability,coupl,couple,4,> A couple of stray file have been inadvertently introduced. Nice catch. git did something I did not expect it to do when rebasing. Should be fixed now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:4,testability,coupl,couple,4,> A couple of stray file have been inadvertently introduced. Nice catch. git did something I did not expect it to do when rebasing. Should be fixed now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/pull/12259:9,availability,ping,ping,9,"@pcanal, ping.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12259
https://github.com/root-project/root/issues/12260:48,safety,compl,complained,48,"@Axel-Naumann @pcanal note that if TTree/TChain complained in case of non-existing entry access in friend trees it would have made the situation much better ( #9137 , #7713 ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12260
https://github.com/root-project/root/issues/12260:48,security,compl,complained,48,"@Axel-Naumann @pcanal note that if TTree/TChain complained in case of non-existing entry access in friend trees it would have made the situation much better ( #9137 , #7713 ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12260
https://github.com/root-project/root/issues/12260:89,security,access,access,89,"@Axel-Naumann @pcanal note that if TTree/TChain complained in case of non-existing entry access in friend trees it would have made the situation much better ( #9137 , #7713 ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12260
https://github.com/root-project/root/pull/12261:13,deployability,build,build,13,". @phsft-bot build just on ROOT-ubuntu2004/default, with flags -Dtmva-sofie=On . -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12261
https://github.com/root-project/root/pull/12261:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/default with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12261
https://github.com/root-project/root/pull/12261:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/default with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12261
https://github.com/root-project/root/pull/12264:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12264
https://github.com/root-project/root/pull/12264:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12264
https://github.com/root-project/root/pull/12264:8,availability,failur,failure,8,The mac failure were due to out-of-disk-space issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12264
https://github.com/root-project/root/pull/12264:8,deployability,fail,failure,8,The mac failure were due to out-of-disk-space issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12264
https://github.com/root-project/root/pull/12264:8,performance,failur,failure,8,The mac failure were due to out-of-disk-space issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12264
https://github.com/root-project/root/pull/12264:35,performance,disk,disk-space,35,The mac failure were due to out-of-disk-space issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12264
https://github.com/root-project/root/pull/12264:8,reliability,fail,failure,8,The mac failure were due to out-of-disk-space issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12264
https://github.com/root-project/root/issues/12268:21,usability,help,help,21,In bet @bellenot can help! He's in the office opposite of mine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12268
https://github.com/root-project/root/pull/12269:381,deployability,Updat,UpdateFormulaLeaves,381,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:931,deployability,Updat,UpdateFormulaLeaves,931,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:1453,deployability,Updat,UpdateFormulaLeaves,1453,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:275,integrability,pub,public,275,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:543,integrability,Abstract,Abstract,543,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:552,integrability,interfac,interface,552,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:803,integrability,pub,public,803,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:1334,integrability,pub,public,1334,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:6,interoperability,format,format,6,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:552,interoperability,interfac,interface,552,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:543,modifiability,Abstract,Abstract,543,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:552,modifiability,interfac,interface,552,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:381,safety,Updat,UpdateFormulaLeaves,381,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:931,safety,Updat,UpdateFormulaLeaves,931,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:1453,safety,Updat,UpdateFormulaLeaves,1453,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:381,security,Updat,UpdateFormulaLeaves,381,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:931,security,Updat,UpdateFormulaLeaves,931,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:1453,security,Updat,UpdateFormulaLeaves,1453,"clang-format wants me to do things that I don't want to do:. ```diff. diff --git a/tree/tree/inc/TVirtualIndex.h b/tree/tree/inc/TVirtualIndex.h. index c4753fac14..7f38cb2ca0 100644. --- a/tree/tree/inc/TVirtualIndex.h. +++ b/tree/tree/inc/TVirtualIndex.h. @@ -45,7 +45,7 @@ public:. virtual Long64_t GetN() const = 0;. virtual TTree *GetTree() const {return fTree;}. virtual void UpdateFormulaLeaves(const TTree *parent) = 0;. - virtual void SetTree(TTree *T) = 0;. + virtual void SetTree(TTree *T) = 0;. ClassDefOverride(TVirtualIndex,1); //Abstract interface for Tree Index. };. diff --git a/tree/treeplayer/inc/TChainIndex.h b/tree/treeplayer/inc/TChainIndex.h. index 83bfba1f30..7eca7b529f 100644. --- a/tree/treeplayer/inc/TChainIndex.h. +++ b/tree/treeplayer/inc/TChainIndex.h. @@ -88,7 +88,7 @@ public:. virtual Long64_t GetN() const {return fEntries.size();}. virtual Bool_t IsValidFor(const TTree *parent);. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TChainIndex,1) //A Tree Index with majorname and minorname. };. diff --git a/tree/treeplayer/inc/TTreeIndex.h b/tree/treeplayer/inc/TTreeIndex.h. index d56ad5c3ac..218f21403a 100644. --- a/tree/treeplayer/inc/TTreeIndex.h. +++ b/tree/treeplayer/inc/TTreeIndex.h. @@ -68,7 +68,7 @@ public:. virtual Bool_t IsValidFor(const TTree *parent);. virtual void Print(Option_t *option="""") const;. virtual void UpdateFormulaLeaves(const TTree *parent);. - virtual void SetTree(TTree *T);. + virtual void SetTree(TTree *T);. ClassDef(TTreeIndex,2); //A Tree Index with majorname and minorname. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:8,interoperability,format,format,8,"> clang-format wants me to do things that I don't want to do:. clang-format does not support the correct format (the one we want), so here you have to ignore clang-format (please :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:69,interoperability,format,format,69,"> clang-format wants me to do things that I don't want to do:. clang-format does not support the correct format (the one we want), so here you have to ignore clang-format (please :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:105,interoperability,format,format,105,"> clang-format wants me to do things that I don't want to do:. clang-format does not support the correct format (the one we want), so here you have to ignore clang-format (please :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:164,interoperability,format,format,164,"> clang-format wants me to do things that I don't want to do:. clang-format does not support the correct format (the one we want), so here you have to ignore clang-format (please :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:76,reliability,doe,does,76,"> clang-format wants me to do things that I don't want to do:. clang-format does not support the correct format (the one we want), so here you have to ignore clang-format (please :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:85,usability,support,support,85,"> clang-format wants me to do things that I don't want to do:. clang-format does not support the correct format (the one we want), so here you have to ignore clang-format (please :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/pull/12269:20,interoperability,conflict,conflicts,20,Force-pushed to fix conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12269
https://github.com/root-project/root/issues/12271:51,deployability,log,logically,51,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:206,deployability,build,build,206,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:335,energy efficiency,current,currently,335,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:51,safety,log,logically,51,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:212,safety,test,tests,212,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:324,safety,test,test,324,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:587,safety,compl,complex,587,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:51,security,log,logically,51,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:587,security,compl,complex,587,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:51,testability,log,logically,51,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:212,testability,test,tests,212,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:324,testability,test,test,324,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12271:561,usability,workflow,workflows,561,"In case a developer has 2 PRs that belong together logically, one for root and one for roottest, no change is needed, because as long as the branches have the same name, the CI matches the two for the root build+tests. This is the most common case, by far. Changes can be proposed to roottest only via a PR, and in order to test them, currently, one needs a ""placeholder PR"", created starting from a branch with the same name of the one used for the roottest PR. . However, the latter case is far rarer than the former one. The work at the level of runners and workflows would be rather complex to achieve the aforementioned goal, when we have a solution, that has to be applied rarely. I am closing this item as ""Won't fix"" (not needed would fit better)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12271
https://github.com/root-project/root/issues/12272:10,deployability,build,building,10,Aren't we building those now? Is this item meant to refer to something else?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12272
https://github.com/root-project/root/pull/12274:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/default with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:91,integrability,translat,translation,91,"No there is no plot to show, this just performing a minimization of a function and it is a translation of the same existing tutorial in C++. We could maybe make a nice plot showing the steps to converge to the minimum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:91,interoperability,translat,translation,91,"No there is no plot to show, this just performing a minimization of a function and it is a translation of the same existing tutorial in C++. We could maybe make a nice plot showing the steps to converge to the minimum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:39,performance,perform,performing,39,"No there is no plot to show, this just performing a minimization of a function and it is a translation of the same existing tutorial in C++. We could maybe make a nice plot showing the steps to converge to the minimum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:39,usability,perform,performing,39,"No there is no plot to show, this just performing a minimization of a function and it is a translation of the same existing tutorial in C++. We could maybe make a nice plot showing the steps to converge to the minimum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:52,usability,minim,minimization,52,"No there is no plot to show, this just performing a minimization of a function and it is a translation of the same existing tutorial in C++. We could maybe make a nice plot showing the steps to converge to the minimum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:210,usability,minim,minimum,210,"No there is no plot to show, this just performing a minimization of a function and it is a translation of the same existing tutorial in C++. We could maybe make a nice plot showing the steps to converge to the minimum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:86,deployability,version,version,86,Thank you very much @vepadulano for all the comments. I have included them in the new version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:86,integrability,version,version,86,Thank you very much @vepadulano for all the comments. I have included them in the new version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:86,modifiability,version,version,86,Thank you very much @vepadulano for all the comments. I have included them in the new version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17 -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17 -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12274:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17 -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12274
https://github.com/root-project/root/pull/12276:11,integrability,messag,message,11,The commit message seems pretty clear to me. Can you suggest something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:11,interoperability,messag,message,11,The commit message seems pretty clear to me. Can you suggest something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:32,usability,clear,clear,32,The commit message seems pretty clear to me. Can you suggest something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:79,availability,failur,failure,79,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:331,availability,error,error,331,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:773,availability,error,error,773,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:883,availability,Error,Error,883,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:890,availability,Error,Error,890,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1017,availability,Error,Error,1017,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:79,deployability,fail,failure,79,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:239,deployability,build,build,239,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:293,deployability,build,build,293,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:313,deployability,modul,modulemap,313,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:338,deployability,modul,module,338,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:402,deployability,modul,module,402,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:517,deployability,modul,module,517,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:682,deployability,build,build,682,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:736,deployability,build,build,736,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:790,deployability,build,build,790,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:796,deployability,modul,module,796,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:983,deployability,build,build,983,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:214,energy efficiency,Core,Core,214,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:896,energy efficiency,load,loading,896,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:955,energy efficiency,core,core,955,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:999,energy efficiency,core,core,999,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:494,integrability,sub,submodule,494,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:313,modifiability,modul,modulemap,313,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:338,modifiability,modul,module,338,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:402,modifiability,modul,module,402,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:517,modifiability,modul,module,517,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:796,modifiability,modul,module,796,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:79,performance,failur,failure,79,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:331,performance,error,error,331,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:773,performance,error,error,773,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:883,performance,Error,Error,883,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:890,performance,Error,Error,890,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:896,performance,load,loading,896,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1017,performance,Error,Error,1017,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:36,reliability,diagno,diagnostic,36,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:79,reliability,fail,failure,79,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:313,safety,modul,modulemap,313,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:331,safety,error,error,331,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:338,safety,modul,module,338,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:402,safety,modul,module,402,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:517,safety,modul,module,517,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:773,safety,error,error,773,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:796,safety,modul,module,796,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:883,safety,Error,Error,883,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:890,safety,Error,Error,890,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1017,safety,Error,Error,1017,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:36,testability,diagno,diagnostic,36,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:60,testability,understand,understand,60,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:54,usability,help,helps,54,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:331,usability,error,error,331,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:773,usability,error,error,773,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:883,usability,Error,Error,883,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:890,usability,Error,Error,890,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1017,usability,Error,Error,1017,"@pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. ```. [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. module ""bits/ranges_base.h"" {. ^. /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. ^. In file included from input_line_3:2:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:86,deployability,log,log,86,"(And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:30,safety,reme,remembering,30,"(And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:86,safety,log,log,86,"(And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:86,security,log,log,86,"(And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:86,testability,log,log,86,"(And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:197,availability,servic,services,197,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:88,deployability,log,log,88,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:197,deployability,servic,services,197,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:162,integrability,messag,message,162,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:197,integrability,servic,services,197,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:162,interoperability,messag,message,162,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:197,modifiability,servic,services,197,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:32,safety,reme,remembering,32,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:88,safety,log,log,88,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:88,security,log,log,88,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:88,testability,log,log,88,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:81,availability,failur,failure,81,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:347,availability,error,error,347,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:807,availability,error,error,807,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:927,availability,Error,Error,927,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:934,availability,Error,Error,934,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1063,availability,Error,Error,1063,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1151,availability,error,error,1151,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:81,deployability,fail,failure,81,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:255,deployability,build,build,255,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:309,deployability,build,build,309,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:329,deployability,modul,modulemap,329,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:354,deployability,modul,module,354,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:420,deployability,modul,module,420,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:539,deployability,modul,module,539,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:716,deployability,build,build,716,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:770,deployability,build,build,770,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:824,deployability,build,build,824,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:830,deployability,modul,module,830,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1029,deployability,build,build,1029,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:224,energy efficiency,Core,Core,224,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:940,energy efficiency,load,loading,940,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1001,energy efficiency,core,core,1001,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1045,energy efficiency,core,core,1045,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:516,integrability,sub,submodule,516,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1090,integrability,messag,message,1090,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1202,integrability,messag,message,1202,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1090,interoperability,messag,message,1090,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1202,interoperability,messag,message,1202,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:329,modifiability,modul,modulemap,329,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:354,modifiability,modul,module,354,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:420,modifiability,modul,module,420,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:539,modifiability,modul,module,539,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:830,modifiability,modul,module,830,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:81,performance,failur,failure,81,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:347,performance,error,error,347,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:807,performance,error,error,807,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:927,performance,Error,Error,927,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:934,performance,Error,Error,934,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:940,performance,load,loading,940,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1063,performance,Error,Error,1063,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1151,performance,error,error,1151,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:38,reliability,diagno,diagnostic,38,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:81,reliability,fail,failure,81,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:329,safety,modul,modulemap,329,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:347,safety,error,error,347,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:354,safety,modul,module,354,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:420,safety,modul,module,420,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:539,safety,modul,module,539,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:807,safety,error,error,807,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:830,safety,modul,module,830,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:927,safety,Error,Error,927,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:934,safety,Error,Error,934,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1063,safety,Error,Error,1063,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1151,safety,error,error,1151,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:38,testability,diagno,diagnostic,38,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:62,testability,understand,understand,62,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:56,usability,help,helps,56,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:347,usability,error,error,347,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:807,usability,error,error,807,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:927,usability,Error,Error,927,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:934,usability,Error,Error,934,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1063,usability,Error,Error,1063,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1151,usability,error,error,1151,"> @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > . > ```. > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > module ""bits/ranges_base.h"" {. > ^. > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > ^. > In file included from input_line_3:2:. > . > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > #include ""TIsAProxy.h"". > ~~~~~~~~^~~~~~~~~~~~~. > . > Error: Error loading the default rootcling header files. > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > ```. The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:83,availability,failur,failure,83,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:353,availability,error,error,353,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:829,availability,error,error,829,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:957,availability,Error,Error,957,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:964,availability,Error,Error,964,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1095,availability,Error,Error,1095,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1191,availability,error,error,1191,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:83,deployability,fail,failure,83,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:261,deployability,build,build,261,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:315,deployability,build,build,315,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:335,deployability,modul,modulemap,335,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:360,deployability,modul,module,360,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:428,deployability,modul,module,428,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:551,deployability,modul,module,551,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:738,deployability,build,build,738,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:792,deployability,build,build,792,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:846,deployability,build,build,846,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:852,deployability,modul,module,852,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1061,deployability,build,build,1061,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:226,energy efficiency,Core,Core,226,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:970,energy efficiency,load,loading,970,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1033,energy efficiency,core,core,1033,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1077,energy efficiency,core,core,1077,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:528,integrability,sub,submodule,528,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1130,integrability,messag,message,1130,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1242,integrability,messag,message,1242,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1342,integrability,messag,message,1342,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1130,interoperability,messag,message,1130,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1242,interoperability,messag,message,1242,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1342,interoperability,messag,message,1342,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:335,modifiability,modul,modulemap,335,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:360,modifiability,modul,module,360,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:428,modifiability,modul,module,428,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:551,modifiability,modul,module,551,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:852,modifiability,modul,module,852,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:83,performance,failur,failure,83,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:353,performance,error,error,353,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:829,performance,error,error,829,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:957,performance,Error,Error,957,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:964,performance,Error,Error,964,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:970,performance,load,loading,970,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1095,performance,Error,Error,1095,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1191,performance,error,error,1191,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:40,reliability,diagno,diagnostic,40,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:83,reliability,fail,failure,83,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:335,safety,modul,modulemap,335,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:353,safety,error,error,353,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:360,safety,modul,module,360,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:428,safety,modul,module,428,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:551,safety,modul,module,551,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:829,safety,error,error,829,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:852,safety,modul,module,852,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:957,safety,Error,Error,957,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:964,safety,Error,Error,964,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1095,safety,Error,Error,1095,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1191,safety,error,error,1191,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:40,testability,diagno,diagnostic,40,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:64,testability,understand,understand,64,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:58,usability,help,helps,58,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:353,usability,error,error,353,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:829,usability,error,error,829,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:957,usability,Error,Error,957,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:964,usability,Error,Error,964,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1095,usability,Error,Error,1095,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1191,usability,error,error,1191,"> > @pcanal proposes to add the literal diagnostic, which helps understand ""recent failure"" in two years, and which allows to search if we run into this again, e.g. in 6-26:. > > ```. > > [ 70%] Generating G__Core.cxx, ../lib/Core.pcm. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:491:10: error: module 'std.bits/ranges_base.h' requires feature 'cplusplus20'. > > module ""bits/ranges_base.h"" {. > > ^. > > /usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here. > > #include <bits/ranges_base.h> // enable_borrowed_range, enable_view. > > ^. > > In file included from input_line_3:2:. > > . > > /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. > > #include ""TIsAProxy.h"". > > ~~~~~~~~^~~~~~~~~~~~~. > > . > > Error: Error loading the default rootcling header files. > > gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:474: core/G__Core.cxx] Error 1. > > ```. > . > The commit message says exactly that. I don't think I want to paste the error to say actually the same thing as the commit message says. I think I see where the confusion comes from, now. I added the PR title in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:55,availability,failur,failure,55,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:348,availability,failur,failure,348,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:599,availability,error,error,599,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:654,availability,error,error,654,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1075,availability,error,error,1075,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:55,deployability,fail,failure,55,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:304,deployability,log,log,304,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:348,deployability,fail,failure,348,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:388,deployability,modul,module,388,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:511,deployability,modul,modulemap,511,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:534,deployability,modul,module,534,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:569,deployability,log,log,569,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:819,deployability,stack,stack,819,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:920,deployability,modul,module,920,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:984,deployability,build,build,984,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1038,deployability,build,build,1038,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1092,deployability,build,build,1092,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1098,deployability,modul,module,1098,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1408,deployability,updat,update,1408,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1419,deployability,log,log,1419,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1462,deployability,updat,updating,1462,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1535,deployability,fail,fails,1535,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1655,deployability,log,log,1655,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:296,energy efficiency,current,current,296,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1640,energy efficiency,current,current,1640,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:751,integrability,messag,message,751,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:897,integrability,sub,submodule,897,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:751,interoperability,messag,message,751,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:388,modifiability,modul,module,388,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:511,modifiability,modul,modulemap,511,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:534,modifiability,modul,module,534,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:920,modifiability,modul,module,920,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1098,modifiability,modul,module,1098,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:55,performance,failur,failure,55,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:283,performance,time,times,283,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:348,performance,failur,failure,348,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:599,performance,error,error,599,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:654,performance,error,error,654,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1075,performance,error,error,1075,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1328,performance,time,time,1328,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1376,performance,time,time,1376,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:55,reliability,fail,failure,55,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:166,reliability,diagno,diagnostic,166,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:348,reliability,fail,failure,348,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:439,reliability,doe,does,439,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1245,reliability,diagno,diagnostic,1245,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1535,reliability,fail,fails,1535,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:1748,reliability,diagno,diagnostic,1748,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:304,safety,log,log,304,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
https://github.com/root-project/root/pull/12276:367,safety,avoid,avoiding,367,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it! Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:. ```. That should fix a recent nightly failure with gcc11 avoiding to require. module ""bits/ranges_base.h"" in C++20 context. ```. does not call out. - that it's during dictionary generation. - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17). - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers). - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12276
