id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/5650:389,performance,memor,memory-resident,389,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:490,performance,memor,memory-resident,490,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:28,safety,updat,update,28,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:28,security,updat,update,28,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:35,security,model,model,35,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:91,security,model,model,91,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:389,usability,memor,memory-resident,389,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5650:490,usability,memor,memory-resident,490,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When wrinting a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5650
https://github.com/root-project/root/pull/5651:1,energy efficiency,core,core,1,"[core] Remove unused (and old-style deprecated, in 2008) TROOT::fReadingObject.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5651
https://github.com/root-project/root/pull/5652:58,integrability,buffer,buffers,58,"[cmake] Enable colored diagnostics also for Ninja:; Ninja buffers compiler output, and compilers then think they should. not use colored output (because no terminal). Force it on them. And let cling survive: it's parsing compiler output, and the ANSI. color escapes confuse the regexes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5652
https://github.com/root-project/root/pull/5652:23,reliability,diagno,diagnostics,23,"[cmake] Enable colored diagnostics also for Ninja:; Ninja buffers compiler output, and compilers then think they should. not use colored output (because no terminal). Force it on them. And let cling survive: it's parsing compiler output, and the ANSI. color escapes confuse the regexes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5652
https://github.com/root-project/root/pull/5652:23,testability,diagno,diagnostics,23,"[cmake] Enable colored diagnostics also for Ninja:; Ninja buffers compiler output, and compilers then think they should. not use colored output (because no terminal). Force it on them. And let cling survive: it's parsing compiler output, and the ANSI. color escapes confuse the regexes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5652
https://github.com/root-project/root/pull/5654:138,deployability,updat,update,138,[PyROOT] Conditionally add thread to process ROOT events; The PR spawns a separate thread to process ROOT events if we cannot. attach the update mechanism to an exisiting hook such as existing in the. interactive Python mode or for ipython/notebooks. Related to ROOT-10774,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5654
https://github.com/root-project/root/pull/5654:50,integrability,event,events,50,[PyROOT] Conditionally add thread to process ROOT events; The PR spawns a separate thread to process ROOT events if we cannot. attach the update mechanism to an exisiting hook such as existing in the. interactive Python mode or for ipython/notebooks. Related to ROOT-10774,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5654
https://github.com/root-project/root/pull/5654:106,integrability,event,events,106,[PyROOT] Conditionally add thread to process ROOT events; The PR spawns a separate thread to process ROOT events if we cannot. attach the update mechanism to an exisiting hook such as existing in the. interactive Python mode or for ipython/notebooks. Related to ROOT-10774,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5654
https://github.com/root-project/root/pull/5654:138,safety,updat,update,138,[PyROOT] Conditionally add thread to process ROOT events; The PR spawns a separate thread to process ROOT events if we cannot. attach the update mechanism to an exisiting hook such as existing in the. interactive Python mode or for ipython/notebooks. Related to ROOT-10774,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5654
https://github.com/root-project/root/pull/5654:138,security,updat,update,138,[PyROOT] Conditionally add thread to process ROOT events; The PR spawns a separate thread to process ROOT events if we cannot. attach the update mechanism to an exisiting hook such as existing in the. interactive Python mode or for ipython/notebooks. Related to ROOT-10774,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5654
https://github.com/root-project/root/pull/5654:171,testability,hook,hook,171,[PyROOT] Conditionally add thread to process ROOT events; The PR spawns a separate thread to process ROOT events if we cannot. attach the update mechanism to an exisiting hook such as existing in the. interactive Python mode or for ipython/notebooks. Related to ROOT-10774,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5654
https://github.com/root-project/root/pull/5654:201,usability,interact,interactive,201,[PyROOT] Conditionally add thread to process ROOT events; The PR spawns a separate thread to process ROOT events if we cannot. attach the update mechanism to an exisiting hook such as existing in the. interactive Python mode or for ipython/notebooks. Related to ROOT-10774,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5654
https://github.com/root-project/root/pull/5657:164,availability,slo,slow,164,"[RF] Replace RooLinkedList by hash map for RooRealVar binnings.; [ROOT-10781] When a lot of binnings are defined for a RooRealVar,. traversing the RooLinkedList is slow. This replaces those lists with. std::unordered_map.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5657
https://github.com/root-project/root/pull/5657:164,reliability,slo,slow,164,"[RF] Replace RooLinkedList by hash map for RooRealVar binnings.; [ROOT-10781] When a lot of binnings are defined for a RooRealVar,. traversing the RooLinkedList is slow. This replaces those lists with. std::unordered_map.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5657
https://github.com/root-project/root/pull/5657:30,security,hash,hash,30,"[RF] Replace RooLinkedList by hash map for RooRealVar binnings.; [ROOT-10781] When a lot of binnings are defined for a RooRealVar,. traversing the RooLinkedList is slow. This replaces those lists with. std::unordered_map.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5657
https://github.com/root-project/root/pull/5658:26,safety,test,test,26,"[RF] Fix RooCategory read test.; Fix the reference file for the v6.22 read test of RooCategory now that. v6.22 has been tagged. The previous file was using an outdated class. structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5658
https://github.com/root-project/root/pull/5658:75,safety,test,test,75,"[RF] Fix RooCategory read test.; Fix the reference file for the v6.22 read test of RooCategory now that. v6.22 has been tagged. The previous file was using an outdated class. structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5658
https://github.com/root-project/root/pull/5658:243,safety,detect,detected,243,"[RF] Fix RooCategory read test.; Fix the reference file for the v6.22 read test of RooCategory now that. v6.22 has been tagged. The previous file was using an outdated class. structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5658
https://github.com/root-project/root/pull/5658:243,security,detect,detected,243,"[RF] Fix RooCategory read test.; Fix the reference file for the v6.22 read test of RooCategory now that. v6.22 has been tagged. The previous file was using an outdated class. structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5658
https://github.com/root-project/root/pull/5658:26,testability,test,test,26,"[RF] Fix RooCategory read test.; Fix the reference file for the v6.22 read test of RooCategory now that. v6.22 has been tagged. The previous file was using an outdated class. structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5658
https://github.com/root-project/root/pull/5658:75,testability,test,test,75,"[RF] Fix RooCategory read test.; Fix the reference file for the v6.22 read test of RooCategory now that. v6.22 has been tagged. The previous file was using an outdated class. structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5658
https://github.com/root-project/root/pull/5659:5,energy efficiency,Adapt,Adapt,5,[DF] Adapt LinkDef to change in namespace for RRootDS;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5659
https://github.com/root-project/root/pull/5659:5,integrability,Adapt,Adapt,5,[DF] Adapt LinkDef to change in namespace for RRootDS;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5659
https://github.com/root-project/root/pull/5659:5,interoperability,Adapt,Adapt,5,[DF] Adapt LinkDef to change in namespace for RRootDS;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5659
https://github.com/root-project/root/pull/5659:5,modifiability,Adapt,Adapt,5,[DF] Adapt LinkDef to change in namespace for RRootDS;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5659
https://github.com/root-project/root/pull/5660:75,availability,down,down,75,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:112,availability,failur,failures,112,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:226,availability,consist,consistency,226,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:351,availability,consist,consistently,351,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:61,deployability,build,builds,61,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:112,deployability,fail,failures,112,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:181,deployability,build,builds,181,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:343,deployability,manag,managed,343,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:16,energy efficiency,alloc,alloc-dealloc-mismatch,16,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:343,energy efficiency,manag,managed,343,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:883,energy efficiency,load,loaded,883,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:30,interoperability,mismatch,mismatch,30,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:112,performance,failur,failures,112,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:333,performance,memor,memory,333,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:883,performance,load,loaded,883,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:112,reliability,fail,failures,112,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:482,reliability,doe,doesn,482,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:51,safety,sanit,sanitizer,51,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:102,safety,sanit,sanitizer,102,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:301,safety,sanit,sanitizer,301,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:343,safety,manag,managed,343,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:690,safety,sanit,sanitizer,690,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:809,safety,sanit,sanitizer,809,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:51,security,sanit,sanitizer,51,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:102,security,sanit,sanitizer,102,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:301,security,sanit,sanitizer,301,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:690,security,sanit,sanitizer,690,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:809,security,sanit,sanitizer,809,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:279,testability,instrument,instrumented,279,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:436,testability,instrument,instrumented,436,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:561,testability,instrument,instrumented,561,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:226,usability,consist,consistency,226,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:333,usability,memor,memory,333,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:351,usability,consist,consistently,351,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5660:900,usability,command,command,900,"[asan] Disable ""alloc-dealloc-mismatch"" in address sanitizer builds; Bring down the number of address sanitizer failures to ~ 36. In detail:. - Add use-after-scope checks for clang builds. - Disable new/delete and malloc/free consistency checks. Since interpreted code cannot be instrumented, address sanitizer cannot. check whether memory is managed consistently. (Technical details: asan replaces new, delete, malloc and free. In non-instrumented code, the new/delete replacement doesn't work, though. To asan it therefore looks like something was `new`ed in instrumented code, but `free`d in JITted code and vice versa.). - Change the order in which libaries are `LD_PRELOADED`. Address sanitizer needs the config first, and runtimes later. Otherwise, it will ignore the configs. - Fix a regex, so address sanitizer is `LD_PRELOADED` only when python is used. Before, it would be loaded twice for command lines such as `root.exe .... ..../python/....`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5660
https://github.com/root-project/root/pull/5661:28,deployability,updat,update,28,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:35,energy efficiency,model,model,35,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:90,energy efficiency,model,model,90,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:170,performance,time,time,170,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:388,performance,memor,memory-resident,388,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:489,performance,memor,memory-resident,489,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:28,safety,updat,update,28,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:28,security,updat,update,28,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:35,security,model,model,35,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:90,security,model,model,90,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:580,security,auth,authored-by,580,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:388,usability,memor,memory-resident,388,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5661:489,usability,memor,memory-resident,489,"[HF] Fix ROOT-10779, cannot update model with new histograms.; When writing a histfactory model to a file and retrieving it,. histograms are deserialised. If in the mean time new instances of those. histograms have been written to the file, the new instances cannot be. picked up. This is because Channel::GetHistogram() was `Get()`-ting. histograms from the directory. This may return a memory-resident. histograms. Since histograms are always read when deserialising, there is always a. memory-resident histograms. The problem has been fixed by reading from file using TKey. Co-authored-by: Philippe Canal <pcanal@fnal.gov>. (cherry picked from commit 35105feb3d7cbfefa8bf29178b2b9d42851ede6f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5661
https://github.com/root-project/root/pull/5663:109,deployability,observ,observed,109,"[Exp PyROOT] Prepend CMAKE_INSTALL_PREFIX if runtimedir is not absolute; When running ""make package"", it was observed that copying the. Python source files to runtimedir was incorrect, and the generation. of the bytecodes was failing later too as a consequence. This change ensures that the Python sources are installed. correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5663
https://github.com/root-project/root/pull/5663:226,deployability,fail,failing,226,"[Exp PyROOT] Prepend CMAKE_INSTALL_PREFIX if runtimedir is not absolute; When running ""make package"", it was observed that copying the. Python source files to runtimedir was incorrect, and the generation. of the bytecodes was failing later too as a consequence. This change ensures that the Python sources are installed. correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5663
https://github.com/root-project/root/pull/5663:310,deployability,instal,installed,310,"[Exp PyROOT] Prepend CMAKE_INSTALL_PREFIX if runtimedir is not absolute; When running ""make package"", it was observed that copying the. Python source files to runtimedir was incorrect, and the generation. of the bytecodes was failing later too as a consequence. This change ensures that the Python sources are installed. correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5663
https://github.com/root-project/root/pull/5663:92,modifiability,pac,package,92,"[Exp PyROOT] Prepend CMAKE_INSTALL_PREFIX if runtimedir is not absolute; When running ""make package"", it was observed that copying the. Python source files to runtimedir was incorrect, and the generation. of the bytecodes was failing later too as a consequence. This change ensures that the Python sources are installed. correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5663
https://github.com/root-project/root/pull/5663:226,reliability,fail,failing,226,"[Exp PyROOT] Prepend CMAKE_INSTALL_PREFIX if runtimedir is not absolute; When running ""make package"", it was observed that copying the. Python source files to runtimedir was incorrect, and the generation. of the bytecodes was failing later too as a consequence. This change ensures that the Python sources are installed. correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5663
https://github.com/root-project/root/pull/5663:109,testability,observ,observed,109,"[Exp PyROOT] Prepend CMAKE_INSTALL_PREFIX if runtimedir is not absolute; When running ""make package"", it was observed that copying the. Python source files to runtimedir was incorrect, and the generation. of the bytecodes was failing later too as a consequence. This change ensures that the Python sources are installed. correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5663
https://github.com/root-project/root/pull/5664:7,safety,Prevent,Prevent,7,"[hist] Prevent ""Replacing existing TH1"" in THn test.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5664
https://github.com/root-project/root/pull/5664:47,safety,test,test,47,"[hist] Prevent ""Replacing existing TH1"" in THn test.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5664
https://github.com/root-project/root/pull/5664:7,security,Preven,Prevent,7,"[hist] Prevent ""Replacing existing TH1"" in THn test.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5664
https://github.com/root-project/root/pull/5664:47,testability,test,test,47,"[hist] Prevent ""Replacing existing TH1"" in THn test.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5664
https://github.com/root-project/root/pull/5665:87,integrability,messag,message,87,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:87,interoperability,messag,message,87,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:52,safety,input,input,52,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:189,safety,input,inputShapeLayout,189,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:207,safety,Input,InputBatchLayout,207,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:52,usability,input,input,52,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:98,usability,indicat,indicate,98,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:189,usability,input,inputShapeLayout,189,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5665:207,usability,Input,InputBatchLayout,207,Deprecate MethodDNN in TMVA and improve handling of input layout string; Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5665
https://github.com/root-project/root/pull/5666:97,deployability,instal,installation,97,"[Exp PyROOT] Fixes for ""make package""; The commits in this PR propose a unified solution for the installation of the PyROOT libraries, sources and bytecodes that works both with ""make install"" and ""make package"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5666
https://github.com/root-project/root/pull/5666:184,deployability,instal,install,184,"[Exp PyROOT] Fixes for ""make package""; The commits in this PR propose a unified solution for the installation of the PyROOT libraries, sources and bytecodes that works both with ""make install"" and ""make package"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5666
https://github.com/root-project/root/pull/5666:29,modifiability,pac,package,29,"[Exp PyROOT] Fixes for ""make package""; The commits in this PR propose a unified solution for the installation of the PyROOT libraries, sources and bytecodes that works both with ""make install"" and ""make package"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5666
https://github.com/root-project/root/pull/5666:203,modifiability,pac,package,203,"[Exp PyROOT] Fixes for ""make package""; The commits in this PR propose a unified solution for the installation of the PyROOT libraries, sources and bytecodes that works both with ""make install"" and ""make package"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5666
https://github.com/root-project/root/pull/5667:495,availability,failur,failures,495,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:495,deployability,fail,failures,495,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:35,energy efficiency,load,loaded,35,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:360,integrability,sub,sub-entrylists,360,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:446,integrability,transform,transformation,446,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:535,integrability,sub,sub-entrylists,535,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:446,interoperability,transform,transformation,446,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:35,performance,load,loaded,35,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:495,performance,failur,failures,495,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:495,reliability,fail,failures,495,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:84,safety,test,tests,84,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:490,safety,test,test,490,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:84,testability,test,tests,84,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:490,testability,test,test,490,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:94,usability,document,documentation,94,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5667:146,usability,behavi,behavior,146,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""; ...and add tests and documentation for TTreeReader+TEntryList usage. The behavior of `TTreeReader` and `TTreeProcessorMT` is changed from always assuming that entry numbers stored in `TEntryList` are global entry numbers to treating them as `TTree`-local entry numbers if they come from sub-entrylists. This fixes ROOT-10753. - [x] do entry range -> entry-list entry range transformation once for all taks. - [x] fix test failures. - [ ] check what happens with sub-entrylists in shuffled order w.r.t. TTrees in a TChain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5667
https://github.com/root-project/root/pull/5668:130,safety,compl,completely,130,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5668
https://github.com/root-project/root/pull/5668:130,security,compl,completely,130,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5668
https://github.com/root-project/root/pull/5668:15,usability,document,documentation,15,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5668
https://github.com/root-project/root/pull/5668:106,usability,document,documentation,106,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5668
https://github.com/root-project/root/pull/5669:130,safety,compl,completely,130,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5669
https://github.com/root-project/root/pull/5669:130,security,compl,completely,130,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5669
https://github.com/root-project/root/pull/5669:15,usability,document,documentation,15,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5669
https://github.com/root-project/root/pull/5669:106,usability,document,documentation,106,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5669
https://github.com/root-project/root/pull/5670:130,safety,compl,completely,130,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5670
https://github.com/root-project/root/pull/5670:130,security,compl,completely,130,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5670
https://github.com/root-project/root/pull/5670:15,usability,document,documentation,15,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5670
https://github.com/root-project/root/pull/5670:106,usability,document,documentation,106,[RF][Docs] Fix documentation of RooDataHist.; [ROOT-10784] The set() functions of RDH all had copy-pasted documentation. that was completely wrong. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5670
https://github.com/root-project/root/pull/5671:138,availability,error,errors,138,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:243,availability,Error,Error,243,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:311,availability,Error,Error,311,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:347,energy efficiency,current,current,347,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:138,performance,error,errors,138,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:243,performance,Error,Error,243,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:311,performance,Error,Error,311,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:126,safety,prevent,prevent,126,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:138,safety,error,errors,138,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:243,safety,Error,Error,243,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:311,safety,Error,Error,311,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:126,security,preven,prevent,126,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:138,usability,error,errors,138,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:243,usability,Error,Error,243,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5671:311,usability,Error,Error,311,Actually use a name unique to the tutorial.; mp101_singleCore.root was (of course) also use by mp101_fillNtuples.C. This will prevent the errors:. ```. Processing /data/sftnight/workspace/manual/root/tutorials/multicore/mp101_fillNtuples.C... Error in <TFile::TFile>: file mp101_singleCore.root already exists. Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (singleCore) has not been written. (int) 0. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5671
https://github.com/root-project/root/pull/5672:36,availability,error,error,36,"Update df003_profiles.C; This is an error title! py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5672
https://github.com/root-project/root/pull/5672:0,deployability,Updat,Update,0,"Update df003_profiles.C; This is an error title! py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5672
https://github.com/root-project/root/pull/5672:36,performance,error,error,36,"Update df003_profiles.C; This is an error title! py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5672
https://github.com/root-project/root/pull/5672:0,safety,Updat,Update,0,"Update df003_profiles.C; This is an error title! py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5672
https://github.com/root-project/root/pull/5672:36,safety,error,error,36,"Update df003_profiles.C; This is an error title! py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5672
https://github.com/root-project/root/pull/5672:0,security,Updat,Update,0,"Update df003_profiles.C; This is an error title! py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5672
https://github.com/root-project/root/pull/5672:36,usability,error,error,36,"Update df003_profiles.C; This is an error title! py vs px, not pz vs px",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5672
https://github.com/root-project/root/pull/5673:130,availability,avail,available,130,[core] move TVirtualArray.h and TVirtualObject.h to core libs; These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5673
https://github.com/root-project/root/pull/5673:1,energy efficiency,core,core,1,[core] move TVirtualArray.h and TVirtualObject.h to core libs; These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5673
https://github.com/root-project/root/pull/5673:52,energy efficiency,core,core,52,[core] move TVirtualArray.h and TVirtualObject.h to core libs; These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5673
https://github.com/root-project/root/pull/5673:151,energy efficiency,core,core,151,[core] move TVirtualArray.h and TVirtualObject.h to core libs; These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5673
https://github.com/root-project/root/pull/5673:130,reliability,availab,available,130,[core] move TVirtualArray.h and TVirtualObject.h to core libs; These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5673
https://github.com/root-project/root/pull/5673:130,safety,avail,available,130,[core] move TVirtualArray.h and TVirtualObject.h to core libs; These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5673
https://github.com/root-project/root/pull/5673:130,security,availab,available,130,[core] move TVirtualArray.h and TVirtualObject.h to core libs; These includes may be used in dictionaries and therefore should be available already in core libs. Fixes ROOT-10701.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5673
https://github.com/root-project/root/pull/5674:163,deployability,depend,depending,163,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:76,integrability,filter,filter,76,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:163,integrability,depend,depending,163,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:189,integrability,filter,filter,189,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:163,modifiability,depend,depending,163,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:163,safety,depend,depending,163,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:163,testability,depend,depending,163,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:112,usability,behavi,behaviour,112,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5674:196,usability,statu,status,196,Eve-7 Use two-level sort in tables and color cells relative to REveDataItem filter value ; This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5674
https://github.com/root-project/root/pull/5675:159,availability,operat,operator,159,"[HF] Remove unnecessary member from HistFactory::Channel.; Although 35105feb3d7cb fixes a problem in HistFactory, it has the. disadvantage that the assignment operator of Channel gets deactivated. By passing the list of open TFiles as argument instead of making it a. member, the class can stay as it was.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5675
https://github.com/root-project/root/pull/5676:28,availability,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5676:46,deployability,version,version,46,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5676:92,deployability,build,build,92,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5676:46,integrability,version,version,46,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5676:46,modifiability,version,version,46,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5676:28,performance,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5676:28,safety,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5676:28,usability,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5676
https://github.com/root-project/root/pull/5677:159,availability,operat,operator,159,"[HF] Remove unnecessary member from HistFactory::Channel.; Although 35105feb3d7cb fixes a problem in HistFactory, it has the. disadvantage that the assignment operator of Channel gets deactivated. By passing the list of open TFiles as argument instead of making it a. member, the class can stay as it was. (cherry picked from commit 31f55ff0c1fbae1a0573a1c8bf136be4d77fc06b). **Update**:. Added also a cherry pick of the fix for ROOT-3579",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5677
https://github.com/root-project/root/pull/5677:378,deployability,Updat,Update,378,"[HF] Remove unnecessary member from HistFactory::Channel.; Although 35105feb3d7cb fixes a problem in HistFactory, it has the. disadvantage that the assignment operator of Channel gets deactivated. By passing the list of open TFiles as argument instead of making it a. member, the class can stay as it was. (cherry picked from commit 31f55ff0c1fbae1a0573a1c8bf136be4d77fc06b). **Update**:. Added also a cherry pick of the fix for ROOT-3579",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5677
https://github.com/root-project/root/pull/5677:378,safety,Updat,Update,378,"[HF] Remove unnecessary member from HistFactory::Channel.; Although 35105feb3d7cb fixes a problem in HistFactory, it has the. disadvantage that the assignment operator of Channel gets deactivated. By passing the list of open TFiles as argument instead of making it a. member, the class can stay as it was. (cherry picked from commit 31f55ff0c1fbae1a0573a1c8bf136be4d77fc06b). **Update**:. Added also a cherry pick of the fix for ROOT-3579",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5677
https://github.com/root-project/root/pull/5677:378,security,Updat,Update,378,"[HF] Remove unnecessary member from HistFactory::Channel.; Although 35105feb3d7cb fixes a problem in HistFactory, it has the. disadvantage that the assignment operator of Channel gets deactivated. By passing the list of open TFiles as argument instead of making it a. member, the class can stay as it was. (cherry picked from commit 31f55ff0c1fbae1a0573a1c8bf136be4d77fc06b). **Update**:. Added also a cherry pick of the fix for ROOT-3579",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5677
https://github.com/root-project/root/pull/5678:224,deployability,updat,updated,224,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5678:52,safety,Review,Reviewers,52,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5678:224,safety,updat,updated,224,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5678:224,security,updat,updated,224,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5678:52,testability,Review,Reviewers,52,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5678:13,usability,User,Users,13,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5678:19,usability,Guid,Guide,19,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5678:133,usability,user,users,133,"[r] Rename R Users Guide file to have less spaces.; Reviewers, please make sure that renaming this file still makes it ""findable"" by users! I don't know how references to this file are generated, and whether they need to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5678
https://github.com/root-project/root/pull/5679:47,integrability,sub,sub-directory,47,"[DF] Fix Snapshot output TTree ctor in case of sub-directory ; We need to pass the sub-directory, not the main file. This fixes ROOT-10790.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5679
https://github.com/root-project/root/pull/5679:83,integrability,sub,sub-directory,83,"[DF] Fix Snapshot output TTree ctor in case of sub-directory ; We need to pass the sub-directory, not the main file. This fixes ROOT-10790.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5679
https://github.com/root-project/root/pull/5680:5,energy efficiency,Draw,DrawClone,5,make DrawClone method the right way on tutorial; on fitsio tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5680
https://github.com/root-project/root/pull/5681:61,availability,error,errors,61,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:191,availability,Servic,Services,191,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:258,availability,error,error,258,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:84,deployability,build,building,84,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:104,deployability,modul,module,104,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:152,deployability,modul,modulemap,152,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:191,deployability,Servic,Services,191,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:219,deployability,build,build,219,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:331,deployability,modul,module,331,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:386,deployability,build,build,386,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:428,deployability,build,build,428,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:339,energy efficiency,Core,Core,339,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:434,energy efficiency,core,core,434,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:191,integrability,Servic,Services,191,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:104,modifiability,modul,module,104,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:152,modifiability,modul,modulemap,152,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:191,modifiability,Servic,Services,191,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:331,modifiability,modul,module,331,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:61,performance,error,errors,61,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:258,performance,error,error,258,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:61,safety,error,errors,61,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:104,safety,modul,module,104,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:152,safety,modul,modulemap,152,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:258,safety,error,error,258,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:331,safety,modul,module,331,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:61,usability,error,errors,61,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5681:258,usability,error,error,258,"[wincxxmodules] Fix Thread.pcm on Windows; This PR fixes the errors occurring while building the Thread module on Windows by adding a new services_msvc.modulemap which holds Microsoft System Services headers. ```. /.../build/include\TWin32Condition.h(35,4): error G4823F0AC: declaration of 'CRITICAL_SECTION' must be imported from module 'Core.TWinNTSystem.h' before it is required [C:\build\night\LABEL\windows10\SPEC\rtcxxmod\build\core\thread\G__Thread.vcxproj]. CRITICAL_SECTION waiters_count_lock_;. ^. C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\minwinbase.h:217:30: note: previous declaration is here. typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5681
https://github.com/root-project/root/pull/5683:566,availability,operat,operations,566,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:724,availability,avail,available,724,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:1002,availability,failur,failure,1002,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:1002,deployability,fail,failure,1002,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:145,integrability,rout,routine,145,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:174,interoperability,specif,specified,174,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:1002,performance,failur,failure,1002,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:724,reliability,availab,available,724,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:1002,reliability,fail,failure,1002,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:724,safety,avail,available,724,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:724,security,availab,available,724,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:75,testability,assert,assert,75,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5683:883,testability,assert,asserting,883,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5683
https://github.com/root-project/root/pull/5687:47,safety,test,tests,47,[DF] Do not assume a certain entry order in MT tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5687
https://github.com/root-project/root/pull/5687:47,testability,test,tests,47,[DF] Do not assume a certain entry order in MT tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5687
https://github.com/root-project/root/pull/5689:17,safety,test,test,17,Fix ntuple_types test on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5689
https://github.com/root-project/root/pull/5689:17,testability,test,test,17,Fix ntuple_types test on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5689
https://github.com/root-project/root/pull/5691:51,modifiability,pac,package,51,"[Exp PyROOT][CMake] 6.22 backport: fixes for ""make package""; Backport of https://github.com/root-project/root/pull/5663 and https://github.com/root-project/root/pull/5666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5691
https://github.com/root-project/root/pull/5693:67,safety,test,test,67,[DF] Fix Snapshot of TClonesArrays; i.e. fix ROOT-10792 (and add a test).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5693
https://github.com/root-project/root/pull/5693:67,testability,test,test,67,[DF] Fix Snapshot of TClonesArrays; i.e. fix ROOT-10792 (and add a test).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5693
https://github.com/root-project/root/pull/5695:12,deployability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:175,deployability,build,build-system,175,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:12,integrability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:12,modifiability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:12,safety,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:40,safety,test,test,40,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:154,safety,test,test,154,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:12,testability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:40,testability,test,test,40,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5695:154,testability,test,test,154,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a depedency. between dictionary generation and test target to fix a build-system race. condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5695
https://github.com/root-project/root/pull/5696:46,testability,context,context,46,Tell rootcling that we expect cuda.pcm in the context of TMVA;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5696
https://github.com/root-project/root/pull/5697:53,deployability,releas,release-notes,53,Add Johannes in CREDITS; Add Johannes in CREDITS and release-notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5697
https://github.com/root-project/root/pull/5698:0,deployability,Updat,Update,0,Update Vincenzo's credits info;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5698
https://github.com/root-project/root/pull/5698:0,safety,Updat,Update,0,Update Vincenzo's credits info;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5698
https://github.com/root-project/root/pull/5698:0,security,Updat,Update,0,Update Vincenzo's credits info;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5698
https://github.com/root-project/root/pull/5702:24,availability,Error,ErrorIntegral,24,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:282,availability,error,error,282,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:118,deployability,Integr,IntegralError,118,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:275,deployability,Updat,Update,275,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:312,deployability,Integr,IntegralError,312,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:347,deployability,Updat,Update,347,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:118,integrability,Integr,IntegralError,118,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:288,integrability,messag,message,288,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:312,integrability,Integr,IntegralError,312,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:118,interoperability,Integr,IntegralError,118,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:288,interoperability,messag,message,288,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:312,interoperability,Integr,IntegralError,312,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:118,modifiability,Integr,IntegralError,118,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:312,modifiability,Integr,IntegralError,312,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:24,performance,Error,ErrorIntegral,24,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:282,performance,error,error,282,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:118,reliability,Integr,IntegralError,118,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:312,reliability,Integr,IntegralError,312,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:24,safety,Error,ErrorIntegral,24,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:275,safety,Updat,Update,275,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:282,safety,error,error,282,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:347,safety,Updat,Update,347,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:118,security,Integr,IntegralError,118,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:275,security,Updat,Update,275,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:312,security,Integr,IntegralError,312,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:347,security,Updat,Update,347,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:118,testability,Integr,IntegralError,118,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:312,testability,Integr,IntegralError,312,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:24,usability,Error,ErrorIntegral,24,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:282,usability,error,error,282,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:359,usability,document,documentation,359,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5702:376,usability,indicat,indicate,376,Fix stressHistogram and ErrorIntegral tutorial for MT (IsImplicitMTEnabled).; This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT. In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5702
https://github.com/root-project/root/pull/5703:120,safety,test,tests,120,Fix TClassEdit::DemangleName() on Windows; Remove extra `class` and `struct` prefixes in demangled name and fix related tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5703
https://github.com/root-project/root/pull/5703:120,testability,test,tests,120,Fix TClassEdit::DemangleName() on Windows; Remove extra `class` and `struct` prefixes in demangled name and fix related tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5703
https://github.com/root-project/root/pull/5704:91,safety,test,tests,91,Backport in 6.22 some fixes in tmva ; These fixes replace using MethodDNN with MethodDL in tests and tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5704
https://github.com/root-project/root/pull/5704:91,testability,test,tests,91,Backport in 6.22 some fixes in tmva ; These fixes replace using MethodDNN with MethodDL in tests and tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5704
https://github.com/root-project/root/pull/5705:244,availability,slo,slow,244,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:310,availability,monitor,monitoring,310,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:1,deployability,Build,Build,1,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:33,deployability,infrastructur,infrastructure,33,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:310,deployability,monitor,monitoring,310,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:536,deployability,integr,integrated,536,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:217,energy efficiency,CPU,CPU,217,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:310,energy efficiency,monitor,monitoring,310,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:536,integrability,integr,integrated,536,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:536,interoperability,integr,integrated,536,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:536,modifiability,integr,integrated,536,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:217,performance,CPU,CPU,217,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:244,reliability,slo,slow,244,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:257,reliability,doe,does,257,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:310,reliability,monitor,monitoring,310,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:536,reliability,integr,integrated,536,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:310,safety,monitor,monitoring,310,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:536,security,integr,integrated,536,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:310,testability,monitor,monitoring,310,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:536,testability,integr,integrated,536,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:266,usability,help,help,266,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:363,usability,user,user-images,363,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5705:593,usability,command,command,593,"[Build] Add distcc option; * Add infrastructure to call distcc as prefix. * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5705
https://github.com/root-project/root/pull/5706:39,testability,hook,hooks,39,[Backport][PyROOT] Backport PyROOT GUI hooks;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5706
https://github.com/root-project/root/pull/5707:5,deployability,Updat,Update,5,[RF] Update release notes.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5707
https://github.com/root-project/root/pull/5707:12,deployability,releas,release,12,[RF] Update release notes.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5707
https://github.com/root-project/root/pull/5707:5,safety,Updat,Update,5,[RF] Update release notes.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5707
https://github.com/root-project/root/pull/5707:5,security,Updat,Update,5,[RF] Update release notes.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5707
https://github.com/root-project/root/pull/5708:6,deployability,Updat,Update,6,[NFC] Update my contact email;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5708
https://github.com/root-project/root/pull/5708:6,safety,Updat,Update,6,[NFC] Update my contact email;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5708
https://github.com/root-project/root/pull/5708:6,security,Updat,Update,6,[NFC] Update my contact email;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5708
https://github.com/root-project/root/pull/5709:41,deployability,modul,modulemap,41,"[cling] Adjust the location of the boost modulemap.; cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5709
https://github.com/root-project/root/pull/5709:41,modifiability,modul,modulemap,41,"[cling] Adjust the location of the boost modulemap.; cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5709
https://github.com/root-project/root/pull/5709:41,safety,modul,modulemap,41,"[cling] Adjust the location of the boost modulemap.; cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5709
https://github.com/root-project/root/pull/5710:0,deployability,Updat,Update,0,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:74,deployability,Updat,Updates,74,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:0,safety,Updat,Update,0,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:74,safety,Updat,Updates,74,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:0,security,Updat,Update,0,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:74,security,Updat,Updates,74,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:12,usability,User,UsersGuide,12,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:105,usability,user,users,105,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5710:111,usability,guid,guide,111,"Update TMVA UsersGuide for new DeepLearning features (MethodDL, CNN, RNN; Updates of latex files of TMVA users guide",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5710
https://github.com/root-project/root/pull/5712:12,deployability,depend,dependent,12,v622 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5712
https://github.com/root-project/root/pull/5712:7,energy efficiency,Load,Load,7,v622 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5712
https://github.com/root-project/root/pull/5712:12,integrability,depend,dependent,12,v622 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5712
https://github.com/root-project/root/pull/5712:12,modifiability,depend,dependent,12,v622 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5712
https://github.com/root-project/root/pull/5712:7,performance,Load,Load,7,v622 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5712
https://github.com/root-project/root/pull/5712:12,safety,depend,dependent,12,v622 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5712
https://github.com/root-project/root/pull/5712:12,testability,depend,dependent,12,v622 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5712
https://github.com/root-project/root/pull/5713:13,deployability,depend,dependent,13,v6.20 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5713
https://github.com/root-project/root/pull/5713:8,energy efficiency,Load,Load,8,v6.20 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5713
https://github.com/root-project/root/pull/5713:13,integrability,depend,dependent,13,v6.20 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5713
https://github.com/root-project/root/pull/5713:13,modifiability,depend,dependent,13,v6.20 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5713
https://github.com/root-project/root/pull/5713:8,performance,Load,Load,8,v6.20 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5713
https://github.com/root-project/root/pull/5713:13,safety,depend,dependent,13,v6.20 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5713
https://github.com/root-project/root/pull/5713:13,testability,depend,dependent,13,v6.20 - Load dependent libraries as part of AutoLoading.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5713
https://github.com/root-project/root/pull/5714:186,availability,cluster,cluster,186,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:827,availability,cluster,clusterIndex,827,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:1059,availability,cluster,cluster,1059,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:1138,availability,cluster,cluster,1138,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:186,deployability,cluster,cluster,186,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:219,deployability,fail,failing,219,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:827,deployability,cluster,clusterIndex,827,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:1059,deployability,cluster,cluster,1059,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:1138,deployability,cluster,cluster,1138,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:219,reliability,fail,failing,219,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:131,safety,test,tests,131,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:227,safety,test,tests,227,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:518,safety,test,test,518,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:641,safety,test,test,641,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:764,safety,test,test,764,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:13,testability,simpl,simplify,13,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:74,testability,simpl,simplifying,74,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:131,testability,test,tests,131,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:227,testability,test,tests,227,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:249,testability,assert,assertion,249,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:518,testability,test,test,518,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:641,testability,test,test,641,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:764,testability,test,test,764,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:13,usability,simpl,simplify,13,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:54,usability,progress,progress,54,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5714:74,usability,simpl,simplifying,74,"[ntuple] WIP simplify offset column indexing; Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: . https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359. 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534. 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5714
https://github.com/root-project/root/pull/5715:12,deployability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:109,deployability,depend,dependency,109,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:181,deployability,build,build-system,181,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:12,integrability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:109,integrability,depend,dependency,109,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:12,modifiability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:109,modifiability,depend,dependency,109,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:12,safety,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:40,safety,test,test,40,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:109,safety,depend,dependency,109,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:160,safety,test,test,160,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:12,testability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:40,testability,test,test,40,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:109,testability,depend,dependency,109,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5715:160,testability,test,test,160,[RDF] Fix a dependency issue for an RDF test.; splitcoll-arrayview needs a dictionary to run. This creates a dependency. between dictionary generation step and test target to fix a build-system. race condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5715
https://github.com/root-project/root/pull/5716:12,deployability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716
https://github.com/root-project/root/pull/5716:12,integrability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716
https://github.com/root-project/root/pull/5716:12,modifiability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716
https://github.com/root-project/root/pull/5716:12,safety,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716
https://github.com/root-project/root/pull/5716:40,safety,test,test,40,[RDF] Fix a dependency issue for an RDF test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716
https://github.com/root-project/root/pull/5716:12,testability,depend,dependency,12,[RDF] Fix a dependency issue for an RDF test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716
https://github.com/root-project/root/pull/5716:40,testability,test,test,40,[RDF] Fix a dependency issue for an RDF test;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5716
https://github.com/root-project/root/pull/5717:17,deployability,build,build,17,[ROOT-10772] Fix build with external libpng; I removed last traces of possible usage of system libpng when build with external libpng. Tested with flags: ` -DCMAKE_PREFIX_PATH=/home/oksana/CERN/libpng/`. Output of making grep of `png` in build directory and ldd output for libAsimage*.so:. https://gist.github.com/oshadura/02284042676515002dbd7383ef5f75c7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5717
https://github.com/root-project/root/pull/5717:107,deployability,build,build,107,[ROOT-10772] Fix build with external libpng; I removed last traces of possible usage of system libpng when build with external libpng. Tested with flags: ` -DCMAKE_PREFIX_PATH=/home/oksana/CERN/libpng/`. Output of making grep of `png` in build directory and ldd output for libAsimage*.so:. https://gist.github.com/oshadura/02284042676515002dbd7383ef5f75c7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5717
https://github.com/root-project/root/pull/5717:238,deployability,build,build,238,[ROOT-10772] Fix build with external libpng; I removed last traces of possible usage of system libpng when build with external libpng. Tested with flags: ` -DCMAKE_PREFIX_PATH=/home/oksana/CERN/libpng/`. Output of making grep of `png` in build directory and ldd output for libAsimage*.so:. https://gist.github.com/oshadura/02284042676515002dbd7383ef5f75c7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5717
https://github.com/root-project/root/pull/5717:135,safety,Test,Tested,135,[ROOT-10772] Fix build with external libpng; I removed last traces of possible usage of system libpng when build with external libpng. Tested with flags: ` -DCMAKE_PREFIX_PATH=/home/oksana/CERN/libpng/`. Output of making grep of `png` in build directory and ldd output for libAsimage*.so:. https://gist.github.com/oshadura/02284042676515002dbd7383ef5f75c7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5717
https://github.com/root-project/root/pull/5717:60,testability,trace,traces,60,[ROOT-10772] Fix build with external libpng; I removed last traces of possible usage of system libpng when build with external libpng. Tested with flags: ` -DCMAKE_PREFIX_PATH=/home/oksana/CERN/libpng/`. Output of making grep of `png` in build directory and ldd output for libAsimage*.so:. https://gist.github.com/oshadura/02284042676515002dbd7383ef5f75c7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5717
https://github.com/root-project/root/pull/5717:135,testability,Test,Tested,135,[ROOT-10772] Fix build with external libpng; I removed last traces of possible usage of system libpng when build with external libpng. Tested with flags: ` -DCMAKE_PREFIX_PATH=/home/oksana/CERN/libpng/`. Output of making grep of `png` in build directory and ldd output for libAsimage*.so:. https://gist.github.com/oshadura/02284042676515002dbd7383ef5f75c7,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5717
https://github.com/root-project/root/pull/5718:76,availability,slo,slow,76,[RF] Optimise importing of large expression trees.; Got a report about very slow importing of objects into workspaces. Turns out that considerable time is wasted with finding objects by name in vectors (which unfortunately cannot be sorted by name). This adds a `std::unordered_map` for heavy searching and modernises old-style loops in RooWorkspace::import(). [prof_20200526.pdf](https://github.com/root-project/root/files/4683875/prof_20200526.pdf).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5718
https://github.com/root-project/root/pull/5718:5,energy efficiency,Optim,Optimise,5,[RF] Optimise importing of large expression trees.; Got a report about very slow importing of objects into workspaces. Turns out that considerable time is wasted with finding objects by name in vectors (which unfortunately cannot be sorted by name). This adds a `std::unordered_map` for heavy searching and modernises old-style loops in RooWorkspace::import(). [prof_20200526.pdf](https://github.com/root-project/root/files/4683875/prof_20200526.pdf).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5718
https://github.com/root-project/root/pull/5718:147,performance,time,time,147,[RF] Optimise importing of large expression trees.; Got a report about very slow importing of objects into workspaces. Turns out that considerable time is wasted with finding objects by name in vectors (which unfortunately cannot be sorted by name). This adds a `std::unordered_map` for heavy searching and modernises old-style loops in RooWorkspace::import(). [prof_20200526.pdf](https://github.com/root-project/root/files/4683875/prof_20200526.pdf).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5718
https://github.com/root-project/root/pull/5718:76,reliability,slo,slow,76,[RF] Optimise importing of large expression trees.; Got a report about very slow importing of objects into workspaces. Turns out that considerable time is wasted with finding objects by name in vectors (which unfortunately cannot be sorted by name). This adds a `std::unordered_map` for heavy searching and modernises old-style loops in RooWorkspace::import(). [prof_20200526.pdf](https://github.com/root-project/root/files/4683875/prof_20200526.pdf).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5718
https://github.com/root-project/root/pull/5720:55,safety,test,test,55,"[RDF] Remove linking against dictionary target for RDF test.; In cmake < 3.13, linking against object files isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5720
https://github.com/root-project/root/pull/5720:55,testability,test,test,55,"[RDF] Remove linking against dictionary target for RDF test.; In cmake < 3.13, linking against object files isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5720
https://github.com/root-project/root/pull/5721:253,deployability,fail,failing,253,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1631,deployability,fail,fail,1631,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1070,energy efficiency,load,loaded,1070,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1426,energy efficiency,Load,LoadTree,1426,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1588,energy efficiency,Load,LoadTree,1588,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:471,integrability,sub,sub-branch,471,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:564,modifiability,Deco,Decomposed,564,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1070,performance,load,loaded,1070,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1426,performance,Load,LoadTree,1426,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1588,performance,Load,LoadTree,1588,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:253,reliability,fail,failing,253,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:1631,reliability,fail,fail,1631,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5721:505,usability,user,user,505,"Fix TTree::GetBranch in case where branch name is partial; Also fix TClusterIterator for the case of TTree with 1 entry (and no basket flush). Also Remove unnecessary thread local in TKey.cxx. And more changes to address issues seen in variation of the failing code in ROOT-10702. In particular, after this PR, the following will always work. ```. chain->SetBranchAdress(fullnameofbranch, &address_of_numerical_type);. ```. Prior to this PR, if the requested branch is a sub-branch of a split object, the user needs to **also** turn on MakeClass mode (also called Decomposed Object mode) explicit, now it is done implicitly. Prior to this PR doing:. ```. // Not setting the top level branch address. chain->SetBranchAdress(sub_branch_name, &address);. chain->GetEntry(0);. ```. Resulted in the address set to be forgotten. Note that a work-around was:. ```. // Not setting the top level branch address. chain->GetEntry(0);. chain->SetBranchAdress(sub_branch_name, &address);. ```. But also the address needed to (in most cases) also be set again after each new tree was loaded. Note that, the following:. ```. chain->SetBranchAdress(sub_branch_name, &address);. chain->SetBranchAdress(top_level_branch_name, &other_address);. chain->GetEntry(0);. ```. will result (as one would expect) with the first SetBranchAddress being ignored/over-ridden. With this PR, in addition to checking the address type in the case:. ```. chain->LoadTree(0);. chain->SetBranchAdress(branch_name, &address);. ```. will also check them in the case:. ```. chain->SetBranchAdress(branch_name, &address);. chain->LoadTree(0);. ```. (yep, it would silently fail before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5721
https://github.com/root-project/root/pull/5723:26,deployability,patch,patches,26,Sync JSROOT with v6-22-00-patches branch;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5723
https://github.com/root-project/root/pull/5723:26,safety,patch,patches,26,Sync JSROOT with v6-22-00-patches branch;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5723
https://github.com/root-project/root/pull/5723:26,security,patch,patches,26,Sync JSROOT with v6-22-00-patches branch;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5723
https://github.com/root-project/root/pull/5724:128,deployability,observ,observed,128,Avoid using NumCpu with strategy=3 (hybrid case) for a pdf which is not a RooSimultaneous (ROOT-9347); This addresses the crash observed in ROOT-9347,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5724
https://github.com/root-project/root/pull/5724:0,safety,Avoid,Avoid,0,Avoid using NumCpu with strategy=3 (hybrid case) for a pdf which is not a RooSimultaneous (ROOT-9347); This addresses the crash observed in ROOT-9347,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5724
https://github.com/root-project/root/pull/5724:128,testability,observ,observed,128,Avoid using NumCpu with strategy=3 (hybrid case) for a pdf which is not a RooSimultaneous (ROOT-9347); This addresses the crash observed in ROOT-9347,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5724
https://github.com/root-project/root/pull/5725:72,availability,state,state,72,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:597,availability,state,state,597,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:162,deployability,configurat,configuration,162,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:206,deployability,configurat,configuration,206,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:313,deployability,log,logics,313,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:64,energy efficiency,current,current,64,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:340,energy efficiency,current,current,340,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:589,energy efficiency,current,current,589,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:960,energy efficiency,optim,optimizations,960,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:977,energy efficiency,reduc,reduce,977,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:1114,energy efficiency,Reduc,Reducing,1114,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:1451,energy efficiency,current,current,1451,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:72,integrability,state,state,72,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:162,integrability,configur,configuration,162,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:206,integrability,configur,configuration,206,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:597,integrability,state,state,597,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:162,modifiability,configur,configuration,162,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:206,modifiability,configur,configuration,206,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:1299,modifiability,scenario,scenarios,1299,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:934,performance,time,time,934,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:948,performance,Performance optim,Performance optimizations,948,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:414,reliability,doe,doesn,414,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:313,safety,log,logics,313,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:695,safety,permiss,permissive,695,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:845,safety,Test,Tests,845,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:1227,safety,compl,complete,1227,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:1387,safety,permiss,permissive,1387,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:162,security,configur,configuration,162,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:206,security,configur,configuration,206,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:313,security,log,logics,313,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:1227,security,compl,complete,1227,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:313,testability,log,logics,313,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:845,testability,Test,Tests,845,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:921,usability,clear,clearer,921,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5725:948,usability,Perform,Performance,948,"[WIP] More sophisticated RHist binning comparisons; This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to). * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different. - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time... - [ ] Performance optimizations to reduce the impact of comparing axis binning, including... * [ ] Not comparing every axis bin border when the axes are equidistant. * [ ] Reducing reliance on virtual function calls, especially in loops. * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...). - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5725
https://github.com/root-project/root/pull/5726:38,deployability,version,versions,38,Revert commits that broke early cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5726
https://github.com/root-project/root/pull/5726:38,integrability,version,versions,38,Revert commits that broke early cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5726
https://github.com/root-project/root/pull/5726:38,modifiability,version,versions,38,Revert commits that broke early cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5726
https://github.com/root-project/root/pull/5729:18,deployability,Releas,Release,18,[skip-ci][PyROOT] Release notes for 6.22;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5729
https://github.com/root-project/root/pull/5730:20,deployability,depend,dependency,20,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:66,deployability,version,version,66,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:20,integrability,depend,dependency,20,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:66,integrability,version,version,66,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:20,modifiability,depend,dependency,20,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:66,modifiability,version,version,66,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:90,reliability,doe,does,90,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:20,safety,depend,dependency,20,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:48,safety,test,test,48,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:20,testability,depend,dependency,20,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:48,testability,test,test,48,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5730:99,testability,understand,understand,99,"Revert ""[RDF] Fix a dependency issue for an RDF test.""; The cmake version in Ubuntu 18.04 does not understand it. This reverts commit adb88db1f6cde4350b87010ce2a01ba1002ccaff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5730
https://github.com/root-project/root/pull/5731:18,availability,error,errors,18,[cmake] Fix cmake errors with old cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731
https://github.com/root-project/root/pull/5731:40,deployability,version,versions,40,[cmake] Fix cmake errors with old cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731
https://github.com/root-project/root/pull/5731:40,integrability,version,versions,40,[cmake] Fix cmake errors with old cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731
https://github.com/root-project/root/pull/5731:40,modifiability,version,versions,40,[cmake] Fix cmake errors with old cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731
https://github.com/root-project/root/pull/5731:18,performance,error,errors,18,[cmake] Fix cmake errors with old cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731
https://github.com/root-project/root/pull/5731:18,safety,error,errors,18,[cmake] Fix cmake errors with old cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731
https://github.com/root-project/root/pull/5731:18,usability,error,errors,18,[cmake] Fix cmake errors with old cmake versions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5731
https://github.com/root-project/root/pull/5732:16,availability,error,error-Transaction,16,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:77,availability,Error,ErrorOut,77,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:218,availability,error,errors,218,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:16,performance,error,error-Transaction,16,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:77,performance,Error,ErrorOut,77,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:218,performance,error,errors,218,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:16,safety,error,error-Transaction,16,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:77,safety,Error,ErrorOut,77,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:151,safety,prevent,prevent,151,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:218,safety,error,errors,218,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:151,security,preven,prevent,151,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:173,testability,assert,asserted,173,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:16,usability,error,error-Transaction,16,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:77,usability,Error,ErrorOut,77,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5732:218,usability,error,errors,218,"[cling] Flag an error-Transaction as kRolledBack (ROOT-10798):; Even for the ErrorOut case the Transaction should be flagged as beyond. kCompleted, to prevent it from being asserted on as ""we have transaction. without errors that was not committed"" in ~IncrementalParser().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5732
https://github.com/root-project/root/pull/5733:27,integrability,pub,public,27,Provide include guards for public headers; There are several header files without typical guards:. ```. #ifndef ROOT_Something. #define ROOT_Something. ... #endif . ```. Plus adjust defines names in GUI classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5733
https://github.com/root-project/root/pull/5735:0,deployability,Updat,Update,0,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:68,deployability,Updat,Update,68,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:17,integrability,messag,message,17,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:83,integrability,messag,message,83,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:17,interoperability,messag,message,17,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:83,interoperability,messag,message,83,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:0,safety,Updat,Update,0,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:68,safety,Updat,Update,68,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:0,security,Updat,Update,0,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5735:68,security,Updat,Update,68,Update a warning message when using RooFit::NumCpu with strategy=3; Update warning message as suggested by Stephan in https://github.com/root-project/root/pull/5724.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5735
https://github.com/root-project/root/pull/5736:14,deployability,releas,release,14,Add O.Shadura release notes (build system);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5736
https://github.com/root-project/root/pull/5736:29,deployability,build,build,29,Add O.Shadura release notes (build system);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5736
https://github.com/root-project/root/pull/5737:4,deployability,build,build,4,Fix build with external libpng;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5737
https://github.com/root-project/root/pull/5738:11,modifiability,variab,variables,11,Fix Python variables in root-config output; It generated expected output:. https://root-forum.cern.ch/t/no-python-cmake-flag-in-root-config-from-6-20/39638/4,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5738
https://github.com/root-project/root/pull/5739:70,energy efficiency,reduc,reduces,70,[RF] Backport unordered-map-assisted searches for RooWorkspace.; This reduces run times of workspace transformations by factor ~7 for ATLAS workflows with heavy searching.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5739
https://github.com/root-project/root/pull/5739:101,integrability,transform,transformations,101,[RF] Backport unordered-map-assisted searches for RooWorkspace.; This reduces run times of workspace transformations by factor ~7 for ATLAS workflows with heavy searching.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5739
https://github.com/root-project/root/pull/5739:101,interoperability,transform,transformations,101,[RF] Backport unordered-map-assisted searches for RooWorkspace.; This reduces run times of workspace transformations by factor ~7 for ATLAS workflows with heavy searching.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5739
https://github.com/root-project/root/pull/5739:82,performance,time,times,82,[RF] Backport unordered-map-assisted searches for RooWorkspace.; This reduces run times of workspace transformations by factor ~7 for ATLAS workflows with heavy searching.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5739
https://github.com/root-project/root/pull/5739:140,usability,workflow,workflows,140,[RF] Backport unordered-map-assisted searches for RooWorkspace.; This reduces run times of workspace transformations by factor ~7 for ATLAS workflows with heavy searching.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5739
https://github.com/root-project/root/pull/5740:60,security,hash,hash-assisted,60,[RF] Accelerate finding of data in RooWorkspace.; Switch on hash-assisted finding workspaces with 50 or more datasets. Note on the arbitrary 200 elements:. The list will double its size of the initial 200 elements are not enough.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5740
https://github.com/root-project/root/pull/5741:572,availability,operat,operations,572,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:731,availability,avail,available,731,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:1001,availability,failur,failure,1001,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:1001,deployability,fail,failure,1001,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:146,integrability,rout,routine,146,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:175,interoperability,specif,specified,175,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:1001,performance,failur,failure,1001,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:731,reliability,availab,available,731,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:1001,reliability,fail,failure,1001,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:731,safety,avail,available,731,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:731,security,availab,available,731,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:75,testability,assert,assert,75,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5741:892,testability,assert,asserting,892,"[ROOT-10791][dyld] Do not try to compare two realpaths.; This conservative assert intended to capture future uses of the. shouldPermanentlyIgnore routine and check if we have specified an absolute. non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may. move files around. Then the iterable (official) filename's real path might. differ at the point of iteration and the point of the check. Some file systems. use a temporary filename while copying/moving file and the rename it to the. real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the. iterator gives the expected real path of the filename which is not yet available. when we ask for the real path of that path we get something different (using the. same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5741
https://github.com/root-project/root/pull/5743:0,deployability,updat,update,0,update relase notes about source build [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5743
https://github.com/root-project/root/pull/5743:33,deployability,build,build,33,update relase notes about source build [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5743
https://github.com/root-project/root/pull/5743:0,safety,updat,update,0,update relase notes about source build [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5743
https://github.com/root-project/root/pull/5743:0,security,updat,update,0,update relase notes about source build [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5743
https://github.com/root-project/root/pull/5744:199,deployability,automat,automatically,199,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5744:1,reliability,RCa,RCanvas,1,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5744:36,reliability,RCa,RCanvas,36,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5744:390,safety,test,tested,390,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5744:199,testability,automat,automatically,199,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5744:390,testability,test,tested,390,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5744:14,usability,interact,interactive,14,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5744:79,usability,interact,interactively,79,"[RCanvas] add interactive moving of RCanvas elements; Following objects can be interactively moved now:. `RFrame`, `RHistStatBox`, `RFrameTitle`, RPaletteDrawable`. All position/size changes applied automatically to server side. Introduce moving constrains for `RFrameTitle` and `RPaletteDrawable` - . they only can be moved/resize in one direction. Main part is in JavaScript code. Can be tested with `tutorials/v7/draw_rh2_colz.cxx` macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5744
https://github.com/root-project/root/pull/5745:60,safety,test,tests,60,"Fix RootShower includes, removed unused includes from other tests; RootShower includes has to be adjusted after `TVirtualX.h` was removed from main GUI includes. I will provide correspondent minimal fix for v6.22",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5745
https://github.com/root-project/root/pull/5745:60,testability,test,tests,60,"Fix RootShower includes, removed unused includes from other tests; RootShower includes has to be adjusted after `TVirtualX.h` was removed from main GUI includes. I will provide correspondent minimal fix for v6.22",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5745
https://github.com/root-project/root/pull/5745:191,usability,minim,minimal,191,"Fix RootShower includes, removed unused includes from other tests; RootShower includes has to be adjusted after `TVirtualX.h` was removed from main GUI includes. I will provide correspondent minimal fix for v6.22",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5745
https://github.com/root-project/root/pull/5746:35,safety,test,test,35,Add missing includes in RootShower test v6.22; `TVirtualX.h` was removed from central includes like `TCanvas.h`. `TBranch.h` may be not provided with `TTree.h` if ROOT compiled with `dev` mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5746
https://github.com/root-project/root/pull/5746:35,testability,test,test,35,Add missing includes in RootShower test v6.22; `TVirtualX.h` was removed from central includes like `TCanvas.h`. `TBranch.h` may be not provided with `TTree.h` if ROOT compiled with `dev` mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5746
https://github.com/root-project/root/pull/5748:54,deployability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748
https://github.com/root-project/root/pull/5748:54,integrability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748
https://github.com/root-project/root/pull/5748:54,modifiability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748
https://github.com/root-project/root/pull/5748:42,safety,test,test,42,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748
https://github.com/root-project/root/pull/5748:54,safety,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748
https://github.com/root-project/root/pull/5748:42,testability,test,test,42,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748
https://github.com/root-project/root/pull/5748:54,testability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5748
https://github.com/root-project/root/pull/5749:54,deployability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5749
https://github.com/root-project/root/pull/5749:54,integrability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5749
https://github.com/root-project/root/pull/5749:54,modifiability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5749
https://github.com/root-project/root/pull/5749:42,safety,test,test,42,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5749
https://github.com/root-project/root/pull/5749:54,safety,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5749
https://github.com/root-project/root/pull/5749:42,testability,test,test,42,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5749
https://github.com/root-project/root/pull/5749:54,testability,depend,dependency,54,[RDF] Move dictionary generation into RDF test to fix dependency issues.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5749
https://github.com/root-project/root/pull/5751:43,safety,test,tests,43,Remove unused includes in math sources and tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5751
https://github.com/root-project/root/pull/5751:43,testability,test,tests,43,Remove unused includes in math sources and tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5751
https://github.com/root-project/root/pull/5753:9,deployability,Instal,Install,9,[tcling] Install the JIT symbol resolution hook after initializing dyld.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5753
https://github.com/root-project/root/pull/5753:43,testability,hook,hook,43,[tcling] Install the JIT symbol resolution hook after initializing dyld.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5753
https://github.com/root-project/root/pull/5755:106,deployability,modul,modules,106,[rootcling] Misc NFC refactoring; @gargvaibhav64 please let us know if that fixes the issues you see with modules on windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5755
https://github.com/root-project/root/pull/5755:21,modifiability,refact,refactoring,21,[rootcling] Misc NFC refactoring; @gargvaibhav64 please let us know if that fixes the issues you see with modules on windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5755
https://github.com/root-project/root/pull/5755:106,modifiability,modul,modules,106,[rootcling] Misc NFC refactoring; @gargvaibhav64 please let us know if that fixes the issues you see with modules on windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5755
https://github.com/root-project/root/pull/5755:21,performance,refactor,refactoring,21,[rootcling] Misc NFC refactoring; @gargvaibhav64 please let us know if that fixes the issues you see with modules on windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5755
https://github.com/root-project/root/pull/5755:106,safety,modul,modules,106,[rootcling] Misc NFC refactoring; @gargvaibhav64 please let us know if that fixes the issues you see with modules on windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5755
https://github.com/root-project/root/pull/5756:386,energy efficiency,optim,optimization,386,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:470,energy efficiency,load,loading,470,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:174,integrability,interfac,interface,174,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:174,interoperability,interfac,interface,174,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:174,modifiability,interfac,interface,174,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:374,performance,performance optim,performance optimization,374,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:470,performance,load,loading,470,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:446,safety,avoid,avoid,446,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:531,safety,avoid,avoid,531,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:625,security,control,controlled,625,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:625,testability,control,controlled,625,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5756:374,usability,perform,performance,374,"We meant fIsAutoParsingSuspended instead of IsAutoLoadingEnabled(); There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5756
https://github.com/root-project/root/pull/5757:130,deployability,modul,module,130,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:251,deployability,updat,updating,251,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:721,energy efficiency,load,load,721,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:841,energy efficiency,optim,optimizer,841,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:876,energy efficiency,model,model,876,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:893,energy efficiency,schedul,scheduler,893,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:942,energy efficiency,model,model,942,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:948,energy efficiency,predict,prediction,948,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:968,energy efficiency,load,loading,968,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1157,energy efficiency,Load,Load,1157,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1169,energy efficiency,model,model,1169,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1241,energy efficiency,model,model,1241,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1247,energy efficiency,predict,prediction,1247,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1363,energy efficiency,Load,Load,1363,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1375,energy efficiency,model,model,1375,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1447,energy efficiency,model,model,1447,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1453,energy efficiency,predict,prediction,1453,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1569,energy efficiency,Load,Load,1569,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1581,energy efficiency,model,model,1581,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1653,energy efficiency,model,model,1653,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1659,energy efficiency,predict,prediction,1659,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1692,energy efficiency,GPU,GPU,1692,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1708,energy efficiency,GPU,GPU,1708,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1732,energy efficiency,GPU,GPU,1732,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:21,integrability,Interfac,Interface,21,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:91,integrability,Interfac,Interface,91,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:21,interoperability,Interfac,Interface,21,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:91,interoperability,Interfac,Interface,91,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:163,interoperability,share,share,163,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1712,interoperability,Compatib,Compatible,1712,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:21,modifiability,Interfac,Interface,21,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:91,modifiability,Interfac,Interface,91,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:130,modifiability,modul,module,130,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:188,modifiability,maintain,maintaining,188,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1192,modifiability,paramet,parameter,1192,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1398,modifiability,paramet,parameter,1398,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1604,modifiability,paramet,parameter,1604,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:721,performance,load,load,721,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:841,performance,optimiz,optimizer,841,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:893,performance,schedul,scheduler,893,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:968,performance,load,loading,968,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1157,performance,Load,Load,1157,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1363,performance,Load,Load,1363,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1569,performance,Load,Load,1569,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1692,performance,GPU,GPU,1692,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1708,performance,GPU,GPU,1708,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1732,performance,GPU,GPU,1732,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:130,safety,modul,module,130,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:188,safety,maintain,maintaining,188,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:251,safety,updat,updating,251,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:920,safety,Valid,Validation,920,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:948,safety,predict,prediction,948,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1056,safety,Test,Tests,1056,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1073,safety,test,testPyTorchClassification,1073,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1179,safety,test,test,1179,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1247,safety,predict,prediction,1247,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1287,safety,test,testPyTorchMulticlass,1287,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1385,safety,test,test,1385,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1453,safety,predict,prediction,1453,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1493,safety,test,testPyTorchRegression,1493,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1591,safety,test,test,1591,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1659,safety,predict,prediction,1659,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1740,safety,test,testing,1740,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:251,security,updat,updating,251,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:876,security,model,model,876,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:920,security,Validat,Validation,920,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:942,security,model,model,942,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1169,security,model,model,1169,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1241,security,model,model,1241,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1375,security,model,model,1375,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1447,security,model,model,1447,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1581,security,model,model,1581,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1653,security,model,model,1653,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:663,testability,simpl,simple,663,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1056,testability,Test,Tests,1056,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1073,testability,test,testPyTorchClassification,1073,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1179,testability,test,test,1179,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1219,testability,Verif,Verify,1219,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1287,testability,test,testPyTorchMulticlass,1287,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1385,testability,test,test,1385,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1425,testability,Verif,Verify,1425,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1493,testability,test,testPyTorchRegression,1493,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1591,testability,test,test,1591,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1631,testability,Verif,Verify,1631,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1740,testability,test,testing,1740,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:169,usability,feedback,feedback,169,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:263,usability,progress,progress,263,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:318,usability,Progress,Progress,318,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:663,usability,simpl,simple,663,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:736,usability,user,users,736,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1001,usability,user,user,1001,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1036,usability,help,helper,1036,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5757:1799,usability,Document,Documentation,1799,"[GSoC][TMVA] PyTorch Interface TMVA; This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header. - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch. - [x] Implement the basic outline of the MethodPyTorch Class. - [x] Implement the DeclareOptions methods. - [x] Implement ProcessOptions methods. - [x] Implement SetupTorchModel method. - [x] Implement train methods. (Done). - [x] Implement simple basic structure for training. - [x] Add ability to load code from users. - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders. - [x] Use default (optional optimizer SGD). - [x] Add savebest model. - [x] Add scheduler. - [x] Implement Validation. - [x] Add model prediction function loading ability. - [x] Implement user code ability. - [x] Implement helper function. ## Tests. - [x] Add testPyTorchClassification.C. - [x] Add generatePyTorchModelClassification.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchMulticlass.C. - [x] Add generatePyTorchModelMulticlass.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. - [x] Add testPyTorchRegression.C. - [x] Add generatePyTorchModelRegression.py. - [x] Load, Train model and test all the parameter arguments. - [x] Verify response after model prediction function is added. ## GPU. - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials. These are implemented in #6273. ## Documentation. - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5757
https://github.com/root-project/root/pull/5761:27,integrability,sub,subdirectories,27,[CMake][Exp PyROOT] Remove subdirectories remnants;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5761
https://github.com/root-project/root/pull/5762:602,availability,Sli,Slight,602,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:58,deployability,depend,dependencies,58,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:49,energy efficiency,reduc,reducing,49,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:58,integrability,depend,dependencies,58,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:262,interoperability,compatib,compatibility,262,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:58,modifiability,depend,dependencies,58,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:461,performance,time,time,461,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:558,performance,lock,lock,558,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:602,reliability,Sli,Slight,602,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:58,safety,depend,dependencies,58,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:558,security,lock,lock,558,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5762:58,testability,depend,dependencies,58,"Use std::mutex for gErrorMutex; In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?). - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though. - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5762
https://github.com/root-project/root/pull/5764:126,availability,failur,failure,126,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:151,availability,servic,services,151,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:126,deployability,fail,failure,126,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:151,deployability,servic,services,151,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:203,deployability,build,build,203,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:339,deployability,fail,fails,339,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:151,integrability,servic,services,151,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:151,modifiability,servic,services,151,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:524,modifiability,variab,variables,524,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:126,performance,failur,failure,126,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:299,performance,time,time,299,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:369,performance,time,time,369,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:126,reliability,fail,failure,126,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:339,reliability,fail,fails,339,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5764:428,safety,avoid,avoid,428,"[CMake][Exp PyROOT] Set PYTHON_EXECUTABLE before looking for Developm…; …ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one. first time, is unset if find_package(PythonX) fails when called the. second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we. set it (along with other variables) right after the first call to. find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5764
https://github.com/root-project/root/pull/5766:28,energy efficiency,core,core,28,Remove unused includes from core/tree/io classes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5766
https://github.com/root-project/root/pull/5768:113,deployability,build,building,113,[ntuple] [WIP] NTuple field iterators; Implements an iterator over the field descriptors of an NTuple. This is a building block for comparing and merging two NTuples by only looking at their descriptors.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5768
https://github.com/root-project/root/pull/5769:314,availability,operat,operations,314,"[RF][ROOT-10810] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), a memory-resident tree in RooTreeDataStore fails to. pickle. It had to be taken out of ROOT's streamer facilities, since it often. exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5769
https://github.com/root-project/root/pull/5769:184,deployability,fail,fails,184,"[RF][ROOT-10810] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), a memory-resident tree in RooTreeDataStore fails to. pickle. It had to be taken out of ROOT's streamer facilities, since it often. exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5769
https://github.com/root-project/root/pull/5769:143,performance,memor,memory-resident,143,"[RF][ROOT-10810] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), a memory-resident tree in RooTreeDataStore fails to. pickle. It had to be taken out of ROOT's streamer facilities, since it often. exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5769
https://github.com/root-project/root/pull/5769:184,reliability,fail,fails,184,"[RF][ROOT-10810] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), a memory-resident tree in RooTreeDataStore fails to. pickle. It had to be taken out of ROOT's streamer facilities, since it often. exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5769
https://github.com/root-project/root/pull/5769:326,safety,Test,Test,326,"[RF][ROOT-10810] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), a memory-resident tree in RooTreeDataStore fails to. pickle. It had to be taken out of ROOT's streamer facilities, since it often. exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5769
https://github.com/root-project/root/pull/5769:326,testability,Test,Test,326,"[RF][ROOT-10810] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), a memory-resident tree in RooTreeDataStore fails to. pickle. It had to be taken out of ROOT's streamer facilities, since it often. exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5769
https://github.com/root-project/root/pull/5769:143,usability,memor,memory-resident,143,"[RF][ROOT-10810] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), a memory-resident tree in RooTreeDataStore fails to. pickle. It had to be taken out of ROOT's streamer facilities, since it often. exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5769
https://github.com/root-project/root/pull/5770:0,deployability,Build,Build,0,Build libcppyy and libROOTPythonizations with undefined symbols; Alternative to #5643 which does not use ROOT_LIBRARY_PROPERTIES,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5770
https://github.com/root-project/root/pull/5770:92,reliability,doe,does,92,Build libcppyy and libROOTPythonizations with undefined symbols; Alternative to #5643 which does not use ROOT_LIBRARY_PROPERTIES,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5770
https://github.com/root-project/root/pull/5771:31,modifiability,variab,variables,31,[CMake][Exp PyROOT] Fix Python variables in root-config output;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5771
https://github.com/root-project/root/pull/5772:257,deployability,build,build,257,"[PyROOT][CMake] Remove pyroot_experimental flag, create pyroot_legacy; With 6.22, the new PyROOT will not be experimental anymore and become the default. This PR proposes to get rid of the `pyroot_experimental` CMake flag and create a new one to request to build with the old PyROOT (`pyroot_legacy`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5772
https://github.com/root-project/root/pull/5773:27,integrability,sub,subdirectories,27,[CMake][Exp PyROOT] Remove subdirectories remnants;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5773
https://github.com/root-project/root/pull/5774:28,availability,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5774:46,deployability,version,version,46,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5774:92,deployability,build,build,92,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5774:46,integrability,version,version,46,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5774:46,modifiability,version,version,46,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5774:28,performance,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5774:28,safety,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5774:28,usability,error,error,28,[Exp PyROOT] Raise detailed error when Python version is different fr…; …om the one used to build libcppyy. Suggested by Chris Burr,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5774
https://github.com/root-project/root/pull/5775:110,availability,avail,available,110,"[cmake] Fix ROOT/RLogger.hxx not found:; When building without root7 but with C++14, RLogger is used. Make it available to the include directories.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5775
https://github.com/root-project/root/pull/5775:46,deployability,build,building,46,"[cmake] Fix ROOT/RLogger.hxx not found:; When building without root7 but with C++14, RLogger is used. Make it available to the include directories.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5775
https://github.com/root-project/root/pull/5775:110,reliability,availab,available,110,"[cmake] Fix ROOT/RLogger.hxx not found:; When building without root7 but with C++14, RLogger is used. Make it available to the include directories.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5775
https://github.com/root-project/root/pull/5775:110,safety,avail,available,110,"[cmake] Fix ROOT/RLogger.hxx not found:; When building without root7 but with C++14, RLogger is used. Make it available to the include directories.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5775
https://github.com/root-project/root/pull/5775:110,security,availab,available,110,"[cmake] Fix ROOT/RLogger.hxx not found:; When building without root7 but with C++14, RLogger is used. Make it available to the include directories.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5775
https://github.com/root-project/root/pull/5777:292,availability,restor,restored,292,"[RF] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), there's no parent directory. It was assumed, however,. that such a parent always exists. Here, this assumption is removed, and the default streaming behaviour. is restored if the parent is not a TDirectory. (cherry picked from commit ff14b62014507f7bd944ef57ca52f4cad486a17f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5777
https://github.com/root-project/root/pull/5777:292,reliability,restor,restored,292,"[RF] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), there's no parent directory. It was assumed, however,. that such a parent always exists. Here, this assumption is removed, and the default streaming behaviour. is restored if the parent is not a TDirectory. (cherry picked from commit ff14b62014507f7bd944ef57ca52f4cad486a17f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5777
https://github.com/root-project/root/pull/5777:278,usability,behavi,behaviour,278,"[RF] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), there's no parent directory. It was assumed, however,. that such a parent always exists. Here, this assumption is removed, and the default streaming behaviour. is restored if the parent is not a TDirectory. (cherry picked from commit ff14b62014507f7bd944ef57ca52f4cad486a17f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5777
https://github.com/root-project/root/pull/5781:292,availability,restor,restored,292,"[RF] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), there's no parent directory. It was assumed, however,. that such a parent always exists. Here, this assumption is removed, and the default streaming behaviour. is restored if the parent is not a TDirectory. (cherry picked from commit ff14b62014507f7bd944ef57ca52f4cad486a17f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5781
https://github.com/root-project/root/pull/5781:292,reliability,restor,restored,292,"[RF] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), there's no parent directory. It was assumed, however,. that such a parent always exists. Here, this assumption is removed, and the default streaming behaviour. is restored if the parent is not a TDirectory. (cherry picked from commit ff14b62014507f7bd944ef57ca52f4cad486a17f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5781
https://github.com/root-project/root/pull/5781:278,usability,behavi,behaviour,278,"[RF] Fix pickling of RooTreeDataStore.; [ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens. when pickling), there's no parent directory. It was assumed, however,. that such a parent always exists. Here, this assumption is removed, and the default streaming behaviour. is restored if the parent is not a TDirectory. (cherry picked from commit ff14b62014507f7bd944ef57ca52f4cad486a17f)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5781
https://github.com/root-project/root/pull/5782:11,deployability,modul,module,11,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5782:31,deployability,depend,dependency,31,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5782:31,integrability,depend,dependency,31,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5782:11,modifiability,modul,module,11,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5782:31,modifiability,depend,dependency,31,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5782:11,safety,modul,module,11,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5782:31,safety,depend,dependency,31,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5782:31,testability,depend,dependency,31,RConfigure module / dictionary dependency;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5782
https://github.com/root-project/root/pull/5783:0,deployability,Updat,Update,0,"Update 6.22 Release notes for TMVA , Math and Histogram Library;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5783
https://github.com/root-project/root/pull/5783:12,deployability,Releas,Release,12,"Update 6.22 Release notes for TMVA , Math and Histogram Library;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5783
https://github.com/root-project/root/pull/5783:0,safety,Updat,Update,0,"Update 6.22 Release notes for TMVA , Math and Histogram Library;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5783
https://github.com/root-project/root/pull/5783:0,security,Updat,Update,0,"Update 6.22 Release notes for TMVA , Math and Histogram Library;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5783
https://github.com/root-project/root/pull/5785:105,deployability,updat,update,105,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5785:22,safety,test,test,22,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5785:73,safety,test,test,73,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5785:105,safety,updat,update,105,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5785:105,security,updat,update,105,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5785:22,testability,test,test,22,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5785:73,testability,test,test,73,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5785:116,usability,help,help,116,Use __CLING__ flag to test if interpreter is used; Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5785
https://github.com/root-project/root/pull/5786:35,deployability,build,build,35,Create html file from README.md in build dir; because CPack is unable to package markdown files on macOS. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5786
https://github.com/root-project/root/pull/5786:73,modifiability,pac,package,73,Create html file from README.md in build dir; because CPack is unable to package markdown files on macOS. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5786
https://github.com/root-project/root/pull/5787:196,availability,failur,failure,196,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:122,deployability,log,logic,122,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:196,deployability,fail,failure,196,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:196,performance,failur,failure,196,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:9,reliability,diagno,diagnostic,9,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:196,reliability,fail,failure,196,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:122,safety,log,logic,122,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:122,security,log,logic,122,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:9,testability,diagno,diagnostic,9,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:122,testability,log,logic,122,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5787:288,usability,user,user,288,"[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray; `&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5787
https://github.com/root-project/root/pull/5788:9,reliability,diagno,diagnostic,9,[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray (v6.20); This fixes ROOT-10822.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5788
https://github.com/root-project/root/pull/5788:9,testability,diagno,diagnostic,9,[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray (v6.20); This fixes ROOT-10822.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5788
https://github.com/root-project/root/pull/5789:9,reliability,diagno,diagnostic,9,[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray (v6.22); This fixes ROOT-10822.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5789
https://github.com/root-project/root/pull/5789:9,testability,diagno,diagnostic,9,[DF] Fix diagnostic of sparse/contiguous storage in TTreeReaderArray (v6.22); This fixes ROOT-10822.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5789
https://github.com/root-project/root/pull/5790:239,availability,error,error,239,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:325,deployability,automat,automatically,325,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:469,deployability,build,build,469,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:545,deployability,build,build,545,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:625,deployability,build,build,625,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:245,integrability,messag,message,245,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:121,interoperability,specif,specified,121,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:245,interoperability,messag,message,245,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:239,performance,error,error,239,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:239,safety,error,error,239,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:419,safety,review,reviewers,419,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:325,testability,automat,automatically,325,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:419,testability,review,reviewers,419,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5790:239,usability,error,error,239,"[PyROOT][CMake] pyroot and pyroot_legacy interplay; As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:. 1. `-Dpyroot=ON` means ""build me PyROOT"". 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5790
https://github.com/root-project/root/pull/5791:0,energy efficiency,Optim,Optimize,0,"Optimize Rtypes.h include; There are many standard include in Rtypes.h like `stdio.h` or `string.h` or `snprintf.h`. All these includes appears in 99% of ROOT sources - without real use. Try to minimize usage of such includes in headers, moving them to source where needed. Also replace `Rtypes.h` by `RtypesCore.h` where it make sense. Introduce `strtok.h` include which provides `R__STRTOK_R` method, use it only where really required",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791
https://github.com/root-project/root/pull/5791:42,interoperability,standard,standard,42,"Optimize Rtypes.h include; There are many standard include in Rtypes.h like `stdio.h` or `string.h` or `snprintf.h`. All these includes appears in 99% of ROOT sources - without real use. Try to minimize usage of such includes in headers, moving them to source where needed. Also replace `Rtypes.h` by `RtypesCore.h` where it make sense. Introduce `strtok.h` include which provides `R__STRTOK_R` method, use it only where really required",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791
https://github.com/root-project/root/pull/5791:0,performance,Optimiz,Optimize,0,"Optimize Rtypes.h include; There are many standard include in Rtypes.h like `stdio.h` or `string.h` or `snprintf.h`. All these includes appears in 99% of ROOT sources - without real use. Try to minimize usage of such includes in headers, moving them to source where needed. Also replace `Rtypes.h` by `RtypesCore.h` where it make sense. Introduce `strtok.h` include which provides `R__STRTOK_R` method, use it only where really required",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791
https://github.com/root-project/root/pull/5791:194,usability,minim,minimize,194,"Optimize Rtypes.h include; There are many standard include in Rtypes.h like `stdio.h` or `string.h` or `snprintf.h`. All these includes appears in 99% of ROOT sources - without real use. Try to minimize usage of such includes in headers, moving them to source where needed. Also replace `Rtypes.h` by `RtypesCore.h` where it make sense. Introduce `strtok.h` include which provides `R__STRTOK_R` method, use it only where really required",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5791
https://github.com/root-project/root/pull/5792:129,security,auth,authored-by,129,Fix circular includes Rtypes.h/TGenericClassInfo.h [ROOT-10820] v6.22; Make possible to include TGenericClassInfo.h directly. Co-authored-by: Philippe Canal <pcanal@fnal.gov>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5792
https://github.com/root-project/root/pull/5793:38,deployability,modul,modulemaps,38,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:88,deployability,modul,modulemaps,88,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:174,deployability,modul,module-maps,174,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:236,deployability,modul,modulemap,236,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:261,deployability,patch,patch,261,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:299,deployability,modul,module-maps,299,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:38,modifiability,modul,modulemaps,38,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:88,modifiability,modul,modulemaps,88,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:174,modifiability,modul,module-maps,174,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:236,modifiability,modul,modulemap,236,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:299,modifiability,modul,module-maps,299,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:38,safety,modul,modulemaps,38,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:88,safety,modul,modulemaps,88,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:174,safety,modul,module-maps,174,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:236,safety,modul,modulemap,236,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:261,safety,patch,patch,261,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:299,safety,modul,module-maps,299,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5793:261,security,patch,patch,261,[cxxmodules] Do not register optional modulemaps.; For some common libraries we provide modulemaps such as tinyxml2 and boost. Independently whether implicit or fno-implicit-module-maps is selected we insert an overlay and register the modulemap directly. This patch disables this when fno-implicit-module-maps is chosen. This should resolve ROOT-10803 introduced by root-project/root#5709,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5793
https://github.com/root-project/root/pull/5795:29,deployability,modul,modules,29,[cxxmodules] Remove excluded modules workaround. Now we can do it in cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5795
https://github.com/root-project/root/pull/5795:29,modifiability,modul,modules,29,[cxxmodules] Remove excluded modules workaround. Now we can do it in cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5795
https://github.com/root-project/root/pull/5795:29,safety,modul,modules,29,[cxxmodules] Remove excluded modules workaround. Now we can do it in cmake;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5795
https://github.com/root-project/root/pull/5796:34,deployability,depend,dependency,34,[wincxxmodules] Remove Cling as a dependency of win32gdk; This commit is necessary as Cling does not have a .pcm file which causes problems when we try to build with flag -Druntime_cxxmodules=On on Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5796
https://github.com/root-project/root/pull/5796:155,deployability,build,build,155,[wincxxmodules] Remove Cling as a dependency of win32gdk; This commit is necessary as Cling does not have a .pcm file which causes problems when we try to build with flag -Druntime_cxxmodules=On on Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5796
https://github.com/root-project/root/pull/5796:34,integrability,depend,dependency,34,[wincxxmodules] Remove Cling as a dependency of win32gdk; This commit is necessary as Cling does not have a .pcm file which causes problems when we try to build with flag -Druntime_cxxmodules=On on Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5796
https://github.com/root-project/root/pull/5796:34,modifiability,depend,dependency,34,[wincxxmodules] Remove Cling as a dependency of win32gdk; This commit is necessary as Cling does not have a .pcm file which causes problems when we try to build with flag -Druntime_cxxmodules=On on Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5796
https://github.com/root-project/root/pull/5796:92,reliability,doe,does,92,[wincxxmodules] Remove Cling as a dependency of win32gdk; This commit is necessary as Cling does not have a .pcm file which causes problems when we try to build with flag -Druntime_cxxmodules=On on Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5796
https://github.com/root-project/root/pull/5796:34,safety,depend,dependency,34,[wincxxmodules] Remove Cling as a dependency of win32gdk; This commit is necessary as Cling does not have a .pcm file which causes problems when we try to build with flag -Druntime_cxxmodules=On on Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5796
https://github.com/root-project/root/pull/5796:34,testability,depend,dependency,34,[wincxxmodules] Remove Cling as a dependency of win32gdk; This commit is necessary as Cling does not have a .pcm file which causes problems when we try to build with flag -Druntime_cxxmodules=On on Windows. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5796
https://github.com/root-project/root/pull/5798:4,deployability,log,logic,4,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:22,deployability,depend,dependencies,22,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:74,deployability,depend,dependent,74,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:84,deployability,modul,module,84,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:221,deployability,depend,dependancy,221,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:22,integrability,depend,dependencies,22,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:74,integrability,depend,dependent,74,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:221,integrability,depend,dependancy,221,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:56,interoperability,specif,specified,56,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:108,interoperability,specif,specified,108,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:238,interoperability,specif,specify,238,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:22,modifiability,depend,dependencies,22,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:74,modifiability,depend,dependent,74,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:84,modifiability,modul,module,84,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:221,modifiability,depend,dependancy,221,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:4,safety,log,logic,4,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:22,safety,depend,dependencies,22,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:74,safety,depend,dependent,74,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:84,safety,modul,module,84,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:221,safety,depend,dependancy,221,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:4,security,log,logic,4,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:4,testability,log,logic,4,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:22,testability,depend,dependencies,22,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:74,testability,depend,dependent,74,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5798:221,testability,depend,dependancy,221,"Fix logic of handling dependencies when NO_CXXMODULE is specified; When a dependent module has NO_CXXMODULE specified, we do not generate it's .pcm file. . This commit ensures CMake checks for NO_CXXMODULE property for a dependancy. Also specify NO_CXXMODULE for Tree on Windows. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5798
https://github.com/root-project/root/pull/5799:5,safety,test,test,5,Move test file that was added to pyroot-experimental after it was ren…; …amed,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5799
https://github.com/root-project/root/pull/5799:5,testability,test,test,5,Move test file that was added to pyroot-experimental after it was ren…; …amed,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5799
https://github.com/root-project/root/pull/5800:73,availability,error,error,73,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:274,availability,error,error,274,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:33,deployability,build,build,33,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:91,deployability,build,building,91,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:200,deployability,build,build,200,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:243,deployability,build,build,243,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:339,deployability,build,build,339,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:417,deployability,build,build,417,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:356,energy efficiency,core,core,356,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:73,performance,error,error,73,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:274,performance,error,error,274,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:73,safety,error,error,73,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:274,safety,error,error,274,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:309,security,ident,identifier,309,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:73,usability,error,error,73,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5800:274,usability,error,error,274,"[wincxxmodules] Fix MathCore.pcm build on Windows; This commit fixes the error received on building MathCore.pcm on Windows. ```. In file included from input_line_16:9:. In file included from C:/root-build/include\Fit/FitConfig.h:23:. C:/root-build/include\TMath.h(782,13): error G30564CF7: use of undeclared identifier '_finite' [C:\root-build\math\math. core\G__MathCore.vcxproj]. { return finite(x); }. ^. C:/root-build/include\TMath.h:571:22: note: expanded from macro 'finite'. # define finite _finite. ^. ```. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5800
https://github.com/root-project/root/pull/5801:29,deployability,releas,release,29,[skip-ci][PyROOT] A few more release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5801
https://github.com/root-project/root/pull/5803:19,availability,error,error,19,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:35,deployability,patch,patches,35,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:19,performance,error,error,19,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:14,safety,test,test,14,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:19,safety,error,error,19,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:35,safety,patch,patches,35,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:35,security,patch,patches,35,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:14,testability,test,test,14,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5803:19,usability,error,error,19,[Draft] Debug test error in TError patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5803
https://github.com/root-project/root/pull/5806:265,availability,operat,operation,265,"[clingutils] Add the typeid().name() as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5806
https://github.com/root-project/root/pull/5806:476,performance,overhead,overhead,476,"[clingutils] Add the typeid().name() as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5806
https://github.com/root-project/root/pull/5807:152,deployability,fail,fail,152,"[ntuple] move all relatively long-running tests (>5s) to the end; Small quality of life improvement, non-functional change. . This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5807
https://github.com/root-project/root/pull/5807:152,reliability,fail,fail,152,"[ntuple] move all relatively long-running tests (>5s) to the end; Small quality of life improvement, non-functional change. . This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5807
https://github.com/root-project/root/pull/5807:42,safety,test,tests,42,"[ntuple] move all relatively long-running tests (>5s) to the end; Small quality of life improvement, non-functional change. . This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5807
https://github.com/root-project/root/pull/5807:141,safety,test,test,141,"[ntuple] move all relatively long-running tests (>5s) to the end; Small quality of life improvement, non-functional change. . This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5807
https://github.com/root-project/root/pull/5807:42,testability,test,tests,42,"[ntuple] move all relatively long-running tests (>5s) to the end; Small quality of life improvement, non-functional change. . This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5807
https://github.com/root-project/root/pull/5807:141,testability,test,test,141,"[ntuple] move all relatively long-running tests (>5s) to the end; Small quality of life improvement, non-functional change. . This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5807
https://github.com/root-project/root/pull/5807:131,usability,help,helps,131,"[ntuple] move all relatively long-running tests (>5s) to the end; Small quality of life improvement, non-functional change. . This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5807
https://github.com/root-project/root/pull/5812:52,availability,operat,operator,52,"Fix compilation warings in mathtext; Provide assign operator for the point_t class which have copy constructor. Fixes compilation error when trying to compile with cxxmodules=ON,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5812
https://github.com/root-project/root/pull/5812:130,availability,error,error,130,"Fix compilation warings in mathtext; Provide assign operator for the point_t class which have copy constructor. Fixes compilation error when trying to compile with cxxmodules=ON,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5812
https://github.com/root-project/root/pull/5812:130,performance,error,error,130,"Fix compilation warings in mathtext; Provide assign operator for the point_t class which have copy constructor. Fixes compilation error when trying to compile with cxxmodules=ON,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5812
https://github.com/root-project/root/pull/5812:130,safety,error,error,130,"Fix compilation warings in mathtext; Provide assign operator for the point_t class which have copy constructor. Fixes compilation error when trying to compile with cxxmodules=ON,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5812
https://github.com/root-project/root/pull/5812:130,usability,error,error,130,"Fix compilation warings in mathtext; Provide assign operator for the point_t class which have copy constructor. Fixes compilation error when trying to compile with cxxmodules=ON,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5812
https://github.com/root-project/root/pull/5813:53,interoperability,XML,XML,53,Allow empty comments in TXMLEngine parser; Let pasre XML code with comment like `<!---->`. which should be normal empty comment,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5813
https://github.com/root-project/root/pull/5814:194,performance,time,time,194,Use ClassDefInline macro for several ROOT classes [ROOT-6284]; For TParameter and TNDArrayT templated classes special workaround were provided . to support dictionaries generation. Since a long time problem was solved by introducing `ClassDefInline` macros. Now try to resolve remaining problems.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5814
https://github.com/root-project/root/pull/5814:148,usability,support,support,148,Use ClassDefInline macro for several ROOT classes [ROOT-6284]; For TParameter and TNDArrayT templated classes special workaround were provided . to support dictionaries generation. Since a long time problem was solved by introducing `ClassDefInline` macros. Now try to resolve remaining problems.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5814
https://github.com/root-project/root/pull/5816:50,deployability,build,builds,50,[cling]Fix travis not triggering; Remove excluded builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5816
https://github.com/root-project/root/pull/5819:260,availability,operat,operation,260,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:511,deployability,fail,failed,511,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:671,deployability,fail,failed,671,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:728,deployability,fail,failing,728,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:793,deployability,Contain,Containers,793,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:824,deployability,Contain,Containers,824,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:887,deployability,unload,unloading,887,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:902,deployability,fail,fails,902,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:681,energy efficiency,load,load,681,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:646,integrability,Event,Event,646,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:776,integrability,Event,Event,776,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:1034,integrability,sub,subsequent,1034,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:681,performance,load,load,681,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:1307,performance,overhead,overhead,1307,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:511,reliability,fail,failed,511,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:671,reliability,fail,failed,671,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:728,reliability,fail,failing,728,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:902,reliability,fail,fails,902,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:460,safety,compl,complex,460,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:911,safety,compl,completely,911,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:460,security,compl,complex,460,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:836,security,hash,hashmap,836,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:911,security,compl,completely,911,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5819:1079,testability,assert,asserts,1079,"[clingutils] Add demangled name as alternate class name (ROOT-10804):; clang might need to find a definition, that ""we"" might have. But we need to find it based on a type name from clang, from a fwd decl;. or (as in ROOT-10804) based on a typename-from-typeid operation. So register that as an alias! The normalized-name-as-known-to-ROOT and typeid-name can be different,. for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed. because it involves an inline namespace, and LHCb uses typeid demangling. LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`). that failed to load because `v1` is an inline namespace, thus failing. instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid. The transaction unloading then fails to completely remove this instantiation. (an unrelated bug), such that the remainders of the invalid decl are picked. up by a subsequent template instantiation which then asserts because of the. incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling. Now that multiple locations need it, just store it with the AnnotatedRecordDecl. It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5819
https://github.com/root-project/root/pull/5820:0,energy efficiency,Optim,Optimize,0,"Optimize tmva includes; Use RtypesCore.h where Rtypes.h not required. Place `<vector>`, `<string>`, `<map>`, `<utility>` includes where. correspondent standard classes are used. In rare cases remove such unused standard includes. Remove `TString.h` where not used. Also remove three temporary files which accidentally comes to repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5820
https://github.com/root-project/root/pull/5820:327,integrability,repositor,repository,327,"Optimize tmva includes; Use RtypesCore.h where Rtypes.h not required. Place `<vector>`, `<string>`, `<map>`, `<utility>` includes where. correspondent standard classes are used. In rare cases remove such unused standard includes. Remove `TString.h` where not used. Also remove three temporary files which accidentally comes to repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5820
https://github.com/root-project/root/pull/5820:151,interoperability,standard,standard,151,"Optimize tmva includes; Use RtypesCore.h where Rtypes.h not required. Place `<vector>`, `<string>`, `<map>`, `<utility>` includes where. correspondent standard classes are used. In rare cases remove such unused standard includes. Remove `TString.h` where not used. Also remove three temporary files which accidentally comes to repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5820
https://github.com/root-project/root/pull/5820:211,interoperability,standard,standard,211,"Optimize tmva includes; Use RtypesCore.h where Rtypes.h not required. Place `<vector>`, `<string>`, `<map>`, `<utility>` includes where. correspondent standard classes are used. In rare cases remove such unused standard includes. Remove `TString.h` where not used. Also remove three temporary files which accidentally comes to repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5820
https://github.com/root-project/root/pull/5820:327,interoperability,repositor,repository,327,"Optimize tmva includes; Use RtypesCore.h where Rtypes.h not required. Place `<vector>`, `<string>`, `<map>`, `<utility>` includes where. correspondent standard classes are used. In rare cases remove such unused standard includes. Remove `TString.h` where not used. Also remove three temporary files which accidentally comes to repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5820
https://github.com/root-project/root/pull/5820:0,performance,Optimiz,Optimize,0,"Optimize tmva includes; Use RtypesCore.h where Rtypes.h not required. Place `<vector>`, `<string>`, `<map>`, `<utility>` includes where. correspondent standard classes are used. In rare cases remove such unused standard includes. Remove `TString.h` where not used. Also remove three temporary files which accidentally comes to repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5820
https://github.com/root-project/root/pull/5820:305,safety,accid,accidentally,305,"Optimize tmva includes; Use RtypesCore.h where Rtypes.h not required. Place `<vector>`, `<string>`, `<map>`, `<utility>` includes where. correspondent standard classes are used. In rare cases remove such unused standard includes. Remove `TString.h` where not used. Also remove three temporary files which accidentally comes to repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5820
https://github.com/root-project/root/pull/5821:0,energy efficiency,Optim,Optimize,0,"Optimize math includes; Use RtypesCore.h instead Rtypes.h when ClassDef macro is not required. Provide missing in many places `<vector>` and `<string>` include -. they are not provided by RtypesCore.h. Replace TString.h by `<cstring>` include in one tmatrix. Remove ancient workaround in MnMatrix.h. As a result TMathBase.h and TMath.h will include RtypesCore.h, but not Rtypes.h - separate PR will be provided for all core headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5821
https://github.com/root-project/root/pull/5821:419,energy efficiency,core,core,419,"Optimize math includes; Use RtypesCore.h instead Rtypes.h when ClassDef macro is not required. Provide missing in many places `<vector>` and `<string>` include -. they are not provided by RtypesCore.h. Replace TString.h by `<cstring>` include in one tmatrix. Remove ancient workaround in MnMatrix.h. As a result TMathBase.h and TMath.h will include RtypesCore.h, but not Rtypes.h - separate PR will be provided for all core headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5821
https://github.com/root-project/root/pull/5821:0,performance,Optimiz,Optimize,0,"Optimize math includes; Use RtypesCore.h instead Rtypes.h when ClassDef macro is not required. Provide missing in many places `<vector>` and `<string>` include -. they are not provided by RtypesCore.h. Replace TString.h by `<cstring>` include in one tmatrix. Remove ancient workaround in MnMatrix.h. As a result TMathBase.h and TMath.h will include RtypesCore.h, but not Rtypes.h - separate PR will be provided for all core headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5821
https://github.com/root-project/root/pull/5822:0,energy efficiency,Optim,Optimize,0,"Optimize roofit includes; Provide standard includes like `<vector>` or `<map>` when correspondent class is used. In rare cases remove such standard includes if they are not used. Remove/replace unused includes like TObject.h, TNamed.h, TString.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5822
https://github.com/root-project/root/pull/5822:34,interoperability,standard,standard,34,"Optimize roofit includes; Provide standard includes like `<vector>` or `<map>` when correspondent class is used. In rare cases remove such standard includes if they are not used. Remove/replace unused includes like TObject.h, TNamed.h, TString.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5822
https://github.com/root-project/root/pull/5822:139,interoperability,standard,standard,139,"Optimize roofit includes; Provide standard includes like `<vector>` or `<map>` when correspondent class is used. In rare cases remove such standard includes if they are not used. Remove/replace unused includes like TObject.h, TNamed.h, TString.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5822
https://github.com/root-project/root/pull/5822:0,performance,Optimiz,Optimize,0,"Optimize roofit includes; Provide standard includes like `<vector>` or `<map>` when correspondent class is used. In rare cases remove such standard includes if they are not used. Remove/replace unused includes like TObject.h, TNamed.h, TString.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5822
https://github.com/root-project/root/pull/5823:0,energy efficiency,Optim,Optimize,0,Optimize tree/io includes; Provide standard includes where required. Replace `Rtypes.h` by `RtypesCore.h` where ClassDef not required. Remove `TString.h` where not used. Replace Riostream.h by necessary standard includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5823
https://github.com/root-project/root/pull/5823:35,interoperability,standard,standard,35,Optimize tree/io includes; Provide standard includes where required. Replace `Rtypes.h` by `RtypesCore.h` where ClassDef not required. Remove `TString.h` where not used. Replace Riostream.h by necessary standard includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5823
https://github.com/root-project/root/pull/5823:203,interoperability,standard,standard,203,Optimize tree/io includes; Provide standard includes where required. Replace `Rtypes.h` by `RtypesCore.h` where ClassDef not required. Remove `TString.h` where not used. Replace Riostream.h by necessary standard includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5823
https://github.com/root-project/root/pull/5823:0,performance,Optimiz,Optimize,0,Optimize tree/io includes; Provide standard includes where required. Replace `Rtypes.h` by `RtypesCore.h` where ClassDef not required. Remove `TString.h` where not used. Replace Riostream.h by necessary standard includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5823
https://github.com/root-project/root/pull/5824:0,energy efficiency,Optim,Optimize,0,Optimize gui includes; Provide standard includes like `<string>` where correspondent standard class is used. Remove `TString.h` where not used. Use `RtypesCore.h` instead `Rtypes.h` or `TObject.h` where feasible,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5824
https://github.com/root-project/root/pull/5824:31,interoperability,standard,standard,31,Optimize gui includes; Provide standard includes like `<string>` where correspondent standard class is used. Remove `TString.h` where not used. Use `RtypesCore.h` instead `Rtypes.h` or `TObject.h` where feasible,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5824
https://github.com/root-project/root/pull/5824:85,interoperability,standard,standard,85,Optimize gui includes; Provide standard includes like `<string>` where correspondent standard class is used. Remove `TString.h` where not used. Use `RtypesCore.h` instead `Rtypes.h` or `TObject.h` where feasible,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5824
https://github.com/root-project/root/pull/5824:0,performance,Optimiz,Optimize,0,Optimize gui includes; Provide standard includes like `<string>` where correspondent standard class is used. Remove `TString.h` where not used. Use `RtypesCore.h` instead `Rtypes.h` or `TObject.h` where feasible,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5824
https://github.com/root-project/root/pull/5825:0,energy efficiency,Optim,Optimize,0,Optimize hist/garf3d/net includes; Provide standard includes like `<vector>` where required. Use `RtypesCore.h` instead of `Rtypes.h` where feasible. Remove in several places standard includes which are not used,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5825
https://github.com/root-project/root/pull/5825:43,interoperability,standard,standard,43,Optimize hist/garf3d/net includes; Provide standard includes like `<vector>` where required. Use `RtypesCore.h` instead of `Rtypes.h` where feasible. Remove in several places standard includes which are not used,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5825
https://github.com/root-project/root/pull/5825:175,interoperability,standard,standard,175,Optimize hist/garf3d/net includes; Provide standard includes like `<vector>` where required. Use `RtypesCore.h` instead of `Rtypes.h` where feasible. Remove in several places standard includes which are not used,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5825
https://github.com/root-project/root/pull/5825:0,performance,Optimiz,Optimize,0,Optimize hist/garf3d/net includes; Provide standard includes like `<vector>` where required. Use `RtypesCore.h` instead of `Rtypes.h` where feasible. Remove in several places standard includes which are not used,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5825
https://github.com/root-project/root/pull/5826:0,energy efficiency,Optim,Optimize,0,"Optimize core includes; Replace `Rtypes.h` by `RtypesCore.h` where make sense. Most prominent place is `TMathBase.h` include - after this PR also `TMath.h` only will ""see"" `RtypesCore.h`. Provide STL includes (like `<vector>` or `<string>`) when correspondent class is used in header file. Remove unused standard includes in few places",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5826
https://github.com/root-project/root/pull/5826:9,energy efficiency,core,core,9,"Optimize core includes; Replace `Rtypes.h` by `RtypesCore.h` where make sense. Most prominent place is `TMathBase.h` include - after this PR also `TMath.h` only will ""see"" `RtypesCore.h`. Provide STL includes (like `<vector>` or `<string>`) when correspondent class is used in header file. Remove unused standard includes in few places",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5826
https://github.com/root-project/root/pull/5826:304,interoperability,standard,standard,304,"Optimize core includes; Replace `Rtypes.h` by `RtypesCore.h` where make sense. Most prominent place is `TMathBase.h` include - after this PR also `TMath.h` only will ""see"" `RtypesCore.h`. Provide STL includes (like `<vector>` or `<string>`) when correspondent class is used in header file. Remove unused standard includes in few places",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5826
https://github.com/root-project/root/pull/5826:0,performance,Optimiz,Optimize,0,"Optimize core includes; Replace `Rtypes.h` by `RtypesCore.h` where make sense. Most prominent place is `TMathBase.h` include - after this PR also `TMath.h` only will ""see"" `RtypesCore.h`. Provide STL includes (like `<vector>` or `<string>`) when correspondent class is used in header file. Remove unused standard includes in few places",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5826
https://github.com/root-project/root/pull/5828:29,safety,test,tests,29,Introducing cmake for unuran tests; For the moment just produce normal executabls - without gtest,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5828
https://github.com/root-project/root/pull/5828:29,testability,test,tests,29,Introducing cmake for unuran tests; For the moment just produce normal executabls - without gtest,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5828
https://github.com/root-project/root/pull/5829:73,energy efficiency,load,loading,73,"[cling] On Mac, try first without leading underscore:; Fixes unnecessary loading of (wrong) cppyy library because a symbol named ""_PyExc_SyntaxError"" cannot be found by dlsym.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5829
https://github.com/root-project/root/pull/5829:73,performance,load,loading,73,"[cling] On Mac, try first without leading underscore:; Fixes unnecessary loading of (wrong) cppyy library because a symbol named ""_PyExc_SyntaxError"" cannot be found by dlsym.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5829
https://github.com/root-project/root/pull/5830:153,deployability,observ,observed,153,"Fix ROOT7 Box tutorial; This PR introduces: . * Add SetRGBA function with a float alpha argument. * Change Color1 to green. So that Box1 border could be observed. * Change Color2 opacity to 0.7, and Box2 border width to 10. So that the change in Box2 border style could be observed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5830
https://github.com/root-project/root/pull/5830:273,deployability,observ,observed,273,"Fix ROOT7 Box tutorial; This PR introduces: . * Add SetRGBA function with a float alpha argument. * Change Color1 to green. So that Box1 border could be observed. * Change Color2 opacity to 0.7, and Box2 border width to 10. So that the change in Box2 border style could be observed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5830
https://github.com/root-project/root/pull/5830:117,energy efficiency,green,green,117,"Fix ROOT7 Box tutorial; This PR introduces: . * Add SetRGBA function with a float alpha argument. * Change Color1 to green. So that Box1 border could be observed. * Change Color2 opacity to 0.7, and Box2 border width to 10. So that the change in Box2 border style could be observed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5830
https://github.com/root-project/root/pull/5830:153,testability,observ,observed,153,"Fix ROOT7 Box tutorial; This PR introduces: . * Add SetRGBA function with a float alpha argument. * Change Color1 to green. So that Box1 border could be observed. * Change Color2 opacity to 0.7, and Box2 border width to 10. So that the change in Box2 border style could be observed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5830
https://github.com/root-project/root/pull/5830:273,testability,observ,observed,273,"Fix ROOT7 Box tutorial; This PR introduces: . * Add SetRGBA function with a float alpha argument. * Change Color1 to green. So that Box1 border could be observed. * Change Color2 opacity to 0.7, and Box2 border width to 10. So that the change in Box2 border style could be observed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5830
https://github.com/root-project/root/pull/5831:616,integrability,abstract,abstract,616,"[ntuple] Rename RField instances to match method names; Based on naming concerns here: https://github.com/root-project/root/pull/5805#discussion_r436115294, this PR renames the following classes: . * `RFieldVector -> RVectorField`. * `RFieldArray -> RArrayField`. * `RFieldClass -> RClassField`. * `RFieldCollection -> RCollectionField`. * `RFieldVariant -> RVariantField`. to match ""in-practice"" method names elsewhere, e.g.: . https://github.com/root-project/root/blob/a9e3f14dbbf81d32da03c04c43f904b06fde8e5e/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx#L48-L50. This also has the nice effect of delineating between abstract classes (`RFieldBase`, `RFieldFuse`) and concrete instances (`RArrayField`, `RVectorField`). . I will rebase #5805 on these changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5831
https://github.com/root-project/root/pull/5831:72,modifiability,concern,concerns,72,"[ntuple] Rename RField instances to match method names; Based on naming concerns here: https://github.com/root-project/root/pull/5805#discussion_r436115294, this PR renames the following classes: . * `RFieldVector -> RVectorField`. * `RFieldArray -> RArrayField`. * `RFieldClass -> RClassField`. * `RFieldCollection -> RCollectionField`. * `RFieldVariant -> RVariantField`. to match ""in-practice"" method names elsewhere, e.g.: . https://github.com/root-project/root/blob/a9e3f14dbbf81d32da03c04c43f904b06fde8e5e/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx#L48-L50. This also has the nice effect of delineating between abstract classes (`RFieldBase`, `RFieldFuse`) and concrete instances (`RArrayField`, `RVectorField`). . I will rebase #5805 on these changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5831
https://github.com/root-project/root/pull/5831:616,modifiability,abstract,abstract,616,"[ntuple] Rename RField instances to match method names; Based on naming concerns here: https://github.com/root-project/root/pull/5805#discussion_r436115294, this PR renames the following classes: . * `RFieldVector -> RVectorField`. * `RFieldArray -> RArrayField`. * `RFieldClass -> RClassField`. * `RFieldCollection -> RCollectionField`. * `RFieldVariant -> RVariantField`. to match ""in-practice"" method names elsewhere, e.g.: . https://github.com/root-project/root/blob/a9e3f14dbbf81d32da03c04c43f904b06fde8e5e/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx#L48-L50. This also has the nice effect of delineating between abstract classes (`RFieldBase`, `RFieldFuse`) and concrete instances (`RArrayField`, `RVectorField`). . I will rebase #5805 on these changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5831
https://github.com/root-project/root/pull/5831:387,reliability,pra,practice,387,"[ntuple] Rename RField instances to match method names; Based on naming concerns here: https://github.com/root-project/root/pull/5805#discussion_r436115294, this PR renames the following classes: . * `RFieldVector -> RVectorField`. * `RFieldArray -> RArrayField`. * `RFieldClass -> RClassField`. * `RFieldCollection -> RCollectionField`. * `RFieldVariant -> RVariantField`. to match ""in-practice"" method names elsewhere, e.g.: . https://github.com/root-project/root/blob/a9e3f14dbbf81d32da03c04c43f904b06fde8e5e/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx#L48-L50. This also has the nice effect of delineating between abstract classes (`RFieldBase`, `RFieldFuse`) and concrete instances (`RArrayField`, `RVectorField`). . I will rebase #5805 on these changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5831
https://github.com/root-project/root/pull/5831:72,testability,concern,concerns,72,"[ntuple] Rename RField instances to match method names; Based on naming concerns here: https://github.com/root-project/root/pull/5805#discussion_r436115294, this PR renames the following classes: . * `RFieldVector -> RVectorField`. * `RFieldArray -> RArrayField`. * `RFieldClass -> RClassField`. * `RFieldCollection -> RCollectionField`. * `RFieldVariant -> RVariantField`. to match ""in-practice"" method names elsewhere, e.g.: . https://github.com/root-project/root/blob/a9e3f14dbbf81d32da03c04c43f904b06fde8e5e/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx#L48-L50. This also has the nice effect of delineating between abstract classes (`RFieldBase`, `RFieldFuse`) and concrete instances (`RArrayField`, `RVectorField`). . I will rebase #5805 on these changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5831
https://github.com/root-project/root/pull/5832:18,deployability,Releas,Release,18,[skip-ci][PyROOT][Release Notes] Add note about vector<string> iteration;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5832
https://github.com/root-project/root/pull/5833:118,availability,error,errors,118,[vc] provide patch for gcc 10 warning; Some of VC methods are marked as deprecated and causing compiler. warnings (or errors) even when methods are not used. Should solve already reported by @lmoneta here https://github.com/VcDevel/Vc/issues/253,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5833
https://github.com/root-project/root/pull/5833:13,deployability,patch,patch,13,[vc] provide patch for gcc 10 warning; Some of VC methods are marked as deprecated and causing compiler. warnings (or errors) even when methods are not used. Should solve already reported by @lmoneta here https://github.com/VcDevel/Vc/issues/253,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5833
https://github.com/root-project/root/pull/5833:118,performance,error,errors,118,[vc] provide patch for gcc 10 warning; Some of VC methods are marked as deprecated and causing compiler. warnings (or errors) even when methods are not used. Should solve already reported by @lmoneta here https://github.com/VcDevel/Vc/issues/253,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5833
https://github.com/root-project/root/pull/5833:13,safety,patch,patch,13,[vc] provide patch for gcc 10 warning; Some of VC methods are marked as deprecated and causing compiler. warnings (or errors) even when methods are not used. Should solve already reported by @lmoneta here https://github.com/VcDevel/Vc/issues/253,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5833
https://github.com/root-project/root/pull/5833:118,safety,error,errors,118,[vc] provide patch for gcc 10 warning; Some of VC methods are marked as deprecated and causing compiler. warnings (or errors) even when methods are not used. Should solve already reported by @lmoneta here https://github.com/VcDevel/Vc/issues/253,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5833
https://github.com/root-project/root/pull/5833:13,security,patch,patch,13,[vc] provide patch for gcc 10 warning; Some of VC methods are marked as deprecated and causing compiler. warnings (or errors) even when methods are not used. Should solve already reported by @lmoneta here https://github.com/VcDevel/Vc/issues/253,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5833
https://github.com/root-project/root/pull/5833:118,usability,error,errors,118,[vc] provide patch for gcc 10 warning; Some of VC methods are marked as deprecated and causing compiler. warnings (or errors) even when methods are not used. Should solve already reported by @lmoneta here https://github.com/VcDevel/Vc/issues/253,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5833
https://github.com/root-project/root/pull/5834:49,availability,fault,faulty,49,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:56,deployability,log,logic,56,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:49,energy efficiency,fault,faulty,49,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:109,interoperability,platform,platform,109,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:73,modifiability,variab,variable,73,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:49,performance,fault,faulty,49,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:49,reliability,fault,faulty,49,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:49,safety,fault,faulty,49,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:56,safety,log,logic,56,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:56,security,log,logic,56,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5834:56,testability,log,logic,56,[skip-ci][cling][cpt]Move declarations up to fix faulty logic; llvm_vers variable required earlier for linux platform initialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5834
https://github.com/root-project/root/pull/5835:4,usability,help,help,4,Fix help of TGraph ctor with file;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5835
https://github.com/root-project/root/pull/5836:74,deployability,build,building,74,"[DF] Improve RNode.C tutorial; Show a few more cool tricks, in particular building computation graphs. using C++ control flow. This also removes a memleak of the return value of. TClassEdit::DemangleName (thanks for pointing it out Sergei!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5836
https://github.com/root-project/root/pull/5836:47,energy efficiency,cool,cool,47,"[DF] Improve RNode.C tutorial; Show a few more cool tricks, in particular building computation graphs. using C++ control flow. This also removes a memleak of the return value of. TClassEdit::DemangleName (thanks for pointing it out Sergei!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5836
https://github.com/root-project/root/pull/5836:113,security,control,control,113,"[DF] Improve RNode.C tutorial; Show a few more cool tricks, in particular building computation graphs. using C++ control flow. This also removes a memleak of the return value of. TClassEdit::DemangleName (thanks for pointing it out Sergei!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5836
https://github.com/root-project/root/pull/5836:113,testability,control,control,113,"[DF] Improve RNode.C tutorial; Show a few more cool tricks, in particular building computation graphs. using C++ control flow. This also removes a memleak of the return value of. TClassEdit::DemangleName (thanks for pointing it out Sergei!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5836
https://github.com/root-project/root/pull/5837:20,usability,help,helper,20,[DF] Fix memleak in helper function; Thanks Sergei for pointing it out!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5837
https://github.com/root-project/root/pull/5840:0,deployability,Updat,Update,0,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:22,deployability,version,version,22,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:125,energy efficiency,load,load,125,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:22,integrability,version,version,22,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:22,modifiability,version,version,22,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:125,performance,load,load,125,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:0,safety,Updat,Update,0,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:119,safety,avoid,avoid,119,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5840:0,security,Updat,Update,0,Update TBB to 2020_U1 version [gcc10] [skip-ci] [ROOT-10816]; Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5840
https://github.com/root-project/root/pull/5841:19,deployability,updat,updates,19,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5841:56,deployability,updat,updates,56,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5841:19,safety,updat,updates,19,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5841:56,safety,updat,updates,56,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5841:19,security,updat,updates,19,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5841:56,security,updat,updates,56,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5841:5,usability,Document,Documentation,5,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5841:42,usability,document,documentation,42,[RF] Documentation updates; Collection of documentation updates that accumulated over a few weeks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5841
https://github.com/root-project/root/pull/5843:194,deployability,version,versions,194,ROOT-6248: DEB/RPM package generation with CPack; This adds some files to support easy Debian package generation for ROOT on Ubuntu 20.04. The same setup should work for Debian and other Ubuntu versions as well. https://sft.its.cern.ch/jira/browse/ROOT-6428,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5843
https://github.com/root-project/root/pull/5843:194,integrability,version,versions,194,ROOT-6248: DEB/RPM package generation with CPack; This adds some files to support easy Debian package generation for ROOT on Ubuntu 20.04. The same setup should work for Debian and other Ubuntu versions as well. https://sft.its.cern.ch/jira/browse/ROOT-6428,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5843
https://github.com/root-project/root/pull/5843:19,modifiability,pac,package,19,ROOT-6248: DEB/RPM package generation with CPack; This adds some files to support easy Debian package generation for ROOT on Ubuntu 20.04. The same setup should work for Debian and other Ubuntu versions as well. https://sft.its.cern.ch/jira/browse/ROOT-6428,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5843
https://github.com/root-project/root/pull/5843:94,modifiability,pac,package,94,ROOT-6248: DEB/RPM package generation with CPack; This adds some files to support easy Debian package generation for ROOT on Ubuntu 20.04. The same setup should work for Debian and other Ubuntu versions as well. https://sft.its.cern.ch/jira/browse/ROOT-6428,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5843
https://github.com/root-project/root/pull/5843:194,modifiability,version,versions,194,ROOT-6248: DEB/RPM package generation with CPack; This adds some files to support easy Debian package generation for ROOT on Ubuntu 20.04. The same setup should work for Debian and other Ubuntu versions as well. https://sft.its.cern.ch/jira/browse/ROOT-6428,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5843
https://github.com/root-project/root/pull/5843:74,usability,support,support,74,ROOT-6248: DEB/RPM package generation with CPack; This adds some files to support easy Debian package generation for ROOT on Ubuntu 20.04. The same setup should work for Debian and other Ubuntu versions as well. https://sft.its.cern.ch/jira/browse/ROOT-6428,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5843
https://github.com/root-project/root/pull/5844:553,availability,error,error,553,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:20,deployability,updat,update,20,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:33,energy efficiency,alloc,allocation,33,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:485,energy efficiency,alloc,allocated,485,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:520,modifiability,exten,extended,520,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:478,performance,memor,memory,478,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:546,performance,memor,memory,546,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:553,performance,error,error,553,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:20,safety,updat,update,20,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:101,safety,compl,completion,101,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:553,safety,error,error,553,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:20,security,updat,update,20,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:101,security,compl,completion,101,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:478,usability,memor,memory,478,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:546,usability,memor,memory,546,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5844:553,usability,error,error,553,"TTree::CopyAddress: update array allocation for all leaves.; Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393). See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13. When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5844
https://github.com/root-project/root/pull/5845:5,availability,error,error,5,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:286,availability,Error,Error,286,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:345,availability,Error,Error,345,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:537,availability,Error,Error,537,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:24,integrability,messag,messages,24,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:24,interoperability,messag,messages,24,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:5,performance,error,error,5,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:286,performance,Error,Error,286,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:345,performance,Error,Error,345,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:537,performance,Error,Error,537,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:304,reliability,doe,does,304,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:0,safety,Test,Test,0,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:5,safety,error,error,5,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:40,safety,test,tests,40,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:84,safety,test,tested,84,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:286,safety,Error,Error,286,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:345,safety,Error,Error,345,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:371,safety,except,exceptions,371,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:537,safety,Error,Error,537,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:0,testability,Test,Test,0,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:40,testability,test,tests,40,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:84,testability,test,tested,84,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:5,usability,error,error,5,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:286,usability,Error,Error,286,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:345,usability,Error,Error,345,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5845:537,usability,Error,Error,537,"Test error/warning/info messages in RDF tests; Remaining printouts cannot easily be tested/checked, see also [this discussion](https://github.com/root-project/root/pull/5591#issuecomment-641453675). #### dataframe_simple. * `RLoopManager::Run prints to stderr rather than using Warning/Error, because it does so from a catch clause, and Warning/Error could be made throw exceptions by experiments frameworks, and we don't want to `std::terminate`. There is no `ROOT_EXPECT_*` macro for stderr printouts that do not come from `Warning`, `Error` or `Info`. #### datasource_sqlite. A constructor that warns is invoked by a factory function. Obviously, switching from. ```c++. auto rdf = MakeSqliteDataFrame(fileName0, query0);. ```. to . ```c++. ROOT_EXPECT_WARNING(auto rdf = MakeSqliteDataFrame(fileName0, query0), ..., ...);. ```. makes it impossible to use `rdf` after this line. To make things worse, `rdf` is not default-constructible, so I cannot do. ```c++. RDFType rdf;. ROOT_EXPECT_WARNING(rdf = MakeSqliteDataFrame(....), ...., ...);. ```. ...so I don't know how to catch that warning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5845
https://github.com/root-project/root/pull/5846:150,availability,operat,operator,150,[DF] Do not call SetBranchAddress when not needed; This removes spurious warnings from dataframe_snapshot.cxx. The problem (once again) was that map::operator[] creates entries. if not present.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5846
https://github.com/root-project/root/pull/5847:27,deployability,modul,module,27,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5847
https://github.com/root-project/root/pull/5847:11,interoperability,semant,semantic,11,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5847
https://github.com/root-project/root/pull/5847:27,modifiability,modul,module,27,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5847
https://github.com/root-project/root/pull/5847:49,performance,perform,performance,49,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5847
https://github.com/root-project/root/pull/5847:27,safety,modul,module,27,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5847
https://github.com/root-project/root/pull/5847:49,usability,perform,performance,49,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5847
https://github.com/root-project/root/pull/5847:84,usability,support,support,84,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5847
https://github.com/root-project/root/pull/5848:257,availability,sli,slimmed,257,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:265,availability,down,down,265,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:142,deployability,build,building,142,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:270,deployability,version,version,270,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:936,deployability,API,API,936,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:768,energy efficiency,adapt,adapter,768,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:270,integrability,version,version,270,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:768,integrability,adapt,adapter,768,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:936,integrability,API,API,936,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:768,interoperability,adapt,adapter,768,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:936,interoperability,API,API,936,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:270,modifiability,version,version,270,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:645,modifiability,layer,layer,645,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:768,modifiability,adapt,adapter,768,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:257,reliability,sli,slimmed,257,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5848:303,usability,User,Users,303,"[ntuple] Implement RFieldDescriptor range; This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>. <summary>Notes on previous sort approach</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5848
https://github.com/root-project/root/pull/5851:29,deployability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one; To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5851
https://github.com/root-project/root/pull/5851:29,integrability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one; To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5851
https://github.com/root-project/root/pull/5851:29,interoperability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one; To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5851
https://github.com/root-project/root/pull/5851:63,safety,prevent,prevent,63,[PyROOT][ROOT-10833] Use new API instead of deprecated one; To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5851
https://github.com/root-project/root/pull/5851:63,security,preven,prevent,63,[PyROOT][ROOT-10833] Use new API instead of deprecated one; To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5851
https://github.com/root-project/root/pull/5852:29,deployability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one (master); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5852
https://github.com/root-project/root/pull/5852:29,integrability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one (master); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5852
https://github.com/root-project/root/pull/5852:29,interoperability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one (master); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5852
https://github.com/root-project/root/pull/5852:72,safety,prevent,prevent,72,[PyROOT][ROOT-10833] Use new API instead of deprecated one (master); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5852
https://github.com/root-project/root/pull/5852:72,security,preven,prevent,72,[PyROOT][ROOT-10833] Use new API instead of deprecated one (master); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5852
https://github.com/root-project/root/pull/5853:29,deployability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one (6.22); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5853
https://github.com/root-project/root/pull/5853:29,integrability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one (6.22); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5853
https://github.com/root-project/root/pull/5853:29,interoperability,API,API,29,[PyROOT][ROOT-10833] Use new API instead of deprecated one (6.22); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5853
https://github.com/root-project/root/pull/5853:70,safety,prevent,prevent,70,[PyROOT][ROOT-10833] Use new API instead of deprecated one (6.22); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5853
https://github.com/root-project/root/pull/5853:70,security,preven,prevent,70,[PyROOT][ROOT-10833] Use new API instead of deprecated one (6.22); To prevent deprecation warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5853
https://github.com/root-project/root/pull/5854:51,reliability,doe,doesn,51,remove TPoolManager from imt/LinkDef; TPoolManager doesn't exist anymore and this was triggering a warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5854
https://github.com/root-project/root/pull/5855:417,availability,Error,ErrorIgnoreLevel,417,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:458,availability,error,error,458,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:24,deployability,depend,dependencies,24,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:24,integrability,depend,dependencies,24,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:464,integrability,messag,message,464,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:464,interoperability,messag,message,464,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:24,modifiability,depend,dependencies,24,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:417,performance,Error,ErrorIgnoreLevel,417,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:458,performance,error,error,458,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:24,safety,depend,dependencies,24,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:417,safety,Error,ErrorIgnoreLevel,417,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:458,safety,error,error,458,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:24,testability,depend,dependencies,24,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:197,usability,help,helper,197,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:341,usability,help,helpers,341,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:417,usability,Error,ErrorIgnoreLevel,417,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5855:458,usability,error,error,458,"Remove gEnv and gSystem dependencies from TError; In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`. - Get the last system error message. - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5855
https://github.com/root-project/root/pull/5857:47,integrability,messag,message,47,"Remove deprecated python option, added an info message;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5857
https://github.com/root-project/root/pull/5857:47,interoperability,messag,message,47,"Remove deprecated python option, added an info message;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5857
https://github.com/root-project/root/pull/5858:58,integrability,messag,message,58,"[backport] Remove deprecated python option, added an info message;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5858
https://github.com/root-project/root/pull/5858:58,interoperability,messag,message,58,"[backport] Remove deprecated python option, added an info message;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5858
https://github.com/root-project/root/pull/5859:23,safety,Test,TestNonCentral,23,Veto roostats tutorial TestNonCentral.C when mathmore is not present.; This Fixes ROOT-10818,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5859
https://github.com/root-project/root/pull/5859:23,testability,Test,TestNonCentral,23,Veto roostats tutorial TestNonCentral.C when mathmore is not present.; This Fixes ROOT-10818,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5859
https://github.com/root-project/root/pull/5860:41,availability,error,error,41,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:32,deployability,integr,integral,32,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:241,deployability,depend,dependency,241,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:261,deployability,build,building,261,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:32,integrability,integr,integral,32,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:241,integrability,depend,dependency,241,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:32,interoperability,integr,integral,32,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:32,modifiability,integr,integral,32,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:179,modifiability,paramet,parameter,179,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:241,modifiability,depend,dependency,241,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:41,performance,error,error,41,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:32,reliability,integr,integral,32,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:20,safety,avoid,avoiding,20,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:41,safety,error,error,41,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:94,safety,test,test,94,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:124,safety,avoid,avoiding,124,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:241,safety,depend,dependency,241,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:270,safety,test,test,270,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:32,security,integr,integral,32,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:32,testability,integr,integral,32,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:94,testability,test,test,94,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:241,testability,depend,dependency,241,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:270,testability,test,test,270,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5860:41,usability,error,error,41,"Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834; Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5860
https://github.com/root-project/root/pull/5861:25,availability,error,error,25,[DF] Try making some RDF error messages more helpful;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5861
https://github.com/root-project/root/pull/5861:31,integrability,messag,messages,31,[DF] Try making some RDF error messages more helpful;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5861
https://github.com/root-project/root/pull/5861:31,interoperability,messag,messages,31,[DF] Try making some RDF error messages more helpful;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5861
https://github.com/root-project/root/pull/5861:25,performance,error,error,25,[DF] Try making some RDF error messages more helpful;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5861
https://github.com/root-project/root/pull/5861:25,safety,error,error,25,[DF] Try making some RDF error messages more helpful;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5861
https://github.com/root-project/root/pull/5861:25,usability,error,error,25,[DF] Try making some RDF error messages more helpful;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5861
https://github.com/root-project/root/pull/5861:45,usability,help,helpful,45,[DF] Try making some RDF error messages more helpful;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5861
https://github.com/root-project/root/pull/5862:55,usability,close,closed,55,Fix crash when only part of the open canvases has been closed; Fix crash on teardown when only part of the open canvases has been closed. This was reported here: https://sft.its.cern.ch/jira/browse/ROOT-10836,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5862
https://github.com/root-project/root/pull/5862:130,usability,close,closed,130,Fix crash when only part of the open canvases has been closed; Fix crash on teardown when only part of the open canvases has been closed. This was reported here: https://sft.its.cern.ch/jira/browse/ROOT-10836,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5862
https://github.com/root-project/root/pull/5863:10,deployability,version,version,10,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:43,deployability,version,version,43,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:10,integrability,version,version,10,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:43,integrability,version,version,43,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:10,modifiability,version,version,10,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:43,modifiability,version,version,43,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:82,safety,test,test,82,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:82,testability,test,test,82,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:4,usability,guid,guide,4,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5863:37,usability,guid,guide,37,Ref guide version changer; Reference guide version changer. first try. Needs more test and tuning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5863
https://github.com/root-project/root/pull/5864:34,availability,failur,failure,34,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:106,availability,failur,failure,106,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:34,deployability,fail,failure,34,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:106,deployability,fail,failure,106,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:330,energy efficiency,Load,Load,330,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:390,energy efficiency,load,loaded,390,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:814,energy efficiency,load,loadling,814,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:34,performance,failur,failure,34,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:106,performance,failur,failure,106,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:330,performance,Load,Load,330,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:390,performance,load,loaded,390,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:814,performance,load,loadling,814,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:20,reliability,doe,does,20,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:34,reliability,fail,failure,34,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:106,reliability,fail,failure,106,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:311,safety,prevent,preventing,311,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:311,security,preven,preventing,311,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5864:440,security,sign,signaling,440,"[unix] No linked so does not mean failure on MacOS:; An empty list of linked libraries was interpreted as failure to extract. the list of linked libraries; the default ""-lCore -lRint..."" was taken instead. When running python, no libs show up as linked. That caused ""-lRint"" to be claimed. as linked, which was preventing gSystem.Load(""libRint"") within python, claiming. that it is already loaded (as it is linked). Instead, if the library signaling the end of linked libraries is seen, and so far. no libraries have been found as linked, set the list-of-linked-libraries to "" "",. i.e. not empty, triggering the ""success"" path in TSystem::GetLibraries(), and correctly. reporting the linked libraries. This fixes JupyROOT-cppcompleter-doctest, JupyROOT-ROOT-kernel-notebook not finding. TTabCom::TTabCom() because loadling libRint was mistakenly a no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5864
https://github.com/root-project/root/pull/5865:102,availability,operat,operator,102,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5865
https://github.com/root-project/root/pull/5865:162,energy efficiency,alloc,allocated,162,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5865
https://github.com/root-project/root/pull/5865:152,performance,memor,memory,152,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5865
https://github.com/root-project/root/pull/5865:25,security,IsO,IsOnHeap,25,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5865
https://github.com/root-project/root/pull/5865:116,security,IsO,IsOnHeap,116,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5865
https://github.com/root-project/root/pull/5865:152,usability,memor,memory,152,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5865
https://github.com/root-project/root/pull/5866:102,availability,operat,operator,102,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5866
https://github.com/root-project/root/pull/5866:162,energy efficiency,alloc,allocated,162,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5866
https://github.com/root-project/root/pull/5866:152,performance,memor,memory,152,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5866
https://github.com/root-project/root/pull/5866:25,security,IsO,IsOnHeap,25,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5866
https://github.com/root-project/root/pull/5866:116,security,IsO,IsOnHeap,116,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5866
https://github.com/root-project/root/pull/5866:152,usability,memor,memory,152,"[RF][ROOT-10845] Correct IsOnHeap() for RooFit objects.; Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was. returning false. Now, memory is allocated using TStorage, which. correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5866
https://github.com/root-project/root/pull/5867:190,availability,error,error,190,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:205,availability,sli,slight,205,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:333,availability,Failur,Failure,333,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:56,deployability,fail,fails,56,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:248,deployability,build,builddir,248,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:257,deployability,build,build,257,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:263,deployability,BUILD,BUILD,263,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:333,deployability,Fail,Failure,333,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:190,performance,error,error,190,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:333,performance,Failur,Failure,333,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:56,reliability,fail,fails,56,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:205,reliability,sli,slight,205,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:333,reliability,Fail,Failure,333,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:20,safety,test,test,20,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:25,safety,test,testHypoTestInvResult,25,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:51,safety,test,test,51,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:164,safety,test,test,164,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:190,safety,error,error,190,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:298,safety,test,test,298,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:303,safety,test,testHypoTestInvResult,303,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:20,testability,test,test,20,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:25,testability,test,testHypoTestInvResult,25,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:51,testability,test,test,51,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:164,testability,test,test,164,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:298,testability,test,test,298,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:303,testability,test,testHypoTestInvResult,303,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5867:190,usability,error,error,190,"The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le; This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure. The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where. result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,. 0.059684301 evaluates to 0.059684301000000002, and. 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5867
https://github.com/root-project/root/pull/5870:40,deployability,modul,modules,40,"[PyROOT] Add ISO8859-1 to list of known modules at import time; The module ISO8859-1 is used for text encoding, appeared first on. fedora32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5870
https://github.com/root-project/root/pull/5870:68,deployability,modul,module,68,"[PyROOT] Add ISO8859-1 to list of known modules at import time; The module ISO8859-1 is used for text encoding, appeared first on. fedora32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5870
https://github.com/root-project/root/pull/5870:40,modifiability,modul,modules,40,"[PyROOT] Add ISO8859-1 to list of known modules at import time; The module ISO8859-1 is used for text encoding, appeared first on. fedora32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5870
https://github.com/root-project/root/pull/5870:68,modifiability,modul,module,68,"[PyROOT] Add ISO8859-1 to list of known modules at import time; The module ISO8859-1 is used for text encoding, appeared first on. fedora32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5870
https://github.com/root-project/root/pull/5870:58,performance,time,time,58,"[PyROOT] Add ISO8859-1 to list of known modules at import time; The module ISO8859-1 is used for text encoding, appeared first on. fedora32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5870
https://github.com/root-project/root/pull/5870:40,safety,modul,modules,40,"[PyROOT] Add ISO8859-1 to list of known modules at import time; The module ISO8859-1 is used for text encoding, appeared first on. fedora32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5870
https://github.com/root-project/root/pull/5870:68,safety,modul,module,68,"[PyROOT] Add ISO8859-1 to list of known modules at import time; The module ISO8859-1 is used for text encoding, appeared first on. fedora32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5870
https://github.com/root-project/root/pull/5872:254,availability,error,error,254,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:56,deployability,contain,contain,56,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:206,modifiability,reu,reuses,206,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:254,performance,error,error,254,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:254,safety,error,error,254,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:538,safety,test,test,538,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:538,testability,test,test,538,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:27,usability,user,user,27,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:150,usability,user,user,150,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5872:254,usability,error,error,254,"Fix in TFormula parsing of user defined functions which contain predefined functions (e.g. gaus) in their name. Fixes ROOT-10815.; For example when a user defines a function with the name ""f1gaus"" and then reuses that name it could cause in same case an error parsing the expression. Example :. ```. TF1 f1(""f1gaus"",""gaus"");. TF1 f2(""f2gaus"",""f1gaus+gaus(3)"");. ```. If the function name is for example ""fgaus"" it was working before, but not if a character number is used before the pre-defined function name such as ""f1gaus"". Add also a test for parsing these cases in TFormulaParsingTest. This commit fixes ROOT-10815",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5872
https://github.com/root-project/root/pull/5873:18,deployability,Releas,Release,18,[skip-ci][PyROOT][Release Notes] Fix formatting for pandoc;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5873
https://github.com/root-project/root/pull/5873:37,interoperability,format,formatting,37,[skip-ci][PyROOT][Release Notes] Fix formatting for pandoc;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5873
https://github.com/root-project/root/pull/5874:114,availability,servic,service-now,114,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:130,availability,servic,service-portal,130,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:161,availability,incid,incident,161,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:8,deployability,Updat,Update,8,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:114,deployability,servic,service-now,114,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:130,deployability,servic,service-portal,130,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:114,integrability,servic,service-now,114,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:130,integrability,servic,service-portal,130,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:114,modifiability,servic,service-now,114,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:130,modifiability,servic,service-portal,130,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:161,reliability,incid,incident,161,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:8,safety,Updat,Update,8,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:8,security,Updat,Update,8,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5874:50,security,authenticat,authentication,50,"[cmake] Update built-in xrootd to 4.12.3:; We see authentication issues with the builtin client, see https://cern.service-now.com/service-portal?id=ticket&table=incident&sys_id=8cfde578db0d50d0006fd9f9f49619e7&view=sp. The hope is that recent xrootd changes might solve those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5874
https://github.com/root-project/root/pull/5875:11,deployability,releas,release,11,[RF] Tweak release notes.; Two tweaks for release notes. [Skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5875
https://github.com/root-project/root/pull/5875:42,deployability,releas,release,42,[RF] Tweak release notes.; Two tweaks for release notes. [Skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5875
https://github.com/root-project/root/pull/5876:5,deployability,Releas,Release,5,[RF] Release notes.; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5876
https://github.com/root-project/root/pull/5879:161,interoperability,conflict,conflict,161,"[ntuple] check for valid NTuple top-level field names (ROOT-10856); Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:. - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`. - [x] `void AddField(std::string_view fieldName, T* fromWhere)`. - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`. - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5879
https://github.com/root-project/root/pull/5879:19,safety,valid,valid,19,"[ntuple] check for valid NTuple top-level field names (ROOT-10856); Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:. - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`. - [x] `void AddField(std::string_view fieldName, T* fromWhere)`. - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`. - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5879
https://github.com/root-project/root/pull/5879:133,safety,except,exception,133,"[ntuple] check for valid NTuple top-level field names (ROOT-10856); Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:. - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`. - [x] `void AddField(std::string_view fieldName, T* fromWhere)`. - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`. - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5879
https://github.com/root-project/root/pull/5879:223,safety,valid,valid,223,"[ntuple] check for valid NTuple top-level field names (ROOT-10856); Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:. - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`. - [x] `void AddField(std::string_view fieldName, T* fromWhere)`. - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`. - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5879
https://github.com/root-project/root/pull/5879:305,safety,test,test,305,"[ntuple] check for valid NTuple top-level field names (ROOT-10856); Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:. - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`. - [x] `void AddField(std::string_view fieldName, T* fromWhere)`. - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`. - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5879
https://github.com/root-project/root/pull/5879:300,testability,unit,unit,300,"[ntuple] check for valid NTuple top-level field names (ROOT-10856); Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:. - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`. - [x] `void AddField(std::string_view fieldName, T* fromWhere)`. - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`. - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5879
https://github.com/root-project/root/pull/5879:305,testability,test,test,305,"[ntuple] check for valid NTuple top-level field names (ROOT-10856); Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. . Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string). . ~~**todo**~~ **done:** add unit test per method to ensure technique works:. - [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`. - [x] `void AddField(std::string_view fieldName, T* fromWhere)`. - [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`. - [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5879
https://github.com/root-project/root/pull/5881:14,availability,error,error,14,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5881:440,availability,operat,operation,440,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5881:850,deployability,build,buildid,850,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5881:31,modifiability,deco,decoding,31,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5881:531,modifiability,paramet,parameter,531,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5881:14,performance,error,error,14,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5881:14,safety,error,error,14,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5881:14,usability,error,error,14,"[thstack] fix error in options decoding, fix gcc10 warnings; Old code was trying to manipulate TString::Data() directly and. has several caveats. Now just check if some special options are present. Following code which should suppress ""nostack"" or ""nostackb"" was wrong:. ```. if (nostack) {*nostack = 0; strncat(nostack,nostack+7,7);}. if (nostackb) {*nostackb = 0; strncat(nostackb,nostackb+8,8);}. ```. If lopion = ""nostackb"", then first operation was preformed, then second, making absolutely unpredictable results. Also length parameter was wrong - why copy only 7 characters when just want to remove ""nostack"" string and copying 8 characters when want to remove ""nostackb"" string? Now just use boolean values and normal TString methods. Also fixing warnings, which appears with gcc 10 like this:. https://cdash.cern.ch/viewBuildError.php?type=1&buildid=901702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5881
https://github.com/root-project/root/pull/5882:11,interoperability,Compatib,Compatibility,11,[sqliteds] Compatibility fix for sqlite < 3.7.17;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5882
https://github.com/root-project/root/pull/5883:12,deployability,log,logic,12,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:30,deployability,depend,dependencies,30,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:186,deployability,version,versions,186,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:30,integrability,depend,dependencies,30,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:186,integrability,version,versions,186,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:64,interoperability,specif,specified,64,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:30,modifiability,depend,dependencies,30,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:186,modifiability,version,versions,186,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:12,safety,log,logic,12,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:30,safety,depend,dependencies,30,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:12,security,log,logic,12,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:12,testability,log,logic,12,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5883:30,testability,depend,dependencies,30,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""; This reverts commit 276c4b2066219ac63f1175ddbbf9886816557580 as the former causes problems with earlier CMake versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5883
https://github.com/root-project/root/pull/5884:40,deployability,modul,module,40,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:87,deployability,modul,module,87,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:195,deployability,modul,modules,195,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:281,deployability,modul,modules,281,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:295,deployability,contain,contain,295,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:382,deployability,modul,modules,382,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:396,deployability,contain,contain,396,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:498,deployability,modul,modules,498,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:512,deployability,contain,contain,512,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:678,deployability,modul,module,678,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:725,deployability,modul,modules,725,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:112,energy efficiency,optim,optimization,112,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:179,energy efficiency,load,loading,179,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:373,energy efficiency,load,load,373,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:437,integrability,sub,suboptimal,437,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:794,integrability,sub,suboptimal,794,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:24,interoperability,semant,semantic,24,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:460,interoperability,semant,semantic,460,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:40,modifiability,modul,module,40,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:87,modifiability,modul,module,87,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:195,modifiability,modul,modules,195,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:281,modifiability,modul,modules,281,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:382,modifiability,modul,modules,382,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:498,modifiability,modul,modules,498,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:678,modifiability,modul,module,678,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:725,modifiability,modul,modules,725,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:62,performance,perform,performance,62,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:112,performance,optimiz,optimization,112,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:161,performance,overhead,overhead,161,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:179,performance,load,loading,179,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:373,performance,load,load,373,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:40,safety,modul,module,40,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:87,safety,modul,module,87,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:195,safety,modul,modules,195,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:281,safety,modul,modules,281,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:382,safety,modul,modules,382,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:498,safety,modul,modules,498,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:678,safety,modul,module,678,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:725,safety,modul,modules,725,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:257,security,ident,identifier,257,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:409,security,ident,identifier,409,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:478,security,ident,identifiers,478,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:558,security,ident,identifier,558,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5884:62,usability,perform,performance,62,"[cxxmodules] Enable the semantic global module index to boost performance.; The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup. . The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too. . The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5884
https://github.com/root-project/root/pull/5885:16,usability,custom,custom,16,[ntuple] Remove custom streamer support from LinkDef listed classes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5885
https://github.com/root-project/root/pull/5885:32,usability,support,support,32,[ntuple] Remove custom streamer support from LinkDef listed classes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5885
https://github.com/root-project/root/pull/5886:110,availability,servic,services,110,"[CMake][PyROOT] If CMake < 3.14, fix setting of development variables; This fixes this issue:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6686/console. by setting `Python${PYTHON_VERSION_MAJOR}_Interpreter_Development_FOUND` for CMake < 3.14. Moreover, we add a missing protection when setting the development variables (only if the Python libs were found, they have to be set).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5886
https://github.com/root-project/root/pull/5886:110,deployability,servic,services,110,"[CMake][PyROOT] If CMake < 3.14, fix setting of development variables; This fixes this issue:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6686/console. by setting `Python${PYTHON_VERSION_MAJOR}_Interpreter_Development_FOUND` for CMake < 3.14. Moreover, we add a missing protection when setting the development variables (only if the Python libs were found, they have to be set).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5886
https://github.com/root-project/root/pull/5886:166,deployability,build,build,166,"[CMake][PyROOT] If CMake < 3.14, fix setting of development variables; This fixes this issue:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6686/console. by setting `Python${PYTHON_VERSION_MAJOR}_Interpreter_Development_FOUND` for CMake < 3.14. Moreover, we add a missing protection when setting the development variables (only if the Python libs were found, they have to be set).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5886
https://github.com/root-project/root/pull/5886:110,integrability,servic,services,110,"[CMake][PyROOT] If CMake < 3.14, fix setting of development variables; This fixes this issue:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6686/console. by setting `Python${PYTHON_VERSION_MAJOR}_Interpreter_Development_FOUND` for CMake < 3.14. Moreover, we add a missing protection when setting the development variables (only if the Python libs were found, they have to be set).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5886
https://github.com/root-project/root/pull/5886:60,modifiability,variab,variables,60,"[CMake][PyROOT] If CMake < 3.14, fix setting of development variables; This fixes this issue:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6686/console. by setting `Python${PYTHON_VERSION_MAJOR}_Interpreter_Development_FOUND` for CMake < 3.14. Moreover, we add a missing protection when setting the development variables (only if the Python libs were found, they have to be set).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5886
https://github.com/root-project/root/pull/5886:110,modifiability,servic,services,110,"[CMake][PyROOT] If CMake < 3.14, fix setting of development variables; This fixes this issue:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6686/console. by setting `Python${PYTHON_VERSION_MAJOR}_Interpreter_Development_FOUND` for CMake < 3.14. Moreover, we add a missing protection when setting the development variables (only if the Python libs were found, they have to be set).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5886
https://github.com/root-project/root/pull/5886:344,modifiability,variab,variables,344,"[CMake][PyROOT] If CMake < 3.14, fix setting of development variables; This fixes this issue:. https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6686/console. by setting `Python${PYTHON_VERSION_MAJOR}_Interpreter_Development_FOUND` for CMake < 3.14. Moreover, we add a missing protection when setting the development variables (only if the Python libs were found, they have to be set).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5886
https://github.com/root-project/root/pull/5887:87,availability,consist,consist,87,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:401,interoperability,standard,standard,401,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:442,interoperability,specif,specifiers,442,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:226,safety,valid,valid,226,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:521,safety,valid,valid,521,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:26,security,sign,signedness,26,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:37,security,modif,modifiers,37,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:65,security,modif,modifiers,65,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:107,security,token,tokens,107,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:294,security,modif,modifiers,294,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:314,security,modif,modifiers,314,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5887:87,usability,consist,consist,87,"IsClassOrFunction: Handle signedness modifiers; When using these modifiers, a type can consist of multiple tokens. as for example ""unsigned int"". However the keyword ""int"" can also. be omitted, making ""unsigned"" itself also a valid type. Note that this only handles the most basic case for the modifiers. The size modifiers ""short"", ""long"", and ""long long"" would need. similar treatment. Moreover the standard permits any order for the. type specifiers, ie ""unsigned long long int"" and ""long int unsigned. long"" are both valid (and actually the same type).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5887
https://github.com/root-project/root/pull/5889:22,deployability,Build,Build,22,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:61,deployability,build,build,61,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:261,deployability,modul,module,261,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:362,deployability,build,build,362,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:168,modifiability,variab,variable,168,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:261,modifiability,modul,module,261,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:261,safety,modul,module,261,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:340,safety,compl,completion,340,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:340,security,compl,completion,340,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5889:249,usability,help,help,249,"[ROOT-10862] TMVA GSL Build Fix (2020.06.17.); Made the TMVA build work correctly when `builtin_gsl` is set to `True`. Had to make sure that the `${GSL_CBLAS_LIBRARY}` variable is set in the same way in which [FindGSL.cmake](https://cmake.org/cmake/help/latest/module/FindGSL.html) would set it, and that TMVA would explicitly wait for the completion of the GSL build. This is to fix the issue described in: https://sft.its.cern.ch/jira/browse/ROOT-10862",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5889
https://github.com/root-project/root/pull/5890:15,modifiability,inherit,inheriting,15,"[ntuple] avoid inheriting from std::iterator for all homebrew iterators (NFC); This is sadly more verbose, but I thought I'd bring all the other iterators in line with C++17 where inheriting from std::iterator is deprecated (https://en.cppreference.com/w/cpp/iterator/iterator). . I mostly followed the guidelines here https://www.fluentcpp.com/2018/05/08/std-iterator-deprecated/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5890
https://github.com/root-project/root/pull/5890:180,modifiability,inherit,inheriting,180,"[ntuple] avoid inheriting from std::iterator for all homebrew iterators (NFC); This is sadly more verbose, but I thought I'd bring all the other iterators in line with C++17 where inheriting from std::iterator is deprecated (https://en.cppreference.com/w/cpp/iterator/iterator). . I mostly followed the guidelines here https://www.fluentcpp.com/2018/05/08/std-iterator-deprecated/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5890
https://github.com/root-project/root/pull/5890:9,safety,avoid,avoid,9,"[ntuple] avoid inheriting from std::iterator for all homebrew iterators (NFC); This is sadly more verbose, but I thought I'd bring all the other iterators in line with C++17 where inheriting from std::iterator is deprecated (https://en.cppreference.com/w/cpp/iterator/iterator). . I mostly followed the guidelines here https://www.fluentcpp.com/2018/05/08/std-iterator-deprecated/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5890
https://github.com/root-project/root/pull/5890:303,usability,guid,guidelines,303,"[ntuple] avoid inheriting from std::iterator for all homebrew iterators (NFC); This is sadly more verbose, but I thought I'd bring all the other iterators in line with C++17 where inheriting from std::iterator is deprecated (https://en.cppreference.com/w/cpp/iterator/iterator). . I mostly followed the guidelines here https://www.fluentcpp.com/2018/05/08/std-iterator-deprecated/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5890
https://github.com/root-project/root/pull/5892:221,availability,down,downstream,221,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:740,deployability,fail,failing,740,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:682,interoperability,format,formatting,682,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:195,performance,Memor,MemoryRegulator,195,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:740,reliability,fail,failing,740,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:711,safety,test,test,711,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:748,safety,test,tests,748,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:253,testability,hook,hook,253,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:711,testability,test,test,711,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:748,testability,test,tests,748,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5892:195,usability,Memor,MemoryRegulator,195,"Fix pyroot on Windows; - RootMacros.cmake: set the correct PYTHONPATH (${ROOTSYS}/bin on Windows). - CPyCppyy/CMakeLists.txt: export all symbols and set correct prefix (lib) and suffix (.pyd). - MemoryRegulator[.cxx/.h]: downstream cppyy changes [`move hook setting to .cxx`](https://bitbucket.org/wlav/cpycppyy/commits/24ac364). - cppyy-backend/CMakeLists.txt: export all symbols. - pythonizations/CMakeLists.txt: export all symbols, set correct suffix (.pyd) and link against Python library (cannot have unresolved symbols on Windows). - PyzPythonHelpers.cxx, RDataFramePyz.cxx, RVecPyz.cxx, TPyClassGenerator.cxx, and TPython.cxx: Use proper forward declarations and fix pointer formatting. - pythonizations/test/CMakeLists.txt: disable failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5892
https://github.com/root-project/root/pull/5893:22,deployability,version,version,22,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:40,deployability,version,version,40,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:129,deployability,build,builds,129,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:183,deployability,version,version,183,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:243,deployability,build,builds,243,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:298,deployability,version,version,298,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:359,deployability,build,builds,359,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:414,deployability,version,version,414,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:22,integrability,version,version,22,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:40,integrability,version,version,40,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:183,integrability,version,version,183,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:298,integrability,version,version,298,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:414,integrability,version,version,414,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:22,modifiability,version,version,22,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:40,modifiability,version,version,40,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:183,modifiability,version,version,183,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:298,modifiability,version,version,298,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5893:414,modifiability,version,version,414,[cmake] Add --python2-version/--python3-version and mutitarget PyROOT2/PyROOT3; ```. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python-version. 3.8.3. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python2-version. 2.7.18. oksana@oksana-dellxps  ~/CERN_sources/root/builds   fix-python-output ●  root-config --python3-version. 3.8.3. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5893
https://github.com/root-project/root/pull/5894:5,usability,document,documentation,5,NFC: documentation for members of DataOptions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5894
https://github.com/root-project/root/pull/5895:125,deployability,build,builds,125,[cxxmodules] Iterating over constructors might deserialize.; This should fix a set of issues coming from the CMSSW CXXMODULE builds. cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5895
https://github.com/root-project/root/pull/5896:75,modifiability,variab,variables,75,"[CMake][PyROOT] Backport 6.22: If CMake < 3.14, fix setting of development variables; Backport of https://github.com/root-project/root/pull/5886",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5896
https://github.com/root-project/root/pull/5897:129,availability,consist,consistent,129,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:582,availability,mask,masked,582,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:641,deployability,Updat,Update,641,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:189,energy efficiency,draw,drawing,189,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:365,energy efficiency,draw,drawn,365,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:463,energy efficiency,draw,drawables,463,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:572,energy efficiency,draw,drawable,572,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:416,integrability,configur,configure,416,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:416,modifiability,configur,configure,416,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:487,performance,I/O,I/O,487,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:512,safety,avoid,avoid,512,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:641,safety,Updat,Update,641,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:416,security,configur,configure,416,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:641,security,Updat,Update,641,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:129,usability,consist,consistent,129,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:285,usability,interact,interactive,285,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:382,usability,interact,interactively,382,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5897:426,usability,custom,custom,426,"Introducing RPave class, imrpove RLegend; It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`. Main functionality - consistent positioning relative to the `RFrame`. . But also drawing without frame is possible - in that case just default frame position will be used. Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved. Also one can configure custom attributes disregard of other drawables. Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - . referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5897
https://github.com/root-project/root/pull/5898:14,availability,error,error,14,"[thstack] fix error in options decoding, v6.22; Old code was try to manipulate TString::Data() directly and. has several caviats. Now just check if some special options are present",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898
https://github.com/root-project/root/pull/5898:31,modifiability,deco,decoding,31,"[thstack] fix error in options decoding, v6.22; Old code was try to manipulate TString::Data() directly and. has several caviats. Now just check if some special options are present",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898
https://github.com/root-project/root/pull/5898:14,performance,error,error,14,"[thstack] fix error in options decoding, v6.22; Old code was try to manipulate TString::Data() directly and. has several caviats. Now just check if some special options are present",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898
https://github.com/root-project/root/pull/5898:14,safety,error,error,14,"[thstack] fix error in options decoding, v6.22; Old code was try to manipulate TString::Data() directly and. has several caviats. Now just check if some special options are present",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898
https://github.com/root-project/root/pull/5898:14,usability,error,error,14,"[thstack] fix error in options decoding, v6.22; Old code was try to manipulate TString::Data() directly and. has several caviats. Now just check if some special options are present",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5898
https://github.com/root-project/root/pull/5899:34,availability,error,errors,34,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:48,modifiability,paramet,parameter,48,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:97,modifiability,paramet,parameter,97,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:383,modifiability,paramet,parameter,383,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:34,performance,error,errors,34,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:34,safety,error,errors,34,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:165,safety,avoid,avoids,165,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:228,safety,avoid,avoid,228,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:348,safety,avoid,avoid,348,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:34,usability,error,errors,34,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:183,usability,minim,minimum,183,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:262,usability,minim,minimum,262,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5899:408,usability,minim,minimum,408,Fix a bug in computation of Minos errors when a parameter is bounded; Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. . Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5899
https://github.com/root-project/root/pull/5900:33,usability,document,documentation,33,Adding a missing backtick in the documentation of a TH1 ctor; Adding a missing backtick in the documentation of a TH1 ctor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5900
https://github.com/root-project/root/pull/5900:95,usability,document,documentation,95,Adding a missing backtick in the documentation of a TH1 ctor; Adding a missing backtick in the documentation of a TH1 ctor,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5900
https://github.com/root-project/root/pull/5901:29,usability,document,documentation,29,Fixing mistakes in TH1 ctors documentation; Replacing `stringy` with `stringx` in several ctors of TH1,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5901
https://github.com/root-project/root/pull/5902:226,availability,failur,failures,226,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:226,deployability,fail,failures,226,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:158,interoperability,format,format-security,158,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:180,interoperability,format,format-security,180,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:262,interoperability,format,format-security,262,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:226,performance,failur,failures,226,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:226,reliability,fail,failures,226,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:165,security,secur,security,165,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:187,security,secur,security,187,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5902:269,security,secur,security,269,"Fix too aggressive -Werror replacements; The replacements removes the -Werror option for externals, which is intended. However, it also replaces e.g. -Werror=format-security with =format-security, which results in compilation failures due to the unknown option =format-security.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5902
https://github.com/root-project/root/pull/5903:26,deployability,log,logic,26,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:36,deployability,depend,dependencies,36,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:61,deployability,updat,update,61,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:36,integrability,depend,dependencies,36,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:113,interoperability,incompatib,incompatibility,113,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:36,modifiability,depend,dependencies,36,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:26,safety,log,logic,26,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:36,safety,depend,dependencies,36,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:61,safety,updat,update,61,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:26,security,log,logic,26,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:61,security,updat,update,61,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:26,testability,log,logic,26,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5903:36,testability,depend,dependencies,36,Fix NO_CXXMODULE handling logic for dependencies; This is an update to #5798 which had to be reverted due to its incompatibility with CMake 3.12 and below. . @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5903
https://github.com/root-project/root/pull/5906:125,deployability,version,version,125,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:594,deployability,instal,installation,594,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:819,deployability,version,versions,819,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:125,integrability,version,version,125,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:819,integrability,version,versions,819,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:890,integrability,filter,filters,890,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:562,interoperability,specif,specifying,562,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:29,modifiability,variab,variables,29,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:125,modifiability,version,version,125,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:133,modifiability,variab,variables,133,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:547,modifiability,variab,variable,547,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:819,modifiability,version,versions,819,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:986,modifiability,variab,variables,986,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:16,performance,Cach,Cache,16,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:83,performance,cach,cache,83,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:473,performance,cach,cached,473,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:487,performance,cach,caching,487,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:635,performance,cach,cache,635,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:967,performance,cach,cache,967,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:521,usability,user,user,521,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5906:684,usability,user,user,684,"[CMake][PyROOT] Cache PyROOT variables needed by root-config --config; If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:. https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5906
https://github.com/root-project/root/pull/5907:32,deployability,instal,install,32,[PyROOT] Allow customization of install dir for Python modules; From Guilherme. Applies to legacy PyROOT. To do:. - [ ] check whether standalone `import cppyy` still works when ROOT's python things are installed in site-packages rather than in ROOTLIBDIR. - [ ] check that TPython still finds libcppyy.so,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5907
https://github.com/root-project/root/pull/5907:55,deployability,modul,modules,55,[PyROOT] Allow customization of install dir for Python modules; From Guilherme. Applies to legacy PyROOT. To do:. - [ ] check whether standalone `import cppyy` still works when ROOT's python things are installed in site-packages rather than in ROOTLIBDIR. - [ ] check that TPython still finds libcppyy.so,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5907
https://github.com/root-project/root/pull/5907:202,deployability,instal,installed,202,[PyROOT] Allow customization of install dir for Python modules; From Guilherme. Applies to legacy PyROOT. To do:. - [ ] check whether standalone `import cppyy` still works when ROOT's python things are installed in site-packages rather than in ROOTLIBDIR. - [ ] check that TPython still finds libcppyy.so,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5907
https://github.com/root-project/root/pull/5907:55,modifiability,modul,modules,55,[PyROOT] Allow customization of install dir for Python modules; From Guilherme. Applies to legacy PyROOT. To do:. - [ ] check whether standalone `import cppyy` still works when ROOT's python things are installed in site-packages rather than in ROOTLIBDIR. - [ ] check that TPython still finds libcppyy.so,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5907
https://github.com/root-project/root/pull/5907:220,modifiability,pac,packages,220,[PyROOT] Allow customization of install dir for Python modules; From Guilherme. Applies to legacy PyROOT. To do:. - [ ] check whether standalone `import cppyy` still works when ROOT's python things are installed in site-packages rather than in ROOTLIBDIR. - [ ] check that TPython still finds libcppyy.so,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5907
https://github.com/root-project/root/pull/5907:55,safety,modul,modules,55,[PyROOT] Allow customization of install dir for Python modules; From Guilherme. Applies to legacy PyROOT. To do:. - [ ] check whether standalone `import cppyy` still works when ROOT's python things are installed in site-packages rather than in ROOTLIBDIR. - [ ] check that TPython still finds libcppyy.so,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5907
https://github.com/root-project/root/pull/5907:15,usability,custom,customization,15,[PyROOT] Allow customization of install dir for Python modules; From Guilherme. Applies to legacy PyROOT. To do:. - [ ] check whether standalone `import cppyy` still works when ROOT's python things are installed in site-packages rather than in ROOTLIBDIR. - [ ] check that TPython still finds libcppyy.so,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5907
https://github.com/root-project/root/pull/5908:32,deployability,instal,install,32,[PyROOT] Allow customization of install dir for Python modules (v6.22 backport); Applies to legacy pyroot. Backport for 6.22 of #5907,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5908
https://github.com/root-project/root/pull/5908:55,deployability,modul,modules,55,[PyROOT] Allow customization of install dir for Python modules (v6.22 backport); Applies to legacy pyroot. Backport for 6.22 of #5907,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5908
https://github.com/root-project/root/pull/5908:55,modifiability,modul,modules,55,[PyROOT] Allow customization of install dir for Python modules (v6.22 backport); Applies to legacy pyroot. Backport for 6.22 of #5907,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5908
https://github.com/root-project/root/pull/5908:55,safety,modul,modules,55,[PyROOT] Allow customization of install dir for Python modules (v6.22 backport); Applies to legacy pyroot. Backport for 6.22 of #5907,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5908
https://github.com/root-project/root/pull/5908:15,usability,custom,customization,15,[PyROOT] Allow customization of install dir for Python modules (v6.22 backport); Applies to legacy pyroot. Backport for 6.22 of #5907,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5908
https://github.com/root-project/root/pull/5910:241,safety,test,test,241,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:316,safety,test,tests,316,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:397,safety,test,test,397,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:13,testability,simpl,simplify,13,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:143,testability,simpl,simplify,143,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:241,testability,test,test,241,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:316,testability,test,tests,316,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:397,testability,test,test,397,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:13,usability,simpl,simplify,13,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5910:143,usability,simpl,simplify,143,"[DF][ntuple] simplify RNTupleDS construction with new fields iterator; We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5910
https://github.com/root-project/root/pull/5911:162,availability,error,error,162,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:310,availability,error,error,310,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:162,performance,error,error,162,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:310,performance,error,error,310,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:418,performance,time,times,418,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:356,reliability,doe,doesn,356,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:162,safety,error,error,162,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:310,safety,error,error,310,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:162,usability,error,error,162,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5911:310,usability,error,error,310,[ntuple] start using RResult for fallible NTuple IO functions; This PR starts replacing `R__ASSERT` checks in fallible functions (e.g. IO) with the new `RResult` error sum type introduced in https://github.com/root-project/root/pull/4683. . I started with `RMiniFileReader::GetNTuple` because it's an expected error case that an `NTuple` of a certain name doesn't exist in the given file (I've certainly done it a few times).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5911
https://github.com/root-project/root/pull/5912:14,deployability,build,build,14,"Made the TMVA build work correctly with builtin_gsl=True.; Had to make sure that the GSL_CBLAS_LIBRARY variable is set in the. same way in which FindGSL.cmake would set it, and that TMVA would. explicitly wait for the completion of the GSL build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5912
https://github.com/root-project/root/pull/5912:240,deployability,build,build,240,"Made the TMVA build work correctly with builtin_gsl=True.; Had to make sure that the GSL_CBLAS_LIBRARY variable is set in the. same way in which FindGSL.cmake would set it, and that TMVA would. explicitly wait for the completion of the GSL build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5912
https://github.com/root-project/root/pull/5912:103,modifiability,variab,variable,103,"Made the TMVA build work correctly with builtin_gsl=True.; Had to make sure that the GSL_CBLAS_LIBRARY variable is set in the. same way in which FindGSL.cmake would set it, and that TMVA would. explicitly wait for the completion of the GSL build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5912
https://github.com/root-project/root/pull/5912:218,safety,compl,completion,218,"Made the TMVA build work correctly with builtin_gsl=True.; Had to make sure that the GSL_CBLAS_LIBRARY variable is set in the. same way in which FindGSL.cmake would set it, and that TMVA would. explicitly wait for the completion of the GSL build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5912
https://github.com/root-project/root/pull/5912:218,security,compl,completion,218,"Made the TMVA build work correctly with builtin_gsl=True.; Had to make sure that the GSL_CBLAS_LIBRARY variable is set in the. same way in which FindGSL.cmake would set it, and that TMVA would. explicitly wait for the completion of the GSL build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5912
https://github.com/root-project/root/pull/5913:48,deployability,updat,update,48,"[Tutorials] Make converttonotebook smarter, and update RF tutorials.; - Code in the df103 tutorial notebooks [here](https://nbviewer.jupyter.org/url/root.cern/doc/master/notebooks/df103_NanoAODHiggsAnalysis.C.nbconvert.ipynb) doesn't compile, since `converttonotebook.py` only recognises functions with a few hard-coded return types. Here, this limitation is lifted (or at least a broader range of functions is recognised ...). - Using the new functionality, some RooFit tutorials could be updated. - And a new tutorial was added to clarify [ROOT-8440]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5913
https://github.com/root-project/root/pull/5913:490,deployability,updat,updated,490,"[Tutorials] Make converttonotebook smarter, and update RF tutorials.; - Code in the df103 tutorial notebooks [here](https://nbviewer.jupyter.org/url/root.cern/doc/master/notebooks/df103_NanoAODHiggsAnalysis.C.nbconvert.ipynb) doesn't compile, since `converttonotebook.py` only recognises functions with a few hard-coded return types. Here, this limitation is lifted (or at least a broader range of functions is recognised ...). - Using the new functionality, some RooFit tutorials could be updated. - And a new tutorial was added to clarify [ROOT-8440]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5913
https://github.com/root-project/root/pull/5913:226,reliability,doe,doesn,226,"[Tutorials] Make converttonotebook smarter, and update RF tutorials.; - Code in the df103 tutorial notebooks [here](https://nbviewer.jupyter.org/url/root.cern/doc/master/notebooks/df103_NanoAODHiggsAnalysis.C.nbconvert.ipynb) doesn't compile, since `converttonotebook.py` only recognises functions with a few hard-coded return types. Here, this limitation is lifted (or at least a broader range of functions is recognised ...). - Using the new functionality, some RooFit tutorials could be updated. - And a new tutorial was added to clarify [ROOT-8440]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5913
https://github.com/root-project/root/pull/5913:48,safety,updat,update,48,"[Tutorials] Make converttonotebook smarter, and update RF tutorials.; - Code in the df103 tutorial notebooks [here](https://nbviewer.jupyter.org/url/root.cern/doc/master/notebooks/df103_NanoAODHiggsAnalysis.C.nbconvert.ipynb) doesn't compile, since `converttonotebook.py` only recognises functions with a few hard-coded return types. Here, this limitation is lifted (or at least a broader range of functions is recognised ...). - Using the new functionality, some RooFit tutorials could be updated. - And a new tutorial was added to clarify [ROOT-8440]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5913
https://github.com/root-project/root/pull/5913:490,safety,updat,updated,490,"[Tutorials] Make converttonotebook smarter, and update RF tutorials.; - Code in the df103 tutorial notebooks [here](https://nbviewer.jupyter.org/url/root.cern/doc/master/notebooks/df103_NanoAODHiggsAnalysis.C.nbconvert.ipynb) doesn't compile, since `converttonotebook.py` only recognises functions with a few hard-coded return types. Here, this limitation is lifted (or at least a broader range of functions is recognised ...). - Using the new functionality, some RooFit tutorials could be updated. - And a new tutorial was added to clarify [ROOT-8440]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5913
https://github.com/root-project/root/pull/5913:48,security,updat,update,48,"[Tutorials] Make converttonotebook smarter, and update RF tutorials.; - Code in the df103 tutorial notebooks [here](https://nbviewer.jupyter.org/url/root.cern/doc/master/notebooks/df103_NanoAODHiggsAnalysis.C.nbconvert.ipynb) doesn't compile, since `converttonotebook.py` only recognises functions with a few hard-coded return types. Here, this limitation is lifted (or at least a broader range of functions is recognised ...). - Using the new functionality, some RooFit tutorials could be updated. - And a new tutorial was added to clarify [ROOT-8440]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5913
https://github.com/root-project/root/pull/5913:490,security,updat,updated,490,"[Tutorials] Make converttonotebook smarter, and update RF tutorials.; - Code in the df103 tutorial notebooks [here](https://nbviewer.jupyter.org/url/root.cern/doc/master/notebooks/df103_NanoAODHiggsAnalysis.C.nbconvert.ipynb) doesn't compile, since `converttonotebook.py` only recognises functions with a few hard-coded return types. Here, this limitation is lifted (or at least a broader range of functions is recognised ...). - Using the new functionality, some RooFit tutorials could be updated. - And a new tutorial was added to clarify [ROOT-8440]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5913
https://github.com/root-project/root/pull/5914:67,deployability,depend,dependency,67,"[rootcling] Provide better information about the potential missing dependency; cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5914
https://github.com/root-project/root/pull/5914:67,integrability,depend,dependency,67,"[rootcling] Provide better information about the potential missing dependency; cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5914
https://github.com/root-project/root/pull/5914:67,modifiability,depend,dependency,67,"[rootcling] Provide better information about the potential missing dependency; cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5914
https://github.com/root-project/root/pull/5914:67,safety,depend,dependency,67,"[rootcling] Provide better information about the potential missing dependency; cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5914
https://github.com/root-project/root/pull/5914:67,testability,depend,dependency,67,"[rootcling] Provide better information about the potential missing dependency; cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5914
https://github.com/root-project/root/pull/5915:11,energy efficiency,draw,draw,11,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5915:266,energy efficiency,draw,draw,266,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5915:86,integrability,configur,configure,86,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5915:86,modifiability,configur,configure,86,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5915:395,performance,I/O,I/O,395,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5915:86,security,configur,configure,86,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5915:279,usability,support,supported,279,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5915:469,usability,user,user-images,469,"Provide 3D draw options for RH2 and RH3 classes; Via `RHist2Drawable` methods one can configure options:. * `Color()` (2d, default). * `Scatter()` (2d). * `Text()` (2d). * `Contour()` (2d and 3d). * `Surface()` (3d). * `Lego()` (3d). With `RHist3Drawable` following draw options supported. * `Box(0)`, `Box(1)`, `Box(2)`. * `Sphere(0)`, `Sphere(1)`. * `Color()`. * `Scatter()`. Fix problem with I/O for `RH3` class - add missing entries in LinkDef.h. ![Canvas](https://user-images.githubusercontent.com/4936580/85428560-aad75680-b57d-11ea-9a4f-b0544c5159c0.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5915
https://github.com/root-project/root/pull/5916:132,deployability,modul,module,132,[cxxmodules] Use forward declarations instead on including the header.; This allows the dictionary to be independent on the SQLite3 module on OSX which is built implicitly and needs control over its invalidation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5916
https://github.com/root-project/root/pull/5916:132,modifiability,modul,module,132,[cxxmodules] Use forward declarations instead on including the header.; This allows the dictionary to be independent on the SQLite3 module on OSX which is built implicitly and needs control over its invalidation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5916
https://github.com/root-project/root/pull/5916:132,safety,modul,module,132,[cxxmodules] Use forward declarations instead on including the header.; This allows the dictionary to be independent on the SQLite3 module on OSX which is built implicitly and needs control over its invalidation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5916
https://github.com/root-project/root/pull/5916:182,security,control,control,182,[cxxmodules] Use forward declarations instead on including the header.; This allows the dictionary to be independent on the SQLite3 module on OSX which is built implicitly and needs control over its invalidation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5916
https://github.com/root-project/root/pull/5916:182,testability,control,control,182,[cxxmodules] Use forward declarations instead on including the header.; This allows the dictionary to be independent on the SQLite3 module on OSX which is built implicitly and needs control over its invalidation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5916
https://github.com/root-project/root/pull/5917:10,deployability,build,builds,10,Fix gcc10 builds for v620;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5917
https://github.com/root-project/root/pull/5918:115,availability,operat,operator,115,Fix ROOT-9240 by preventing TMapFile::WhichMapFile from initializing TROOT; . TMapFile::WhichMapFile is called via operator delete which is used during RegisterModule. and letting TMapFile::WhichMapFile trigger the initialization of the TROOT object means that. a) RegisterModule will have nested called to RegisterModule. b) The interpreter will be created in the middle of the execution of RegisterModule. Both are potentially fatal (i.e. undefined behavior).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5918
https://github.com/root-project/root/pull/5918:17,safety,prevent,preventing,17,Fix ROOT-9240 by preventing TMapFile::WhichMapFile from initializing TROOT; . TMapFile::WhichMapFile is called via operator delete which is used during RegisterModule. and letting TMapFile::WhichMapFile trigger the initialization of the TROOT object means that. a) RegisterModule will have nested called to RegisterModule. b) The interpreter will be created in the middle of the execution of RegisterModule. Both are potentially fatal (i.e. undefined behavior).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5918
https://github.com/root-project/root/pull/5918:17,security,preven,preventing,17,Fix ROOT-9240 by preventing TMapFile::WhichMapFile from initializing TROOT; . TMapFile::WhichMapFile is called via operator delete which is used during RegisterModule. and letting TMapFile::WhichMapFile trigger the initialization of the TROOT object means that. a) RegisterModule will have nested called to RegisterModule. b) The interpreter will be created in the middle of the execution of RegisterModule. Both are potentially fatal (i.e. undefined behavior).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5918
https://github.com/root-project/root/pull/5918:451,usability,behavi,behavior,451,Fix ROOT-9240 by preventing TMapFile::WhichMapFile from initializing TROOT; . TMapFile::WhichMapFile is called via operator delete which is used during RegisterModule. and letting TMapFile::WhichMapFile trigger the initialization of the TROOT object means that. a) RegisterModule will have nested called to RegisterModule. b) The interpreter will be created in the middle of the execution of RegisterModule. Both are potentially fatal (i.e. undefined behavior).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5918
https://github.com/root-project/root/pull/5919:430,availability,down,download,430,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:21,deployability,build,build,21,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:443,deployability,instal,install,443,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:508,deployability,instal,install,508,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:539,deployability,manag,manager,539,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:539,energy efficiency,manag,manager,539,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:133,integrability,interfac,interface,133,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:216,integrability,interfac,interface,216,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:133,interoperability,interfac,interface,133,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:216,interoperability,interfac,interface,216,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:966,interoperability,share,shared,966,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:133,modifiability,interfac,interface,133,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:216,modifiability,interfac,interface,216,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:531,modifiability,pac,package,531,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:630,performance,parallel,parallel,630,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:674,performance,perform,performance,674,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:539,safety,manag,manager,539,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:302,security,barrier,barriers,302,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:364,usability,support,supported,364,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:422,usability,user,user,422,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:674,usability,perform,performance,674,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5919:788,usability,experien,experienced,788,"[CMake] add liburing build option; This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface. `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`. * `#include ""liburing/io_uring.h""`. * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5919
https://github.com/root-project/root/pull/5921:32,deployability,build,building,32,"WIP: ROOT-6446 Changes to allow building (almost) static ROOT; Configure with `cmake -DBUILD_SHARED_LIBS=OFF -Dminimal=ON -Dshared=OFF ...`. Note that the changes here are not meant to be merged, this is only for testing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5921
https://github.com/root-project/root/pull/5921:63,integrability,Configur,Configure,63,"WIP: ROOT-6446 Changes to allow building (almost) static ROOT; Configure with `cmake -DBUILD_SHARED_LIBS=OFF -Dminimal=ON -Dshared=OFF ...`. Note that the changes here are not meant to be merged, this is only for testing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5921
https://github.com/root-project/root/pull/5921:63,modifiability,Configur,Configure,63,"WIP: ROOT-6446 Changes to allow building (almost) static ROOT; Configure with `cmake -DBUILD_SHARED_LIBS=OFF -Dminimal=ON -Dshared=OFF ...`. Note that the changes here are not meant to be merged, this is only for testing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5921
https://github.com/root-project/root/pull/5921:213,safety,test,testing,213,"WIP: ROOT-6446 Changes to allow building (almost) static ROOT; Configure with `cmake -DBUILD_SHARED_LIBS=OFF -Dminimal=ON -Dshared=OFF ...`. Note that the changes here are not meant to be merged, this is only for testing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5921
https://github.com/root-project/root/pull/5921:63,security,Configur,Configure,63,"WIP: ROOT-6446 Changes to allow building (almost) static ROOT; Configure with `cmake -DBUILD_SHARED_LIBS=OFF -Dminimal=ON -Dshared=OFF ...`. Note that the changes here are not meant to be merged, this is only for testing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5921
https://github.com/root-project/root/pull/5921:213,testability,test,testing,213,"WIP: ROOT-6446 Changes to allow building (almost) static ROOT; Configure with `cmake -DBUILD_SHARED_LIBS=OFF -Dminimal=ON -Dshared=OFF ...`. Note that the changes here are not meant to be merged, this is only for testing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5921
https://github.com/root-project/root/pull/5922:65,deployability,infrastructur,infrastructure,65,Remove obsolete compatibility layers from TError; Replaces a few infrastructure bits that have ROOT internal compatibility layers with C++ standard facilities. Namely:. - `[v]snprintf`. - thread local storage. - varargs,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5922
https://github.com/root-project/root/pull/5922:16,interoperability,compatib,compatibility,16,Remove obsolete compatibility layers from TError; Replaces a few infrastructure bits that have ROOT internal compatibility layers with C++ standard facilities. Namely:. - `[v]snprintf`. - thread local storage. - varargs,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5922
https://github.com/root-project/root/pull/5922:109,interoperability,compatib,compatibility,109,Remove obsolete compatibility layers from TError; Replaces a few infrastructure bits that have ROOT internal compatibility layers with C++ standard facilities. Namely:. - `[v]snprintf`. - thread local storage. - varargs,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5922
https://github.com/root-project/root/pull/5922:139,interoperability,standard,standard,139,Remove obsolete compatibility layers from TError; Replaces a few infrastructure bits that have ROOT internal compatibility layers with C++ standard facilities. Namely:. - `[v]snprintf`. - thread local storage. - varargs,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5922
https://github.com/root-project/root/pull/5922:30,modifiability,layer,layers,30,Remove obsolete compatibility layers from TError; Replaces a few infrastructure bits that have ROOT internal compatibility layers with C++ standard facilities. Namely:. - `[v]snprintf`. - thread local storage. - varargs,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5922
https://github.com/root-project/root/pull/5922:123,modifiability,layer,layers,123,Remove obsolete compatibility layers from TError; Replaces a few infrastructure bits that have ROOT internal compatibility layers with C++ standard facilities. Namely:. - `[v]snprintf`. - thread local storage. - varargs,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5922
https://github.com/root-project/root/pull/5924:447,energy efficiency,core,core,447,"Tree:Fix ROOT-10829. Avoid using deleted object.; When deleting a TTree, we delete the list of friends and aliases. Their deletion is broadcasted. through RecursiveRemove which eventually reached back to the original TTree. And if TTree::RecursiveRemove then tries to call RecursiveRemove on those deleted list ... then. disaster follows ... in the form of:. ```. pure virtual method called. terminate called without an active exception. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5924
https://github.com/root-project/root/pull/5924:177,integrability,event,eventually,177,"Tree:Fix ROOT-10829. Avoid using deleted object.; When deleting a TTree, we delete the list of friends and aliases. Their deletion is broadcasted. through RecursiveRemove which eventually reached back to the original TTree. And if TTree::RecursiveRemove then tries to call RecursiveRemove on those deleted list ... then. disaster follows ... in the form of:. ```. pure virtual method called. terminate called without an active exception. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5924
https://github.com/root-project/root/pull/5924:21,safety,Avoid,Avoid,21,"Tree:Fix ROOT-10829. Avoid using deleted object.; When deleting a TTree, we delete the list of friends and aliases. Their deletion is broadcasted. through RecursiveRemove which eventually reached back to the original TTree. And if TTree::RecursiveRemove then tries to call RecursiveRemove on those deleted list ... then. disaster follows ... in the form of:. ```. pure virtual method called. terminate called without an active exception. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5924
https://github.com/root-project/root/pull/5924:427,safety,except,exception,427,"Tree:Fix ROOT-10829. Avoid using deleted object.; When deleting a TTree, we delete the list of friends and aliases. Their deletion is broadcasted. through RecursiveRemove which eventually reached back to the original TTree. And if TTree::RecursiveRemove then tries to call RecursiveRemove on those deleted list ... then. disaster follows ... in the form of:. ```. pure virtual method called. terminate called without an active exception. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5924
https://github.com/root-project/root/pull/5925:298,availability,avail,available,298,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:36,deployability,patch,patch,36,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:75,deployability,patch,patch,75,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:189,deployability,patch,patches,189,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:269,integrability,wrap,wrapper,269,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:269,interoperability,wrapper,wrapper,269,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:298,reliability,availab,available,298,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:36,safety,patch,patch,36,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:75,safety,patch,patch,75,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:189,safety,patch,patches,189,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:298,safety,avail,available,298,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:36,security,patch,patch,36,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:75,security,patch,patch,75,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:189,security,patch,patches,189,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5925:298,security,availab,available,298,[MetaCling][ROOT-10872] Apply cppyy patch; This fix corresponds to a cppyy patch for MetaCling:. https://bitbucket.org/wlav/cppyy-backend/src/dfb9f7a46d7b703325179deea193bb1eb823728e/cling/patches/nodeleted.diff. Drops properties of deleted methods and chooses move in wrapper generator if no copy available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5925
https://github.com/root-project/root/pull/5926:380,availability,Error,Error,380,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:13,energy efficiency,draw,draw,13,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:234,energy efficiency,draw,drawable,234,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:352,energy efficiency,draw,draw,352,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:465,energy efficiency,draw,draw,465,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:508,energy efficiency,draw,drawings,508,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:649,energy efficiency,draw,draw,649,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:258,interoperability,specif,specify,258,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:380,performance,Error,Error,380,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:380,safety,Error,Error,380,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:151,security,access,access,151,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:380,usability,Error,Error,380,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5926:768,usability,user,user-images,768,"Provide more draw options for RH1/RH2 classes; Improve class design around `RAttrBase` classes. . Introduce `RAttrValue<typename T>` template class to access single value from attributes. Use it in all attributes classes and existing drawable classes. . Let specify in single place type, string name and default value for each attribute. Add following draw options for `RH1`:. * `Error()`. * `Text()`. * `Marker()`. * `Bar()`. * `Line()`. * `Lego()`. Add `Arrow()` draw option for `RH2`. Fix problem with 3D drawings - objects which position related to frame (which is not visible in 3D) now positioned and moved correctly after pad resize. Provide draw options overview macros: `draw_rh1.cxx` (see attached image), `draw_rh2.cxx`, `draw_rh3.cxx`. ![draw_rh1](https://user-images.githubusercontent.com/4936580/85689202-b7b98e80-b6d2-11ea-82fe-2a3b33fa0b37.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5926
https://github.com/root-project/root/pull/5927:61,deployability,Updat,Update,61,Implement ModifiedUpdate(); Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents(). This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5927
https://github.com/root-project/root/pull/5927:98,performance,perform,perform,98,Implement ModifiedUpdate(); Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents(). This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5927
https://github.com/root-project/root/pull/5927:61,safety,Updat,Update,61,Implement ModifiedUpdate(); Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents(). This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5927
https://github.com/root-project/root/pull/5927:10,security,Modif,ModifiedUpdate,10,Implement ModifiedUpdate(); Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents(). This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5927
https://github.com/root-project/root/pull/5927:46,security,Modif,Modified,46,Implement ModifiedUpdate(); Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents(). This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5927
https://github.com/root-project/root/pull/5927:61,security,Updat,Update,61,Implement ModifiedUpdate(); Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents(). This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5927
https://github.com/root-project/root/pull/5927:98,usability,perform,perform,98,Implement ModifiedUpdate(); Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents(). This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5927
https://github.com/root-project/root/pull/5928:44,modifiability,variab,variables,44,[CMake][PyROOT] Backport 6.22: Cache PyROOT variables needed by root-config --config; Backport of https://github.com/root-project/root/pull/5906,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5928
https://github.com/root-project/root/pull/5928:31,performance,Cach,Cache,31,[CMake][PyROOT] Backport 6.22: Cache PyROOT variables needed by root-config --config; Backport of https://github.com/root-project/root/pull/5906,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5928
https://github.com/root-project/root/pull/5929:22,reliability,doe,does,22,[cling] External llvm does not have config.h; This should fix the issue when cling is built against prebuilt llvm on setups such as conda. Fixes ROOT-10812,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5929
https://github.com/root-project/root/pull/5930:71,deployability,configurat,configuration-time,71,[CMake][ROOT-10873] Fix setting of environment in LCG views; Rely on a configuration-time setting to decide whether experimental PyROOT is ON and set the environment accordingly. More info about the issue here:. https://sft.its.cern.ch/jira/browse/ROOT-10873,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5930
https://github.com/root-project/root/pull/5930:71,integrability,configur,configuration-time,71,[CMake][ROOT-10873] Fix setting of environment in LCG views; Rely on a configuration-time setting to decide whether experimental PyROOT is ON and set the environment accordingly. More info about the issue here:. https://sft.its.cern.ch/jira/browse/ROOT-10873,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5930
https://github.com/root-project/root/pull/5930:71,modifiability,configur,configuration-time,71,[CMake][ROOT-10873] Fix setting of environment in LCG views; Rely on a configuration-time setting to decide whether experimental PyROOT is ON and set the environment accordingly. More info about the issue here:. https://sft.its.cern.ch/jira/browse/ROOT-10873,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5930
https://github.com/root-project/root/pull/5930:85,performance,time,time,85,[CMake][ROOT-10873] Fix setting of environment in LCG views; Rely on a configuration-time setting to decide whether experimental PyROOT is ON and set the environment accordingly. More info about the issue here:. https://sft.its.cern.ch/jira/browse/ROOT-10873,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5930
https://github.com/root-project/root/pull/5930:71,security,configur,configuration-time,71,[CMake][ROOT-10873] Fix setting of environment in LCG views; Rely on a configuration-time setting to decide whether experimental PyROOT is ON and set the environment accordingly. More info about the issue here:. https://sft.its.cern.ch/jira/browse/ROOT-10873,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5930
https://github.com/root-project/root/pull/5931:24,deployability,version,version,24,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:78,deployability,version,version,78,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:127,deployability,version,version,127,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:208,deployability,version,version,208,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:235,deployability,version,version,235,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:283,deployability,build,build,283,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:312,deployability,version,version,312,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:364,deployability,version,version,364,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:447,deployability,version,versions,447,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:24,integrability,version,version,24,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:78,integrability,version,version,78,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:127,integrability,version,version,127,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:208,integrability,version,version,208,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:235,integrability,version,version,235,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:312,integrability,version,version,312,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:364,integrability,version,version,364,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:447,integrability,version,versions,447,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:187,interoperability,incompatib,incompatible,187,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:24,modifiability,version,version,24,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:78,modifiability,version,version,78,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:127,modifiability,version,version,127,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:208,modifiability,version,version,208,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:235,modifiability,version,version,235,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:312,modifiability,version,version,312,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:364,modifiability,version,version,364,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:447,modifiability,version,versions,447,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:397,safety,test,test,397,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:397,testability,test,test,397,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5931:293,usability,guid,guides,293,"No need to check pandoc version anymore; panda 2.2 used to be the more recent version and a special check was needed in case a version older that 2.2 was used. Some options were backward incompatible between version older that 2.2 and version 2.2. Now on the jenkins machine used to build the guides, the pandoc version is 2.5 so we do not need to check on pandoc version anymore. And the way the test was done produced a wrong set of options for versions above 2.2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5931
https://github.com/root-project/root/pull/5932:58,deployability,version,version,58,[Backport 6.22] Add new options to root-config: --python2-version and --python3-version ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5932
https://github.com/root-project/root/pull/5932:80,deployability,version,version,80,[Backport 6.22] Add new options to root-config: --python2-version and --python3-version ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5932
https://github.com/root-project/root/pull/5932:58,integrability,version,version,58,[Backport 6.22] Add new options to root-config: --python2-version and --python3-version ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5932
https://github.com/root-project/root/pull/5932:80,integrability,version,version,80,[Backport 6.22] Add new options to root-config: --python2-version and --python3-version ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5932
https://github.com/root-project/root/pull/5932:58,modifiability,version,version,58,[Backport 6.22] Add new options to root-config: --python2-version and --python3-version ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5932
https://github.com/root-project/root/pull/5932:80,modifiability,version,version,80,[Backport 6.22] Add new options to root-config: --python2-version and --python3-version ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5932
https://github.com/root-project/root/pull/5933:100,availability,backup,backup,100,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:371,availability,backup,backup,371,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:79,energy efficiency,current,current,79,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:310,energy efficiency,current,current,310,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:436,energy efficiency,Profil,Profile,436,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:296,interoperability,distribut,distribution,296,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:357,interoperability,distribut,distribution,357,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:436,performance,Profil,Profile,436,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:100,reliability,backup,backup,100,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:371,reliability,backup,backup,371,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:100,safety,backup,backup,100,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5933:371,safety,backup,backup,371,"[io] TDirectoryFile is now explicit about cycle meaning.; The new layout add ""[current cycle]"" or ""[backup cycle]"" at the end of the line:. TFile** tutorials/hsimple.root Demo ROOT file with histograms. TFile* tutorials/hsimple.root Demo ROOT file with histograms. KEY: TH1F hpx;2 This is the px distribution [current cycle]. KEY: TH1F hpx;1 This is the px distribution [backup cycle]. KEY: TH2F hpxpy;1 py vs px. KEY: TProfile hprof;1 Profile of pz versus px. KEY: TNtuple ntuple;1 Demo ntuple",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5933
https://github.com/root-project/root/pull/5934:2707,availability,operat,operation,2707,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:29,deployability,build,builders,29,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:126,deployability,version,version,126,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:789,deployability,API,API,789,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1019,deployability,resourc,resources,1019,"ptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:2014,deployability,build,builder,2014,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:2211,deployability,build,builder,2211,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:2630,deployability,build,building,2630,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:621,energy efficiency,adapt,adapter,621,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1019,energy efficiency,resourc,resources,1019,"ptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1779,energy efficiency,Optim,Optimization,1779,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:126,integrability,version,version,126,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:621,integrability,adapt,adapter,621,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:789,integrability,API,API,789,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:880,integrability,event,eventual,880,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:167,interoperability,semant,semantics,167,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:621,interoperability,adapt,adapter,621,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:789,interoperability,API,API,789,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:844,interoperability,semant,semantics,844,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:919,interoperability,semant,semantics,919,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1160,interoperability,semant,semantics,1160,"y semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1290,interoperability,semant,semantics,1290,"le for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:126,modifiability,version,version,126,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:498,modifiability,layer,layer,498,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:621,modifiability,adapt,adapter,621,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1359,modifiability,maintain,maintain,1359,">. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1684,modifiability,concern,concerns,1684,"se it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1019,performance,resourc,resources,1019,"ptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1672,performance,perform,performance,1672,"ing, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescript",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1779,performance,Optimiz,Optimization,1779,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:77,safety,valid,valid,77,"[ntuple] Add FieldDescriptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1019,safety,resourc,resources,1019,"ptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1359,safety,maintain,maintain,1359,">. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1597,safety,risk,risk,1597,"king this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:2506,safety,except,except,2506,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1597,security,risk,risk,1597,"king this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:2466,security,modif,modify,2466,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1019,testability,resourc,resources,1019,"ptor builders ; This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>. <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1329,testability,simpl,simple,1329," for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .Fie",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1684,testability,concern,concerns,1684,"se it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1810,testability,simpl,simplified,1810,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1329,usability,simpl,simple,1329," for field descriptors</summary>. <br>. We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. . I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .Fie",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1672,usability,perform,performance,1672,"ing, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescript",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1747,usability,help,helps,1747,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:1810,usability,simpl,simplified,1810,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5934:2198,usability,support,supports,2198,"r `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). . With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. . This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain. * If we ever add fields to the class, Clone could be buggy (missing the added field). In contrast, the copy constructor will never miss any fields. . * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: . * define default values for a field descriptor. * remove move-only restriction on `RFieldDescriptor`. * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. . </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. . ```c++. RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(). .FieldId(1). .FieldName(""some_field""). .Structure(ENTupleStructure::kCollection). .UnwrapDescriptor(); . ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5934
https://github.com/root-project/root/pull/5935:57,modifiability,layer,layers,57,[GSoC 2020][WIP] Adding support for Conv3D and MaxPool3D layers; Added header files for Conv3D and MaxPool3D,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5935
https://github.com/root-project/root/pull/5935:24,usability,support,support,24,[GSoC 2020][WIP] Adding support for Conv3D and MaxPool3D layers; Added header files for Conv3D and MaxPool3D,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5935
https://github.com/root-project/root/pull/5936:49,availability,redund,redundant,49,[PyMVA] Fix DeclareOptions PyKeras; Remove extra redundant tensorboard Option,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5936
https://github.com/root-project/root/pull/5936:49,deployability,redundan,redundant,49,[PyMVA] Fix DeclareOptions PyKeras; Remove extra redundant tensorboard Option,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5936
https://github.com/root-project/root/pull/5936:49,reliability,redundan,redundant,49,[PyMVA] Fix DeclareOptions PyKeras; Remove extra redundant tensorboard Option,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5936
https://github.com/root-project/root/pull/5936:49,safety,redund,redundant,49,[PyMVA] Fix DeclareOptions PyKeras; Remove extra redundant tensorboard Option,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5936
https://github.com/root-project/root/pull/5937:7,deployability,version,version,7,Better version of ratioplotOld.C for ROOT version having ChangeLabel; Suggested here:. https://root-forum.cern.ch/t/tratioplot-with-timedisplay/39927/11,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5937
https://github.com/root-project/root/pull/5937:42,deployability,version,version,42,Better version of ratioplotOld.C for ROOT version having ChangeLabel; Suggested here:. https://root-forum.cern.ch/t/tratioplot-with-timedisplay/39927/11,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5937
https://github.com/root-project/root/pull/5937:7,integrability,version,version,7,Better version of ratioplotOld.C for ROOT version having ChangeLabel; Suggested here:. https://root-forum.cern.ch/t/tratioplot-with-timedisplay/39927/11,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5937
https://github.com/root-project/root/pull/5937:42,integrability,version,version,42,Better version of ratioplotOld.C for ROOT version having ChangeLabel; Suggested here:. https://root-forum.cern.ch/t/tratioplot-with-timedisplay/39927/11,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5937
https://github.com/root-project/root/pull/5937:7,modifiability,version,version,7,Better version of ratioplotOld.C for ROOT version having ChangeLabel; Suggested here:. https://root-forum.cern.ch/t/tratioplot-with-timedisplay/39927/11,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5937
https://github.com/root-project/root/pull/5937:42,modifiability,version,version,42,Better version of ratioplotOld.C for ROOT version having ChangeLabel; Suggested here:. https://root-forum.cern.ch/t/tratioplot-with-timedisplay/39927/11,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5937
https://github.com/root-project/root/pull/5937:132,performance,time,timedisplay,132,Better version of ratioplotOld.C for ROOT version having ChangeLabel; Suggested here:. https://root-forum.cern.ch/t/tratioplot-with-timedisplay/39927/11,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5937
https://github.com/root-project/root/pull/5938:1129,availability,failur,failure,1129,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:49,deployability,depend,depends,49,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:166,deployability,log,logic,166,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:390,deployability,fail,fail,390,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:819,deployability,depend,dependent,819,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:860,deployability,fail,fails,860,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1129,deployability,fail,failure,1129,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1227,deployability,depend,dependencies,1227,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1304,deployability,automat,automatically,1304,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:49,integrability,depend,depends,49,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:819,integrability,depend,dependent,819,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1227,integrability,depend,dependencies,1227,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:49,modifiability,depend,depends,49,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:407,modifiability,pac,packages,407,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:501,modifiability,pac,packages,501,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:560,modifiability,pac,packages,560,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:788,modifiability,pac,package,788,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:819,modifiability,depend,dependent,819,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1155,modifiability,pac,packages,1155,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1227,modifiability,depend,dependencies,1227,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1129,performance,failur,failure,1129,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:390,reliability,fail,fail,390,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:860,reliability,fail,fails,860,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1034,reliability,doe,doesn,1034,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1129,reliability,fail,failure,1129,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:49,safety,depend,depends,49,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:166,safety,log,logic,166,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:590,safety,test,test,590,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:729,safety,test,test,729,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:819,safety,depend,dependent,819,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:839,safety,test,tests,839,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1064,safety,test,test,1064,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1202,safety,test,tests,1202,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1227,safety,depend,dependencies,1227,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:166,security,log,logic,166,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:49,testability,depend,depends,49,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:166,testability,log,logic,166,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:590,testability,test,test,590,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:729,testability,test,test,729,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:772,testability,simpl,simple,772,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:819,testability,depend,dependent,819,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:839,testability,test,tests,839,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1064,testability,test,test,1064,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1202,testability,test,tests,1202,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1227,testability,depend,dependencies,1227,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1304,testability,automat,automatically,1304,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:772,usability,simpl,simple,772,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:905,usability,user,user-images,905,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5938:1112,usability,clear,clearly,1112,"[Tutorials] Fix wrong vetoing of tutorials; This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated. - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake. - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing. Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:. ```. ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). ```. Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:. ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5938
https://github.com/root-project/root/pull/5939:81,performance,time,times,81,"Correctly cleanup data in TTF (ROOT-10882); Created image may be cleaned up many times, causing ROOT crash. One also should initialize that pointer properly. Actually, created images should be cleaned up immediately after they were used,. but this requires more changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5939
https://github.com/root-project/root/pull/5940:89,performance,time,times,89,"Correctly cleanup data in TTF (ROOT-10882), v 6.22; Created image may be cleaned up many times, causing ROOT crash. One also should initialize that pointer properly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5940
https://github.com/root-project/root/pull/5941:22,reliability,doe,does,22,[cling] External llvm does not have config.h; This should fix the issue when cling is built against prebuilt llvm on setups. such as conda. Should partially fix ROOT-10812,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5941
https://github.com/root-project/root/pull/5942:89,performance,time,times,89,"Correctly cleanup data in TTF (ROOT-10882), v 6.20; Created image may be cleaned up many times, causing ROOT crash. One also should initialize that pointer properly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5942
https://github.com/root-project/root/pull/5943:75,availability,error,errors,75,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:241,deployability,fail,failed,241,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:236,energy efficiency,load,load,236,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:182,integrability,protocol,protocol,182,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:249,integrability,Protocol,Protocol,249,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:123,interoperability,Plug,Plugin,123,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:182,interoperability,protocol,protocol,182,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:249,interoperability,Protocol,Protocol,249,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:75,performance,error,errors,75,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:236,performance,load,load,236,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:241,reliability,fail,failed,241,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:75,safety,error,errors,75,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:223,security,cryptograph,cryptography,223,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:75,usability,error,errors,75,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5943:262,usability,support,supported,262,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5943
https://github.com/root-project/root/pull/5944:101,performance,CACH,CACHEREAD,101,"Add missing call to TFile::SetCacheFileDir("".""); Without it the following TFile::Open call using the CACHEREAD option. will not work as intended:. inputFile = TFile::Open(inputFileLink, ""CACHEREAD"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5944
https://github.com/root-project/root/pull/5944:187,performance,CACH,CACHEREAD,187,"Add missing call to TFile::SetCacheFileDir("".""); Without it the following TFile::Open call using the CACHEREAD option. will not work as intended:. inputFile = TFile::Open(inputFileLink, ""CACHEREAD"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5944
https://github.com/root-project/root/pull/5944:147,safety,input,inputFile,147,"Add missing call to TFile::SetCacheFileDir("".""); Without it the following TFile::Open call using the CACHEREAD option. will not work as intended:. inputFile = TFile::Open(inputFileLink, ""CACHEREAD"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5944
https://github.com/root-project/root/pull/5944:171,safety,input,inputFileLink,171,"Add missing call to TFile::SetCacheFileDir("".""); Without it the following TFile::Open call using the CACHEREAD option. will not work as intended:. inputFile = TFile::Open(inputFileLink, ""CACHEREAD"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5944
https://github.com/root-project/root/pull/5944:147,usability,input,inputFile,147,"Add missing call to TFile::SetCacheFileDir("".""); Without it the following TFile::Open call using the CACHEREAD option. will not work as intended:. inputFile = TFile::Open(inputFileLink, ""CACHEREAD"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5944
https://github.com/root-project/root/pull/5944:171,usability,input,inputFileLink,171,"Add missing call to TFile::SetCacheFileDir("".""); Without it the following TFile::Open call using the CACHEREAD option. will not work as intended:. inputFile = TFile::Open(inputFileLink, ""CACHEREAD"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5944
https://github.com/root-project/root/pull/5945:16,deployability,build,building,16,ROOT-10812: Fix building clad with external clang;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5945
https://github.com/root-project/root/pull/5946:75,availability,error,errors,75,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5946
https://github.com/root-project/root/pull/5946:241,deployability,fail,failed,241,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5946
https://github.com/root-project/root/pull/5946:236,energy efficiency,load,load,236,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5946
https://github.com/root-project/root/pull/5946:182,integrability,protocol,protocol,182,"[Tutorials] Veto df103_NanoAODHiggsAnalysis on Mac 10.13; Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```. Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so. Secsss: 0x30 cryptography load failed; Protocol not supported. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5946
